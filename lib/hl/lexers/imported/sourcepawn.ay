use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "SourcePawn"
aliases: ["sp"]
extensions: [".sp"]
mimetypes: ["text/x-sourcepawn"]
start: .root
flags: 0

lex(macro):
  r"[^/\n]+" is(comment.preproc)
  r"/\*(.|\n)*?\*/" is(comment.multiline)
  r"//.*?\n" is(comment.single) -> pop
  r"/" is(comment.preproc)
  r"(?<=\\)\n" is(comment.preproc)
  r"\n" is(comment.preproc) -> pop

lex(root):
  r"^\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"^\#" is(comment.preproc) -> go-to(macro)
  r"^(?:\s|//.*?\n|/\*.*?\*/)+\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"^(?:\s|//.*?\n|/\*.*?\*/)+\#" is(comment.preproc) -> go-to(macro)
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"/(\\\n)?/(\n|(.|\n)*?[^\\]\n)" is(comment.single)
  r"/(\\\n)?\*(.|\n)*?\*(\\\n)?/" is(comment.multiline)
  r"[{}]" is(punctuation)
  r"L?\"" is(literal.string) -> go-to(string)
  r"L?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[LlUu]*" is(literal.number.float)
  r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+[LlUu]*" is(literal.number.hex)
  r"0[0-7]+[LlUu]*" is(literal.number.oct)
  r"\d+[LlUu]*" is(literal.number.integer)
  r"\*/" is(error)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"[()\[\],.;]" is(punctuation)
  r"(case|const|continue|native|default|else|enum|for|if|new|operator|public|return|sizeof|static|decl|struct|switch)\b" is(keyword)
  r"(bool|Float)\b" is(keyword.type)
  r"(true|false)\b" is(keyword.constant)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

lex(if0):
  r"^\s*\#if.*?(?<!\\)\n" is(comment.preproc) -> push
  r"^\s*\#endif.*?(?<!\\)\n" is(comment.preproc) -> pop
  r".*?\n" is(comment)

const-set(.Lexer, lexer)
