use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "MoonScript"
aliases: ["moon", "moonscript"]
extensions: [".moon"]
mimetypes: ["text/x-moonscript", "application/x-moonscript"]
start: .root
flags: 0

lex(sqs):
  r"'" is(literal.string.single) -> pop
  r"." is(literal.string)

lex(stringescape):
  r"\\([abfnrtv\\\"']|\d{1,3})" is(literal.string.escape)

lex(base):
  r"--.*$" is(comment.single)
  r"(?i)(\d*\.\d+|\d+\.\d*)(e[+-]?\d+)?" is(literal.number.float)
  r"(?i)\d+e[+-]?\d+" is(literal.number.float)
  r"(?i)0x[0-9a-f]*" is(literal.number.hex)
  r"\d+" is(literal.number.integer)
  r"\n" is(text)
  r"[^\S\n]+" is(text)
  r"(?m)\[(=*)\[.*?\]\1\]" is(literal.string)
  r"(->|=>)" is(name.function)
  r":[a-zA-Z_][a-zA-Z0-9_]*" is(name.variable)
  r"(==|!=|\126=|<=|>=|\.\.\.|\.\.|[=+\-*/%^<>\#!.\\:])" is(operator)
  r"[;,]" is(punctuation)
  r"[\[\]\{\}\(\)]" is(keyword.type)
  r"[a-zA-Z_][a-zA-Z0-9_]*:" is(name.variable)
  r"(class|extends|if|then|super|do|with|import|export|while|elseif|return|for|in|from|when|using|else|and|or|not|switch|break)\b" is(keyword)
  r"(true|false|nil)\b" is(keyword.constant)
  r"(and|or|not)\b" is(operator.word)
  r"(self)\b" is(name.builtin.pseudo)
  r"@@?([a-zA-Z_][a-zA-Z0-9_]*)?" is(name.variable.class)
  r"[A-Z]\w*" is(name.class)
  r"[A-Za-z_][A-Za-z0-9_]*(\.[A-Za-z_][A-Za-z0-9_]*)?" is(name)
  r"'" is(literal.string.single) -> combined(stringescape, sqs)
  r"\"" is(literal.string.double) -> combined(stringescape, dqs)

lex(root):
  r"\#!(.*?)$" is(comment.preproc)
  r"" is(text) -> go-to(base)

lex(dqs):
  r"\"" is(literal.string.double) -> pop
  r"." is(literal.string)

const-set(.Lexer, lexer)
