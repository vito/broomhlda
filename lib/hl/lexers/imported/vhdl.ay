use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "vhdl"
aliases: ["vhdl"]
extensions: [".vhdl", ".vhd"]
mimetypes: ["text/x-vhdl"]
start: .root
flags: Regexp IGNORECASE

lex(keywords):
  r"(abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|return|rol|ror|select|severity|signal|shared|sla|sli|sra|srl|subtype|then|to|transport|type|units|until|use|variable|wait|when|while|with|xnor|xor)\b" is(keyword)

lex(root):
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"--(?![!\#$%&*+./<=>?@\^|_\126]).*?$" is(comment.single)
  r"'(U|X|0|1|Z|W|L|H|-)'" is(literal.string.char)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"'[a-zA-Z_][a-zA-Z0-9_]*" is(name.attribute)
  r"[()\[\],.;\']" is(punctuation)
  r"\"[^\n\\]*\"" is(literal.string)
  r"(library)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(keyword, text, name.namespace))
  r"(use)(\s+)(entity)" is(by-groups(keyword, text, keyword))
  r"(use)(\s+)([a-zA-Z_][\.a-zA-Z0-9_]*)" is(by-groups(keyword, text, name.namespace))
  r"(entity|component)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(keyword, text, name.class))
  r"(architecture|configuration)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)(\s+)(of)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)(\s+)(is)" is(by-groups(keyword, text, name.class, text, keyword, text, name.class, text, keyword))
  r"(end)(\s+)" is(by-groups(using(self class), text)) -> go-to(endblock)
  any-of(types)
  any-of(keywords)
  any-of(numbers)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(types):
  r"(boolean|bit|character|severity_level|integer|time|delay_length|natural|positive|string|bit_vector|file_open_kind|file_open_status|std_ulogic|std_ulogic_vector|std_logic|std_logic_vector)\b" is(keyword.type)

lex(endblock):
  any-of(keywords)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class)
  r"(\s+)" is(text)
  r";" is(punctuation) -> pop

lex(numbers):
  r"\d{1,2}\#[0-9a-fA-F_]+\#?" is(literal.number.integer)
  r"[0-1_]+(\.[0-1_])" is(literal.number.integer)
  r"\d+" is(literal.number.integer)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+" is(literal.number.float)
  r"H\"[0-9a-fA-F_]+\"" is(literal.number.oct)
  r"O\"[0-7_]+\"" is(literal.number.oct)
  r"B\"[0-1_]+\"" is(literal.number.oct)

const-set(.Lexer, lexer)
