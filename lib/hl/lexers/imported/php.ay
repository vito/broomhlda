use("atomy")
use("hl/define")

Lexer = lexer:
name: "PHP"
aliases: ["php", "php3", "php4", "php5"]
extensions: [".php", ".php[345]", ".inc"]
mimetypes: ["text/x-php"]
start: .root
flags: Regexp IGNORECASE | Regexp MULTILINE

lex(classname):
  r"[a-zA-Z_][\\a-zA-Z0-9_]*" is(name.class) -> pop

lex(php):
  r"\?>" is(comment.preproc) -> pop
  r"<<<(\'?)([a-zA-Z_][a-zA-Z0-9_]*)\1\n.*?\n\2\;?\n" is(literal.string)
  r"\s+" is(text)
  r"\#.*?\n" is(comment.single)
  r"//.*?\n" is(comment.single)
  r"/\*\*/" is(comment.multiline)
  r"/\*\*.*?\*/" is(literal.string.doc)
  r"/\*.*?\*/" is(comment.multiline)
  r"(->|::)(\s*)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, text, name.attribute))
  r"[\126!%^&*+=|:.<>/?@-]+" is(operator)
  r"[\[\]{}();,]+" is(punctuation)
  r"(class)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
  r"(function)(\s*)(?=\()" is(by-groups(keyword, text))
  r"(function)(\s+)(&?)(\s*)" is(by-groups(keyword, text, operator, text)) -> go-to(functionname)
  r"(const)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(keyword, text, name.constant))
  r"(and|E_PARSE|old_function|E_ERROR|or|as|E_WARNING|parent|eval|PHP_OS|break|exit|case|extends|PHP_VERSION|cfunction|FALSE|print|for|require|continue|foreach|require_once|declare|return|default|static|do|switch|die|stdClass|echo|else|TRUE|elseif|var|empty|if|xor|enddeclare|include|virtual|endfor|include_once|while|endforeach|global|__FILE__|endif|list|__LINE__|endswitch|new|__sleep|endwhile|not|array|__wakeup|E_ALL|NULL|final|php_user_filter|interface|implements|public|private|protected|abstract|clone|try|catch|throw|this|use|namespace|trait)\b" is(keyword)
  r"(true|false|null)\b" is(keyword.constant)
  r"\$\{\$+[a-zA-Z_][a-zA-Z0-9_]*\}" is(name.variable)
  r"\$+[a-zA-Z_][a-zA-Z0-9_]*" is(name.variable)
  r"[\\a-zA-Z_][\\a-zA-Z0-9_]*" is(name.other)
  r"(\d+\.\d*|\d*\.\d+)([eE][+-]?[0-9]+)?" is(literal.number.float)
  r"\d+[eE][+-]?[0-9]+" is(literal.number.float)
  r"0[0-7]+" is(literal.number.oct)
  r"0[xX][a-fA-F0-9]+" is(literal.number.hex)
  r"\d+" is(literal.number.integer)
  r"'([^'\\]*(?:\\.[^'\\]*)*)'" is(literal.string.single)
  r"`([^`\\]*(?:\\.[^`\\]*)*)`" is(literal.string.backtick)
  r"\"" is(literal.string.double) -> go-to(string)

lex(root):
  r"<\?(php)?" is(comment.preproc) -> go-to(php)
  r"[^<]+" is(other)
  r"<" is(other)

lex(functionname):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.function) -> pop

lex(string):
  r"\"" is(literal.string.double) -> pop
  r"[^{$\"\\]+" is(literal.string.double)
  r"\\([nrt\\"$\\]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2})" is(literal.string.escape)
  r"\$[a-zA-Z_][a-zA-Z0-9_]*(\[\S+\]|->[a-zA-Z_][a-zA-Z0-9_]*)?" is(literal.string.interpol)
  r"(\{\$\{)(.*?)(\}\})" is(by-groups(literal.string.interpol, using(self class), literal.string.interpol))
  r"(\{)(\$.*?)(\})" is(by-groups(literal.string.interpol, using(self class), literal.string.interpol))
  r"(\$\{)(\S+)(\})" is(by-groups(literal.string.interpol, name.variable, literal.string.interpol))
  r"[${\\]+" is(literal.string.double)

