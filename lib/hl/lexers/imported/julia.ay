use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "Julia"
aliases: ["julia", "jl"]
extensions: [".jl"]
mimetypes: ["text/x-julia", "application/x-julia"]
start: .root
flags: 0

lex(typename):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

lex(stringescape):
  r"\\([\\abfnrtv\"\']|\n|N{.*?}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})" is(literal.string.escape)

lex(root):
  r"\n" is(text)
  r"[^\S\n]+" is(text)
  r"\#.*$" is(comment)
  r"[\]{}:(),;\[@]" is(punctuation)
  r"\\\n" is(text)
  r"\\" is(text)
  r"(begin|while|for|in|return|break|continue|macro|quote|let|if|elseif|else|try|catch|end|bitstype|ccall|do|using|module|import|export|importall|baremodule)\b" is(keyword)
  r"(local|global|const)\b" is(keyword.declaration)
  r"(Bool|Int|Int8|Int16|Int32|Int64|Uint|Uint8|Uint16|Uint32|Uint64|Float32|Float64|Complex64|Complex128|Any|Nothing|None)\b" is(keyword.type)
  r"(function)((?:\s|\\\s)+)" is(by-groups(keyword, name.function)) -> go-to(funcname)
  r"(type|typealias|abstract)((?:\s|\\\s)+)" is(by-groups(keyword, name.class)) -> go-to(typename)
  r"==|!=|<=|>=|->|&&|\|\||::|<:|[-\126+/*%=<>&^|.?!$]" is(operator)
  r"\.\*|\.\^|\.\\|\.\/|\\" is(operator)
  r"(exit|whos|edit|load|is|isa|isequal|typeof|tuple|ntuple|uid|hash|finalizer|convert|promote|subtype|typemin|typemax|realmin|realmax|sizeof|eps|promote_type|method_exists|applicable|invoke|dlopen|dlsym|system|error|throw|assert|new|Inf|Nan|pi|im)\b" is(name.builtin)
  r"`(?m).*?`" is(literal.string.backtick)
  r"'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,3}|\\u[a-fA-F0-9]{1,4}|\\U[a-fA-F0-9]{1,6}|[^\\\'\n])'" is(literal.string.char)
  r"(?<=[.\w\)\]])\'+" is(operator)
  r"(?:[IL])\"" is(literal.string) -> go-to(string)
  r"[E]?\"" is(literal.string) -> combined(stringescape, string)
  r"@[a-zA-Z0-9_.]+" is(name.decorator)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)
  r"(\d+\.\d*|\d*\.\d+)([eEf][+-]?[0-9]+)?" is(literal.number.float)
  r"\d+[eEf][+-]?[0-9]+" is(literal.number.float)
  r"0b[01]+" is(literal.number.binary)
  r"0o[0-7]+" is(literal.number.oct)
  r"0x[a-fA-F0-9]+" is(literal.number.hex)
  r"\d+" is(literal.number.integer)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\\\|\\\"|\\\n" is(literal.string.escape)
  r"\$(\([a-zA-Z0-9_]+\))?[-\#0 +]*([0-9]+|[*])?(\.([0-9]+|[*]))?" is(literal.string.interpol)
  r"[^\\\"$]+" is(literal.string)
  r"[\"\\]" is(literal.string)
  r"\$" is(literal.string)

lex(funcname):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.function) -> pop
  r"\([^\s\w{]{1,2}\)" is(operator) -> pop
  r"[^\s\w{]{1,2}" is(operator) -> pop

const-set(.Lexer, lexer)
