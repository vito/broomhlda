use("atomy")
use("hl/define")

Lexer = lexer:
name: "C"
aliases: ["c"]
extensions: [".c", ".h"]
mimetypes: ["text/x-chdr", "text/x-csrc"]
start: .root
flags: 0

lex(function):
  any-of(whitespace)
  any-of(statements)
  Regexp new(";") is(punctuation)
  Regexp new("{") is(punctuation) -> push
  Regexp new("}") is(punctuation) -> pop

lex(statements):
  Regexp new("L?\"") is(literal.string) -> go-to(string)
  Regexp new("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'") is(literal.string.char)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("0x[0-9a-fA-F]+[LlUu]*") is(literal.number.hex)
  Regexp new("0[0-7]+[LlUu]*") is(literal.number.oct)
  Regexp new("\\d+[LlUu]*") is(literal.number.integer)
  Regexp new("\\*/") is(error)
  Regexp new("[\126!%^&*+=|?:<>/-]") is(operator)
  Regexp new("[()\\[\\],.]") is(punctuation)
  Regexp new("\\b(case)(.+?)(:)") is(by-groups(keyword, using(self class), text))
  Regexp new("(auto|break|case|const|continue|default|do|else|enum|extern|for|goto|if|register|restricted|return|sizeof|static|struct|switch|typedef|union|volatile|virtual|while)\\b") is(keyword)
  Regexp new("(int|long|float|short|double|char|unsigned|signed|void)\\b") is(keyword.type)
  Regexp new("(_{0,2}inline|naked|restrict|thread|typename)\\b") is(keyword.reserved)
  Regexp new("__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|declspec|finally|int64|try|leave)\\b") is(keyword.reserved)
  Regexp new("(true|false|NULL)\\b") is(name.builtin)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name)

lex(whitespace):
  Regexp new("^#if\\s+0") is(comment.preproc) -> go-to(if0)
  Regexp new("^#") is(comment.preproc) -> go-to(macro)
  Regexp new("^(?:\\s|//.*?\\n|/[*].*?[*]/)+#if\\s+0") is(comment.preproc) -> go-to(if0)
  Regexp new("^(?:\\s|//.*?\\n|/[*].*?[*]/)+#") is(comment.preproc) -> go-to(macro)
  Regexp new("^(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:(?!:))") is(by-groups(text, name.label))
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)

lex(statement):
  any-of(whitespace)
  any-of(statements)
  Regexp new("[{}]") is(punctuation)
  Regexp new(";") is(punctuation) -> pop

lex(if0):
  Regexp new("^\\s*#if.*?(?<!\\\\)\\n") is(comment.preproc) -> push
  Regexp new("^\\s*#el(?:se|if).*\\n") is(comment.preproc) -> pop
  Regexp new("^\\s*#endif.*?(?<!\\\\)\\n") is(comment.preproc) -> pop
  Regexp new(".*?\\n") is(comment)

lex(macro):
  Regexp new("[^/\\n]+") is(comment.preproc)
  Regexp new("/[*](.|\\n)*?[*]/") is(comment.multiline)
  Regexp new("//.*?\\n") is(comment.single) -> pop
  Regexp new("/") is(comment.preproc)
  Regexp new("(?<=\\\\)\\n") is(comment.preproc)
  Regexp new("\\n") is(comment.preproc) -> pop

lex(root):
  any-of(whitespace)
  Regexp new("((?:[a-zA-Z0-9_*\\s])+?(?:\\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\\s*\\([^;]*?\\))((?:\\s|//.*?\\n|/[*].*?[*]/)+)({)") is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation)) -> go-to(function)
  Regexp new("((?:[a-zA-Z0-9_*\\s])+?(?:\\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\\s*\\([^;]*?\\))((?:\\s|//.*?\\n|/[*].*?[*]/)+)(;)") is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation))
  Regexp new("") is(text) -> go-to(statement)

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

