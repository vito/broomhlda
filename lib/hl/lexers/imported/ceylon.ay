use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "Ceylon"
aliases: ["ceylon"]
extensions: [".ceylon"]
mimetypes: ["text/x-ceylon"]
start: .root
flags: Regexp MULTILINE

lex(import):
  r"[a-zA-Z0-9_.]+\w+ \{([a-zA-Z,]+|\.\.\.)\}" is(name.namespace) -> pop

lex(root):
  r"^(\s*(?:[a-zA-Z_][a-zA-Z0-9_\.\[\]]*\s+)+?)([a-zA-Z_][a-zA-Z0-9_]*)(\s*)(\()" is(by-groups(using(self class), name.function, text, operator))
  r"[^\S\n]+" is(text)
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)
  r"(variable|shared|abstract|doc|by|formal|actual)" is(name.decorator)
  r"(break|case|catch|continue|default|else|finally|for|in|variable|if|return|switch|this|throw|try|while|is|exists|nonempty|then|outer)\b" is(keyword)
  r"(abstracts|extends|satisfies|adapts|super|given|of|out|assign|transient|volatile)\b" is(keyword.declaration)
  r"(function|value|void)\b" is(keyword.type)
  r"(package)(\s+)" is(by-groups(keyword.namespace, text))
  r"(true|false|null)\b" is(keyword.constant)
  r"(class|interface|object)(\s+)" is(by-groups(keyword.declaration, text)) -> go-to(class)
  r"(import)(\s+)" is(by-groups(keyword.namespace, text)) -> go-to(import)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"'\\.'|'[^\\]'|'\\u[0-9a-fA-F]{4}'" is(literal.string.quoted)
  r"`\\.`|`[^\\]`|`\\u[0-9a-fA-F]{4}`" is(literal.string.char)
  r"(\.)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"[a-zA-Z_][a-zA-Z0-9_]*:" is(name.label)
  r"[a-zA-Z_\$][a-zA-Z0-9_]*" is(name)
  r"[\126\^\*!%&\[\]\(\)\{\}<>\|+=:;,./?-]" is(operator)
  r"\d{1,3}(_\d{3})+\.\d{1,3}(_\d{3})+[kMGTPmunpf]?" is(literal.number.float)
  r"\d{1,3}(_\d{3})+\.[0-9]+([eE][+-]?[0-9]+)?[kMGTPmunpf]?" is(literal.number.float)
  r"[0-9][0-9]*\.\d{1,3}(_\d{3})+[kMGTPmunpf]?" is(literal.number.float)
  r"[0-9][0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[kMGTPmunpf]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+" is(literal.number.hex)
  r"\d{1,3}(_\d{3})+[kMGTP]?" is(literal.number.integer)
  r"[0-9]+[kMGTP]?" is(literal.number.integer)
  r"\n" is(text)

lex(class):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

const-set(.Lexer, lexer)
