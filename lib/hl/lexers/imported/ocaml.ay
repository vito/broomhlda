use("atomy")
use("hl/define")

Lexer = lexer:
name: "OCaml"
aliases: ["ocaml"]
extensions: [".ml", ".mli", ".mll", ".mly"]
mimetypes: ["text/x-ocaml"]
start: .root
flags: 0

lex(comment):
  Regexp new("[^(*)]+") is(comment)
  Regexp new("\\(\\*") is(comment) -> push
  Regexp new("\\*\\)") is(comment) -> pop
  Regexp new("[(*)]") is(comment)

lex(root):
  Regexp new("\\s+") is(text)
  Regexp new("false|true|\\(\\)|\\[\\]") is(name.builtin.pseudo)
  Regexp new("\\b([A-Z][A-Za-z0-9_\\']*)(?=\\s*\\.)") is(name.namespace) -> go-to(dotted)
  Regexp new("\\b([A-Z][A-Za-z0-9_\\']*)") is(name.class)
  Regexp new("\\(\\*") is(comment) -> go-to(comment)
  Regexp new("\\b(as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|false|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|private|raise|rec|sig|struct|then|to|true|try|type|val|virtual|when|while|with)\\b") is(keyword)
  Regexp new("(!=|#|&|&&|\\(|\\)|\\*|\\+|,|-|-\\.|->|\\.|\\.\\.|:|::|:=|:>|;|;;|<|<-|=|>|>]|>}|\\?|\\?\\?|\\[|\\[<|\\[>|\\[\\||]|_|`|{|{<|\\||\\|]|}|\126)") is(operator)
  Regexp new("([=<>@^|&+\\*/$%-]|[!?\126])?[!$%&*+\\./:<=>?@^|\126-]") is(operator)
  Regexp new("\\b(and|asr|land|lor|lsl|lxor|mod|or)\\b") is(operator.word)
  Regexp new("\\b(unit|int|float|bool|string|char|list|array)\\b") is(keyword.type)
  Regexp new("[^\\W\\d][\\w']*") is(name)
  Regexp new("\\d[\\d_]*") is(literal.number.integer)
  Regexp new("0[xX][\\da-fA-F][\\da-fA-F_]*") is(literal.number.hex)
  Regexp new("0[oO][0-7][0-7_]*") is(literal.number.oct)
  Regexp new("0[bB][01][01_]*") is(literal.number.binary)
  Regexp new("-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)") is(literal.number.float)
  Regexp new("'(?:(\\\\[\\\\\\\"'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))'") is(literal.string.char)
  Regexp new("'.'") is(literal.string.char)
  Regexp new("'") is(keyword)
  Regexp new("\"") is(literal.string.double) -> go-to(string)
  Regexp new("[\126?][a-z][\\w\\']*:") is(name.variable)

lex(string):
  Regexp new("[^\\\\\"]+") is(literal.string.double)
  any-of(escape-sequence)
  Regexp new("\\\\\\n") is(literal.string.double)
  Regexp new("\"") is(literal.string.double) -> pop

lex(escape-sequence):
  Regexp new("\\\\[\\\\\\\"\\'ntbr]") is(literal.string.escape)
  Regexp new("\\\\[0-9]{3}") is(literal.string.escape)
  Regexp new("\\\\x[0-9a-fA-F]{2}") is(literal.string.escape)

lex(dotted):
  Regexp new("\\s+") is(text)
  Regexp new("\\.") is(punctuation)
  Regexp new("[A-Z][A-Za-z0-9_\\']*(?=\\s*\\.)") is(name.namespace)
  Regexp new("[A-Z][A-Za-z0-9_\\']*") is(name.class) -> pop
  Regexp new("[a-z_][A-Za-z0-9_\\']*") is(name) -> pop

