use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "VB.net"
  aliases: ["vb.net", "vbnet"]
  extensions: [".vb", ".bas"]
  mimetypes: ["text/x-vbnet", "text/x-vba"]
  start: .root
  flags: Regexp IGNORECASE

  lex(dim):
    r"[a-z_][a-z0-9_]*" is(name.variable) -> pop
    r"" is(text) -> pop

  lex(end):
    r"\s+" is(text)
    r"(Function|Sub|Property|Class|Structure|Enum|Module|Namespace)\b" is(keyword) -> pop
    r"" is(text) -> pop

  lex(string):
    r"\"\"" is(literal.string)
    r"\"C?" is(literal.string) -> pop
    r"[^\"]+" is(literal.string)

  lex(namespace):
    r"[a-z_][a-z0-9_.]*" is(name.namespace) -> pop

  lex(funcname):
    r"[a-z_][a-z0-9_]*" is(name.function) -> pop

  lex(classname):
    r"[a-z_][a-z0-9_]*" is(name.class) -> pop

  lex(root):
    r"^\s*<.*?>" is(name.attribute)
    r"\s+" is(text)
    r"\n" is(text)
    r"rem\b.*?\n" is(comment)
    r"'.*?\n" is(comment)
    r"\#If\s.*?\sThen|\#ElseIf\s.*?\sThen|\#End\s+If|\#Const|\#ExternalSource.*?\n|\#End\s+ExternalSource|\#Region.*?\n|\#End\s+Region|\#ExternalChecksum" is(comment.preproc)
    r"[\(\){}!\#,.:]" is(punctuation)
    r"Option\s+(Strict|Explicit|Compare)\s+(On|Off|Binary|Text)" is(keyword.declaration)
    r"(?<!\.)(AddHandler|Alias|ByRef|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDec|CDbl|CInt|CLng|CObj|Continue|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|Declare|Default|Delegate|DirectCast|Do|Each|Else|ElseIf|EndIf|Erase|Error|Event|Exit|False|Finally|For|Friend|Get|Global|GoSub|GoTo|Handles|If|Implements|Inherits|Interface|Let|Lib|Loop|Me|MustInherit|MustOverride|MyBase|MyClass|Narrowing|New|Next|Not|Nothing|NotInheritable|NotOverridable|Of|On|Operator|Option|Optional|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Single|Static|Step|Stop|SyncLock|Then|Throw|To|True|Try|TryCast|Wend|Using|When|While|Widening|With|WithEvents|WriteOnly)\b" is(keyword)
    r"(?<!\.)End\b" is(keyword) -> go-to(end)
    r"(?<!\.)(Dim|Const)\b" is(keyword) -> go-to(dim)
    r"(?<!\.)(Function|Sub|Property)(\s+)" is(by-groups(keyword, text)) -> go-to(funcname)
    r"(?<!\.)(Class|Structure|Enum)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
    r"(?<!\.)(Module|Namespace|Imports)(\s+)" is(by-groups(keyword, text)) -> go-to(namespace)
    r"(?<!\.)(Boolean|Byte|Char|Date|Decimal|Double|Integer|Long|Object|SByte|Short|Single|String|Variant|UInteger|ULong|UShort)\b" is(keyword.type)
    r"(?<!\.)(AddressOf|And|AndAlso|As|GetType|In|Is|IsNot|Like|Mod|Or|OrElse|TypeOf|Xor)\b" is(operator.word)
    r"&=|[*]=|/=|\\=|\^=|\+=|-=|<<=|>>=|<<|>>|:=|<=|>=|<>|[-&*/\\^+=<>]" is(operator)
    r"\"" is(literal.string) -> go-to(string)
    r"[a-zA-Z_][a-zA-Z0-9_]*[%&@!\#$]?" is(name)
    r"\#.*?\#" is(literal.date)
    r"(\d+\.\d*|\d*\.\d+)([fF][+-]?[0-9]+)?" is(literal.number.float)
    r"\d+([SILDFR]|US|UI|UL)?" is(literal.number.integer)
    r"&H[0-9a-f]+([SILDFR]|US|UI|UL)?" is(literal.number.integer)
    r"&O[0-7]+([SILDFR]|US|UI|UL)?" is(literal.number.integer)
    r"_\n" is(text)

const-set(.Lexer, lexer)
