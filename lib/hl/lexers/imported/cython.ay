use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "Cython"
aliases: ["cython", "pyx"]
extensions: [".pyx", ".pxd", ".pxi"]
mimetypes: ["text/x-cython", "application/x-cython"]
start: .root
flags: 0

lex(tsqs):
  r"'''" is(literal.string) -> pop
  any-of(strings)
  any-of(nl)

lex(builtins):
  r"(?<!\.)(__import__|abs|all|any|apply|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|file|filter|float|frozenset|getattr|globals|hasattr|hash|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b" is(name.builtin)
  r"(?<!\.)(self|None|Ellipsis|NotImplemented|False|True|NULL)\b" is(name.builtin.pseudo)
  r"(?<!\.)(ArithmeticError|AssertionError|AttributeError|BaseException|DeprecationWarning|EOFError|EnvironmentError|Exception|FloatingPointError|FutureWarning|GeneratorExit|IOError|ImportError|ImportWarning|IndentationError|IndexError|KeyError|KeyboardInterrupt|LookupError|MemoryError|NameError|NotImplemented|NotImplementedError|OSError|OverflowError|OverflowWarning|PendingDeprecationWarning|ReferenceError|RuntimeError|RuntimeWarning|StandardError|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError)\b" is(name.exception)

lex(name):
  r"@[a-zA-Z0-9_]+" is(name.decorator)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(dqs):
  r"\"" is(literal.string) -> pop
  r"\\\\|\\\"|\\\n" is(literal.string.escape)
  any-of(strings)

lex(sqs):
  r"'" is(literal.string) -> pop
  r"\\\\|\\'|\\\n" is(literal.string.escape)
  any-of(strings)

lex(tdqs):
  r"\"\"\"" is(literal.string) -> pop
  any-of(strings)
  any-of(nl)

lex(backtick):
  r"`.*?`" is(literal.string.backtick)

lex(funcname):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.function) -> pop

lex(classname):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

lex(stringescape):
  r"\\([\\abfnrtv\"\']|\n|N{.*?}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})" is(literal.string.escape)

lex(numbers):
  r"(\d+\.?\d*|\d*\.\d+)([eE][+-]?[0-9]+)?" is(literal.number.float)
  r"0\d+" is(literal.number.oct)
  r"0[xX][a-fA-F0-9]+" is(literal.number.hex)
  r"\d+L" is(literal.number.integer.long)
  r"\d+" is(literal.number.integer)

lex(import):
  r"(\s+)(as)(\s+)" is(by-groups(text, keyword, text))
  r"[a-zA-Z_][a-zA-Z0-9_.]*" is(name.namespace)
  r"(\s*)(,)(\s*)" is(by-groups(text, operator, text))
  r"" is(text) -> pop

lex(keywords):
  r"(assert|break|by|continue|ctypedef|del|elif|else|except\??|exec|finally|for|gil|global|if|include|lambda|nogil|pass|print|raise|return|try|while|yield|as|with)\b" is(keyword)
  r"(DEF|IF|ELIF|ELSE)\b" is(comment.preproc)

lex(cdef):
  r"(public|readonly|extern|api|inline)\b" is(keyword.reserved)
  r"(struct|enum|union|class)\b" is(keyword)
  r"([a-zA-Z_][a-zA-Z0-9_]*)(\s*)(?=[(:\#=]|$)" is(by-groups(name.function, text)) -> pop
  r"([a-zA-Z_][a-zA-Z0-9_]*)(\s*)(,)" is(by-groups(name.function, text, punctuation))
  r"from\b" is(keyword) -> pop
  r"as\b" is(keyword)
  r":" is(punctuation) -> pop
  r"(?=[\"\'])" is(text) -> pop
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(keyword.type)
  r"." is(text)

lex(nl):
  r"\n" is(literal.string)

lex(root):
  r"\n" is(text)
  r"^(\s*)(\"\"\"(?:.|\n)*?\"\"\")" is(by-groups(text, literal.string.doc))
  r"^(\s*)('''(?:.|\n)*?''')" is(by-groups(text, literal.string.doc))
  r"[^\S\n]+" is(text)
  r"\#.*$" is(comment)
  r"[\]{}:(),;\[]" is(punctuation)
  r"\\\n" is(text)
  r"\\" is(text)
  r"(in|is|and|or|not)\b" is(operator.word)
  r"(<)([a-zA-Z0-9.?]+)(>)" is(by-groups(punctuation, keyword.type, punctuation))
  r"!=|==|<<|>>|[-\126+/*%=<>&^|.?]" is(operator)
  r"(from)(\d+)(<=)(\s+)(<)(\d+)(:)" is(by-groups(keyword, literal.number.integer, operator, name, operator, name, punctuation))
  any-of(keywords)
  r"(def|property)(\s+)" is(by-groups(keyword, text)) -> go-to(funcname)
  r"(cp?def)(\s+)" is(by-groups(keyword, text)) -> go-to(cdef)
  r"(class|struct)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
  r"(from)(\s+)" is(by-groups(keyword, text)) -> go-to(fromimport)
  r"(c?import)(\s+)" is(by-groups(keyword, text)) -> go-to(import)
  any-of(builtins)
  any-of(backtick)
  r"(?:[rR]|[uU][rR]|[rR][uU])\"\"\"" is(literal.string) -> go-to(tdqs)
  r"(?:[rR]|[uU][rR]|[rR][uU])'''" is(literal.string) -> go-to(tsqs)
  r"(?:[rR]|[uU][rR]|[rR][uU])\"" is(literal.string) -> go-to(dqs)
  r"(?:[rR]|[uU][rR]|[rR][uU])'" is(literal.string) -> go-to(sqs)
  r"[uU]?\"\"\"" is(literal.string) -> combined(stringescape, tdqs)
  r"[uU]?'''" is(literal.string) -> combined(stringescape, tsqs)
  r"[uU]?\"" is(literal.string) -> combined(stringescape, dqs)
  r"[uU]?'" is(literal.string) -> combined(stringescape, sqs)
  any-of(name)
  any-of(numbers)

lex(strings):
  r"%(\([a-zA-Z0-9]+\))?[-\#0 +]*([0-9]+|[*])?(\.([0-9]+|[*]))?[hlL]?[diouxXeEfFgGcrs%]" is(literal.string.interpol)
  r"[^\\\'\"%\n]+" is(literal.string)
  r"[\'\"\\]" is(literal.string)
  r"%" is(literal.string)

lex(fromimport):
  r"(\s+)(c?import)\b" is(by-groups(text, keyword)) -> pop
  r"[a-zA-Z_.][a-zA-Z0-9_.]*" is(name.namespace)
  r"" is(text) -> pop

const-set(.Lexer, lexer)
