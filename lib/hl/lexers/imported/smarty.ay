use("atomy")
use("hl/define")

Lexer = lexer:
name: "Smarty"
aliases: ["smarty"]
extensions: [".tpl"]
mimetypes: ["application/x-smarty"]
start: .root
flags: Regexp MULTILINE

lex(root):
  Regexp new("[^{]+") is(other)
  Regexp new("(\\{)(\\*.*?\\*)(\\})") is(by-groups(comment.preproc, comment, comment.preproc))
  Regexp new("(\\{php\\})(.*?)(\\{/php\\})") is(by-groups(comment.preproc, using(Php), comment.preproc))
  Regexp new("(\\{)(/?[a-zA-Z_][a-zA-Z0-9_]*)(\\s*)") is(by-groups(comment.preproc, name.function, text)) -> go-to(smarty)
  Regexp new("\\{") is(comment.preproc) -> go-to(smarty)

lex(smarty):
  Regexp new("\\s+") is(text)
  Regexp new("\\}") is(comment.preproc) -> pop
  Regexp new("#[a-zA-Z_][a-zA-Z0-9_]*#") is(name.variable)
  Regexp new("\\$[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]+)*") is(name.variable)
  Regexp new("[\126!%^&*()+=|\\[\\]:;,.<>/?{}@-]") is(operator)
  Regexp new("(true|false|null)\8") is(keyword.constant)
  Regexp new("[0-9](\\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?") is(literal.number)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string.double)
  Regexp new("'(\\\\\\\\|\\\\'|[^'])*'") is(literal.string.single)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.attribute)

