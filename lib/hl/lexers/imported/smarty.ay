use("atomy")
use("hl/define")

Lexer = lexer:
name: "Smarty"
aliases: ["smarty"]
extensions: [".tpl"]
mimetypes: ["application/x-smarty"]
start: .root
flags: Regexp MULTILINE

lex(root):
  r"[^{]+" is(other)
  r"(\{)(\*.*?\*)(\})" is(by-groups(comment.preproc, comment, comment.preproc))
  r"(\{php\})(.*?)(\{/php\})" is(by-groups(comment.preproc, using(Php), comment.preproc))
  r"(\{)(/?[a-zA-Z_][a-zA-Z0-9_]*)(\s*)" is(by-groups(comment.preproc, name.function, text)) -> go-to(smarty)
  r"\{" is(comment.preproc) -> go-to(smarty)

lex(smarty):
  r"\s+" is(text)
  r"\}" is(comment.preproc) -> pop
  r"\#[a-zA-Z_][a-zA-Z0-9_]*\#" is(name.variable)
  r"\$[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z0-9_]+)*" is(name.variable)
  r"[\126!%^&*()+=|\[\]:;,.<>/?{}@-]" is(operator)
  r"(true|false|null)\b" is(keyword.constant)
  r"[0-9](\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?" is(literal.number)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r"'(\\\\|\\'|[^'])*'" is(literal.string.single)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.attribute)

