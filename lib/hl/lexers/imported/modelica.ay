use("atomy")
use("hl/define")

Lexer = lexer:
name: "Modelica"
aliases: ["modelica"]
extensions: [".mo"]
mimetypes: ["text/x-modelica"]
start: .root
flags: Regexp IGNORECASE | Regexp MULTILINE

lex(functions):
  r"(abs|acos|acosh|asin|asinh|atan|atan2|atan3|ceil|cos|cosh|cross|div|exp|floor|log|log10|mod|rem|semiLinear|sign|sin|sinh|size|sqrt|tan|tanh|zeros)\b" is(name.function)

lex(classes):
  r"(block|class|connector|function|model|package|record|type)\b" is(name.class)

lex(statements):
  r"\"" is(literal.string) -> go-to(string)
  r"(\d+\.\d*|\.\d+|\d+|\d.)[eE][+-]?\d+[lL]?" is(literal.number.float)
  r"(\d+\.\d*|\.\d+)" is(literal.number.float)
  r"\d+[Ll]?" is(literal.number.integer)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"[()\[\]{},.;]" is(punctuation)
  r"(true|false|NULL|Real|Integer|Boolean)\b" is(name.builtin)
  r"([a-zA-Z_][\w]*|'[a-zA-Z_\+\-\*\/\^][\w]*')(\.([a-zA-Z_][\w]*|'[a-zA-Z_\+\-\*\/\^][\w]*'))+" is(name.class)
  r"('[\w\+\-\*\/\^]+'|\w+)" is(name)

lex(whitespace):
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(\n|(.|\n)*?[^\\]\n)" is(comment)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment)

lex(html-content):
  r"<\s*/\s*html\s*>" is(name.tag) -> pop
  r".+?(?=<\s*/\s*html\s*>)" is(using(Html))

lex(keywords):
  r"(algorithm|annotation|break|connect|constant|constrainedby|discrete|each|else|elseif|elsewhen|encapsulated|enumeration|end|equation|exit|expandable|extends|external|false|final|flow|for|if|import|in|inner|input|loop|nondiscrete|outer|output|parameter|partial|protected|public|redeclare|replaceable|stream|time|then|true|when|while|within)\b" is(keyword)

lex(operators):
  r"(and|assert|cardinality|change|delay|der|edge|homotopy|initial|noEvent|not|or|pre|reinit|return|sample|smooth|terminal|terminate)\b" is(name.builtin)

lex(root):
  any-of(whitespace)
  any-of(keywords)
  any-of(functions)
  any-of(operators)
  any-of(classes)
  r"(\"<html>|<html>)" is(name.tag) -> go-to(html-content)
  any-of(statements)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

