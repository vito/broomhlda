use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Bro"
  aliases: ["bro"]
  extensions: [".bro"]
  mimetypes: []
  start: .root
  flags: 0

  lex(regex):
    r"/" is(literal.string.regex) -> pop
    r"\\[\\nt/]" is(literal.string.regex)
    r"[^\\/\n]+" is(literal.string.regex)
    r"\\\n" is(literal.string.regex)
    r"\\" is(literal.string.regex)

  lex(root):
    r"^@.*?\n" is(comment.preproc)
    r"\#.*?\n" is(comment.single)
    r"\n" is(text)
    r"\s+" is(text)
    r"\\\n" is(text)
    r"(add|alarm|break|case|const|continue|delete|do|else|enum|event|export|for|function|if|global|local|module|next|of|print|redef|return|schedule|type|when|while)\b" is(keyword)
    r"(addr|any|bool|count|counter|double|file|int|interval|net|pattern|port|record|set|string|subnet|table|time|timer|vector)\b" is(keyword.type)
    r"(T|F)\b" is(keyword.constant)
    r"(&)((?:add|delete|expire)_func|attr|(?:create|read|write)_expire|default|disable_print_hook|raw_output|encrypt|group|log|mergeable|optional|persistent|priority|redef|rotate_(?:interval|size)|synchronized)\b" is(by-groups(punctuation, keyword))
    r"\s+module\b" is(keyword.namespace)
    r"\d+/(tcp|udp|icmp|unknown)\b" is(literal.number)
    r"(\d+\.){3}\d+" is(literal.number)
    r"([0-9a-fA-F_]+){7}[0-9a-fA-F_]+" is(literal.number)
    r"0x[0-9a-fA-F_]+([0-9a-fA-F_]+|:)*::([0-9a-fA-F_]+|:)*" is(literal.number)
    r"((\d+|:)([0-9a-fA-F_]+|:)*)?::([0-9a-fA-F_]+|:)*" is(literal.number)
    r"(\d+\.\d+\.|(\d+\.){2}\d+)" is(literal.number)
    r"[A-Za-z0-9][-A-Za-z0-9]*(\.[A-Za-z0-9][-A-Za-z0-9]*)+" is(literal.string)
    r"((\d*\.?\d+)|(\d+\.?\d*))([eE][-+]?\d+)?\s+(day|hr|min|sec|msec|usec)s?\b" is(literal.date)
    r"0[xX][0-9a-fA-F_]+" is(literal.number.hex)
    r"((\d*\.?\d+)|(\d+\.?\d*))([eE][-+]?\d+)?" is(literal.number.float)
    r"\d+" is(literal.number.integer)
    r"/" is(literal.string.regex) -> go-to(regex)
    r"\"" is(literal.string) -> go-to(string)
    r"[!%*/+:<=>?\126|-]" is(operator)
    r"([-+=&|]{2}|[+=!><-]=)" is(operator)
    r"(in|match)\b" is(operator.word)
    r"[{}()\[\]$.,;]" is(punctuation)
    r"([_a-zA-Z]\w*)(::)" is(by-groups(name, name.namespace))
    r"[a-zA-Z_][a-zA-Z_0-9]*" is(name)

  lex(string):
    r"\"" is(literal.string) -> pop
    r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
    r"[^\\\"\n]+" is(literal.string)
    r"\\\n" is(literal.string)
    r"\\" is(literal.string)

const-set(.Lexer, lexer)
