use("atomy")
use("hl/define")

Lexer = lexer:
name: "Mason"
aliases: ["mason"]
extensions: [".m", ".mhtml", ".mc", ".mi", "autohandler", "dhandler"]
mimetypes: ["application/x-mason"]
start: .root
flags: 0

lex(root):
  r"\s+" is(text)
  r"(<%doc>)(.*?)(</%doc>)"(m) is(by-groups(name.tag, comment.multiline, name.tag))
  r"(<%(?:def|method))(\s*)(.*?)(>)(.*?)(</%\2\s*>)"(m) is(by-groups(name.tag, text, name.function, name.tag, using(self class), name.tag))
  r"(<%\w+)(.*?)(>)(.*?)(</%\2\s*>)"(m) is(by-groups(name.tag, name.function, name.tag, using(Perl), name.tag))
  r"(<&[^|])(.*?)(,.*?)?(&>)"(m) is(by-groups(name.tag, name.function, using(Perl), name.tag))
  r"(<&\|)(.*?)(,.*?)?(&>)"(m) is(by-groups(name.tag, name.function, using(Perl), name.tag))
  r"</&>" is(name.tag)
  r"(<%!?)(.*?)(%>)"(m) is(by-groups(name.tag, using(Perl), name.tag))
  r"(?<=^)\#[^\n]*(\n|\Z)" is(comment)
  r"(?<=^)(%)([^\n]*)(\n|\Z)" is(by-groups(name.tag, using(Perl), other))
  r"(?sx)\10                 (.+?)               \# anything, followed by:\10                 (?:\10                  (?<=\n)(?=[%\#]) |  \# an eval or comment line\10                  (?=</?[%&]) |      \# a substitution or block or\10                                     \# call start or end\10                                     \# - don't consume\10                  (\\\n) |           \# an escaped newline\10                  \Z                 \# end of string\10                 )" is(by-groups(using(Html), operator))

