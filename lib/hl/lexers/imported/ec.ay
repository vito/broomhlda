use("atomy")
use("hl/define")

Lexer = lexer:
name: "eC"
aliases: ["ec"]
extensions: [".ec", ".eh"]
mimetypes: ["text/x-echdr", "text/x-ecsrc"]
start: .root
flags: 0

lex(classname):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop
  r"\s*(?=>)" is(text) -> pop

lex(function):
  any-of(whitespace)
  any-of(statements)
  r";" is(punctuation)
  r"{" is(punctuation) -> push
  r"}" is(punctuation) -> pop

lex(statements):
  r"L?\"" is(literal.string) -> go-to(string)
  r"L?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[LlUu]*" is(literal.number.float)
  r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+[LlUu]*" is(literal.number.hex)
  r"0[0-7]+[LlUu]*" is(literal.number.oct)
  r"\d+[LlUu]*" is(literal.number.integer)
  r"\*/" is(error)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"[()\[\],.]" is(punctuation)
  r"\b(case)(.+?)(:)" is(by-groups(keyword, using(self class), text))
  r"(auto|break|case|const|continue|default|do|else|enum|extern|for|goto|if|register|restricted|return|sizeof|static|struct|switch|typedef|union|volatile|virtual|while|class|private|public|property|import|delete|new|new0|renew|renew0|define|get|set|remote|dllexport|dllimport|stdcall|subclass|__on_register_module|namespace|using|typed_object|any_object|incref|register|watch|stopwatching|firewatchers|watchable|class_designer|class_fixed|class_no_expansion|isset|class_default_property|property_category|class_data|class_property|virtual|thisclass|dbtable|dbindex|database_open|dbfield)\b" is(keyword)
  r"(int|long|float|short|double|char|unsigned|signed|void)\b" is(keyword.type)
  r"(uint|uint16|uint32|uint64|bool|byte|unichar|int64)\b" is(keyword.type)
  r"(class)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
  r"(_{0,2}inline|naked|restrict|thread|typename)\b" is(keyword.reserved)
  r"__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|declspec|finally|int64|try|leave)\b" is(keyword.reserved)
  r"(true|false|null|value|this|NULL)\b" is(name.builtin)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(whitespace):
  r"^\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"^\#" is(comment.preproc) -> go-to(macro)
  r"^(?:\s|//.*?\n|/[*].*?[*]/)+\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"^(?:\s|//.*?\n|/[*].*?[*]/)+\#" is(comment.preproc) -> go-to(macro)
  r"^(\s*)([a-zA-Z_][a-zA-Z0-9_]*:(?!:))" is(by-groups(text, name.label))
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(\n|(.|\n)*?[^\\]\n)" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)

lex(statement):
  any-of(whitespace)
  any-of(statements)
  r"[{}]" is(punctuation)
  r";" is(punctuation) -> pop

lex(if0):
  r"^\s*\#if.*?(?<!\\)\n" is(comment.preproc) -> push
  r"^\s*\#el(?:se|if).*\n" is(comment.preproc) -> pop
  r"^\s*\#endif.*?(?<!\\)\n" is(comment.preproc) -> pop
  r".*?\n" is(comment)

lex(macro):
  r"[^/\n]+" is(comment.preproc)
  r"/[*](.|\n)*?[*]/" is(comment.multiline)
  r"//.*?\n" is(comment.single) -> pop
  r"/" is(comment.preproc)
  r"(?<=\\)\n" is(comment.preproc)
  r"\n" is(comment.preproc) -> pop

lex(root):
  any-of(whitespace)
  r"((?:[a-zA-Z0-9_*\s])+?(?:\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\s*\([^;]*?\))((?:\s|//.*?\n|/[*].*?[*]/)+)({)" is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation)) -> go-to(function)
  r"((?:[a-zA-Z0-9_*\s])+?(?:\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\s*\([^;]*?\))((?:\s|//.*?\n|/[*].*?[*]/)+)(;)" is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation))
  r"" is(text) -> go-to(statement)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

