use("atomy")
use("hl/define")

Lexer = lexer:
name: "verilog"
aliases: ["v"]
extensions: [".v"]
mimetypes: ["text/x-verilog"]
start: .root
flags: 0

lex(macro):
  r"[^/\n]+" is(comment.preproc)
  r"/[*](.|\n)*?[*]/" is(comment.multiline)
  r"//.*?\n" is(comment.single) -> pop
  r"/" is(comment.preproc)
  r"(?<=\\)\n" is(comment.preproc)
  r"\n" is(comment.preproc) -> pop

lex(root):
  r"^\s*`define" is(comment.preproc) -> go-to(macro)
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"/(\\\n)?/(\n|(.|\n)*?[^\\]\n)" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"[{}\#@]" is(punctuation)
  r"L?\"" is(literal.string) -> go-to(string)
  r"L?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[lL]?" is(literal.number.float)
  r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
  r"([0-9]+)|(\'h)[0-9a-fA-F]+" is(literal.number.hex)
  r"([0-9]+)|(\'b)[0-1]+" is(literal.number.hex)
  r"([0-9]+)|(\'d)[0-9]+" is(literal.number.integer)
  r"([0-9]+)|(\'o)[0-7]+" is(literal.number.oct)
  r"\'[01xz]" is(literal.number)
  r"\d+[Ll]?" is(literal.number.integer)
  r"\*/" is(error)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"[()\[\],.;\']" is(punctuation)
  r"`[a-zA-Z_][a-zA-Z0-9_]*" is(name.constant)
  r"^(\s*)(package)(\s+)" is(by-groups(text, keyword.namespace, text))
  r"^(\s*)(import)(\s+)" is(by-groups(text, keyword.namespace, text)) -> go-to(import)
  r"(always|always_comb|always_ff|always_latch|and|assign|automatic|begin|break|buf|bufif0|bufif1|case|casex|casez|cmos|const|continue|deassign|default|defparam|disable|do|edge|else|end|endcase|endfunction|endgenerate|endmodule|endpackage|endprimitive|endspecify|endtable|endtask|enum|event|final|for|force|forever|fork|function|generate|genvar|highz0|highz1|if|initial|inout|input|integer|join|large|localparam|macromodule|medium|module|nand|negedge|nmos|nor|not|notif0|notif1|or|output|packed|parameter|pmos|posedge|primitive|pull0|pull1|pulldown|pullup|rcmos|ref|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|signed|small|specify|specparam|strength|string|strong0|strong1|struct|table|task|tran|tranif0|tranif1|type|typedef|unsigned|var|vectored|void|wait|weak0|weak1|while|xnor|xor)\b" is(keyword)
  r"`(accelerate|autoexpand_vectornets|celldefine|default_nettype|else|elsif|endcelldefine|endif|endprotect|endprotected|expand_vectornets|ifdef|ifndef|include|noaccelerate|noexpand_vectornets|noremove_gatenames|noremove_netnames|nounconnected_drive|protect|protected|remove_gatenames|remove_netnames|resetall|timescale|unconnected_drive|undef)\b" is(comment.preproc)
  r"\$(bits|bitstoreal|bitstoshortreal|countdrivers|display|fclose|fdisplay|finish|floor|fmonitor|fopen|fstrobe|fwrite|getpattern|history|incsave|input|itor|key|list|log|monitor|monitoroff|monitoron|nokey|nolog|printtimescale|random|readmemb|readmemh|realtime|realtobits|reset|reset_count|reset_value|restart|rtoi|save|scale|scope|shortrealtobits|showscopes|showvariables|showvars|sreadmemb|sreadmemh|stime|stop|strobe|time|timeformat|write)\b" is(name.builtin)
  r"(byte|shortint|int|longint|integer|time|bit|logic|reg|supply0|supply1|tri|triand|trior|tri0|tri1|trireg|uwire|wire|wand|worshortreal|real|realtime)\b" is(keyword.type)
  r"[a-zA-Z_][a-zA-Z0-9_]*:(?!:)" is(name.label)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

lex(import):
  r"[a-zA-Z0-9_:]+\*?" is(name.namespace) -> pop

