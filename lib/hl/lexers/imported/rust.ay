use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Rust"
  aliases: ["rust"]
  extensions: [".rs", ".rc"]
  mimetypes: ["text/x-rustsrc"]
  start: .root
  flags: 0

  lex(attribute():
    any-of(attribute-common)
    r"\);?" is(comment.preproc) -> pop
    r"[^\"\)]+" is(comment.preproc)

  lex(attribute-common):
    r"\"" is(literal.string) -> go-to(string)
    r"\[" is(comment.preproc) -> go-to(attribute[)
    r"\(" is(comment.preproc) -> go-to(attribute()

  lex(string):
    r"\"" is(literal.string) -> pop
    r"\\['\"\\nrt]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}" is(literal.string.escape)
    r"[^\\\"]+" is(literal.string)
    r"\\" is(literal.string)

  lex(attribute[):
    any-of(attribute-common)
    r"\];?" is(comment.preproc) -> pop
    r"[^\"\]]+" is(comment.preproc)

  lex(root):
    r"\n" is(text)
    r"\s+" is(text)
    r"//(.*?)\n" is(comment.single)
    r"/[*](.|\n)*?[*]/" is(comment.multiline)
    r"(as|assert|break|const|copy|do|else|enum|extern|fail|false|fn|for|if|impl|let|log|loop|match|mod|move|mut|once|priv|pub|pure|ref|return|static|struct|trait|true|type|unsafe|use|while|u8|u16|u32|u64|i8|i16|i32|i64|uint|int|float|f32|f64|str)\b" is(keyword)
    r"'(\\['\"\\nrt]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}|.)'" is(literal.string.char)
    r"0[Bb][01_]+" is(literal.number) -> go-to(number-lit)
    r"0[0-7_]+" is(literal.number.oct) -> go-to(number-lit)
    r"0[xX][0-9a-fA-F_]+" is(literal.number.hex) -> go-to(number-lit)
    r"[0-9][0-9_]*(\.[0-9_]+[eE][+\-]?[0-9_]+|\.[0-9_]*|[eE][+\-]?[0-9_]+)?" is(literal.number) -> go-to(number-lit)
    r"\"" is(literal.string) -> go-to(string)
    r"[{}()\[\],.;]" is(punctuation)
    r"[+\-*/%&|<>^!\126@=:?]" is(operator)
    r"[a-zA-Z_$][a-zA-Z0-9_]*" is(name)
    r"\#\[" is(comment.preproc) -> go-to(attribute[)
    r"\#\(" is(comment.preproc) -> go-to(attribute()
    r"[A-Za-z_][A-Za-z0-9_]*!\[" is(comment.preproc) -> go-to(attribute[)
    r"[A-Za-z_][A-Za-z0-9_]*!\(" is(comment.preproc) -> go-to(attribute()

  lex(number-lit):
    r"(([ui](8|16|32|64)?)|(f(32|64)?))?" is(keyword) -> pop

const-set(.Lexer, lexer)
