use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Coq"
  aliases: ["coq"]
  extensions: [".v"]
  mimetypes: ["text/x-coq"]
  start: .root
  flags: 0

  lex(comment):
    r"[^(*)]+" is(comment)
    r"\(\*" is(comment) -> push
    r"\*\)" is(comment) -> pop
    r"[(*)]" is(comment)

  lex(root):
    r"\s+" is(text)
    r"false|true|\(\)|\[\]" is(name.builtin.pseudo)
    r"\(\*" is(comment) -> go-to(comment)
    r"\b(Section|Module|End|Require|Import|Export|Variable|Variables|Parameter|Parameters|Axiom|Hypothesis|Hypotheses|Notation|Local|Tactic|Reserved|Scope|Open|Close|Bind|Delimit|Definition|Let|Ltac|Fixpoint|CoFixpoint|Morphism|Relation|Implicit|Arguments|Set|Unset|Contextual|Strict|Prenex|Implicits|Inductive|CoInductive|Record|Structure|Canonical|Coercion|Theorem|Lemma|Corollary|Proposition|Fact|Remark|Example|Proof|Goal|Save|Qed|Defined|Hint|Resolve|Rewrite|View|Search|Show|Print|Printing|All|Graph|Projections|inside|outside)\b" is(keyword.namespace)
    r"\b(forall|exists|exists2|fun|fix|cofix|struct|match|end|in|return|let|if|is|then|else|for|of|nosimpl|with|as)\b" is(keyword)
    r"\b(Type|Prop)\b" is(keyword.type)
    r"\b(pose|set|move|case|elim|apply|clear|hnf|intro|intros|generalize|rename|pattern|after|destruct|induction|using|refine|inversion|injection|rewrite|congr|unlock|compute|ring|field|replace|fold|unfold|change|cutrewrite|simpl|have|suff|wlog|suffices|without|loss|nat_norm|assert|cut|trivial|revert|bool_congr|nat_congr|symmetry|transitivity|auto|split|left|right|autorewrite)\b" is(keyword)
    r"\b(by|done|exact|reflexivity|tauto|romega|omega|assumption|solve|contradiction|discriminate)\b" is(keyword.pseudo)
    r"\b(do|last|first|try|idtac|repeat)\b" is(keyword.reserved)
    r"\b([A-Z][A-Za-z0-9_\']*)(?=\s*\.)" is(name.namespace) -> go-to(dotted)
    r"\b([A-Z][A-Za-z0-9_\']*)" is(name.class)
    r"(\955|\928|\\/|/\\|=>|\126|}|\|]|\||{<|{|`|_|]|\[\||\[>|\[<|\[|\?\?|\?|>}|>]|>|=|<-|<|;;|;|:>|:=|::|:|\.\.|\.|->|-\.|-|,|\+|\*|\)|\(|&&|&|\#|!=)" is(operator)
    r"([=<>@^|&+\*/$%-]|[!?\126])?[!$%&*+\./:<=>?@^|\126-]" is(operator)
    r"\b(and|asr|land|lor|lsl|lxor|mod|or)\b" is(operator.word)
    r"\b(unit|int|float|bool|string|char|list|array)\b" is(keyword.type)
    r"[^\W\d][\w']*" is(name)
    r"\d[\d_]*" is(literal.number.integer)
    r"0[xX][\da-fA-F][\da-fA-F_]*" is(literal.number.hex)
    r"0[oO][0-7][0-7_]*" is(literal.number.oct)
    r"0[bB][01][01_]*" is(literal.number.binary)
    r"-?\d[\d_]*(.[\d_]*)?([eE][+\-]?\d[\d_]*)" is(literal.number.float)
    r"'(?:(\\[\\\\"'ntbr ])|(\\[0-9]{3})|(\\x[0-9a-fA-F]{2}))'" is(literal.string.char)
    r"'.'" is(literal.string.char)
    r"'" is(keyword)
    r"\"" is(literal.string.double) -> go-to(string)
    r"[\126?][a-z][\w\']*:" is(name.variable)

  lex(string):
    r"[^\"]+" is(literal.string.double)
    r"\"\"" is(literal.string.double)
    r"\"" is(literal.string.double) -> pop

  lex(dotted):
    r"\s+" is(text)
    r"\." is(punctuation)
    r"[A-Z][A-Za-z0-9_\']*(?=\s*\.)" is(name.namespace)
    r"[A-Z][A-Za-z0-9_\']*" is(name.class) -> pop
    r"[a-z][a-z0-9_\']*" is(name) -> pop
    r"" is(text) -> pop

const-set(.Lexer, lexer)
