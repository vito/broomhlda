use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "ActionScript 3"
aliases: ["as3", "actionscript3"]
extensions: [".as"]
mimetypes: ["application/x-actionscript", "text/x-actionscript", "text/actionscript"]
start: .root
flags: Regexp MULTILINE

lex(defval):
  r"(=)(\s*)([^(),]+)(\s*)(,?)" is(by-groups(operator, text, using(self class), text, operator)) -> pop
  r",?" is(operator) -> pop

lex(type):
  r"(\s*)(:)(\s*)([$a-zA-Z_][a-zA-Z0-9_]*(?:\.<\w+>)?|\*)" is(by-groups(text, operator, text, keyword.type)) -> pop(2)
  r"\s*" is(text) -> pop(2)

lex(root):
  r"\s+" is(text)
  r"(function\s+)([$a-zA-Z_][a-zA-Z0-9_]*)(\s*)(\()" is(by-groups(keyword.declaration, name.function, text, operator)) -> go-to(funcparams)
  r"(var|const)(\s+)([$a-zA-Z_][a-zA-Z0-9_]*)(\s*)(:)(\s*)([$a-zA-Z_][a-zA-Z0-9_]*(?:\.<\w+>)?)" is(by-groups(keyword.declaration, text, name, text, punctuation, text, keyword.type))
  r"(import|package)(\s+)((?:[$a-zA-Z_][a-zA-Z0-9_]*|\.)+)(\s*)" is(by-groups(keyword, text, name.namespace, text))
  r"(new)(\s+)([$a-zA-Z_][a-zA-Z0-9_]*(?:\.<\w+>)?)(\s*)(\()" is(by-groups(keyword, text, keyword.type, text, operator))
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)
  r"/(\\\\|\\/|[^\n])*/[gisx]*" is(literal.string.regex)
  r"(\.)([$a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"(case|default|for|each|in|while|do|break|return|continue|if|else|throw|try|catch|with|new|typeof|arguments|instanceof|this|switch|import|include|as|is)\b" is(keyword)
  r"(class|public|final|internal|native|override|private|protected|static|import|extends|implements|interface|intrinsic|return|super|dynamic|function|const|get|namespace|package|set)\b" is(keyword.declaration)
  r"(true|false|null|NaN|Infinity|-Infinity|undefined|void)\b" is(keyword.constant)
  r"(decodeURI|decodeURIComponent|encodeURI|escape|eval|isFinite|isNaN|isXMLName|clearInterval|fscommand|getTimer|getURL|getVersion|isFinite|parseFloat|parseInt|setInterval|trace|updateAfterEvent|unescape)\b" is(name.function)
  r"[$a-zA-Z_][a-zA-Z0-9_]*" is(name)
  r"[0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?" is(literal.number.float)
  r"0x[0-9a-f]+" is(literal.number.hex)
  r"[0-9]+" is(literal.number.integer)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r"'(\\\\|\\'|[^'])*'" is(literal.string.single)
  r"[\126\^\*!%&<>\|+=:;,/?\\{}\[\]().-]+" is(operator)

lex(funcparams):
  r"\s+" is(text)
  r"(\s*)(\.\.\.)?([$a-zA-Z_][a-zA-Z0-9_]*)(\s*)(:)(\s*)([$a-zA-Z_][a-zA-Z0-9_]*(?:\.<\w+>)?|\*)(\s*)" is(by-groups(text, punctuation, name, text, operator, text, keyword.type, text)) -> go-to(defval)
  r"\)" is(operator) -> go-to(type)

const-set(.Lexer, lexer)
