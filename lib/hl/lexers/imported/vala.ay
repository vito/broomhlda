use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "Vala"
aliases: ["vala", "vapi"]
extensions: [".vala", ".vapi"]
mimetypes: ["text/x-vala"]
start: .root
flags: 0

lex(statements):
  r"L?\"" is(literal.string) -> go-to(string)
  r"L?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[lL]?" is(literal.number.float)
  r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+[Ll]?" is(literal.number.hex)
  r"0[0-7]+[Ll]?" is(literal.number.oct)
  r"\d+[Ll]?" is(literal.number.integer)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"(\[)(Compact|Immutable|(?:Boolean|Simple)Type)(\])" is(by-groups(punctuation, name.decorator, punctuation))
  r"(\[)(CCode|(?:Integer|Floating)Type)" is(by-groups(punctuation, name.decorator))
  r"[()\[\],.]" is(punctuation)
  r"(as|base|break|case|catch|construct|continue|default|delete|do|else|enum|finally|for|foreach|get|if|in|is|lock|new|out|params|return|set|sizeof|switch|this|throw|try|typeof|while|yield)\b" is(keyword)
  r"(abstract|const|delegate|dynamic|ensures|extern|inline|internal|override|owned|private|protected|public|ref|requires|signal|static|throws|unowned|var|virtual|volatile|weak|yields)\b" is(keyword.declaration)
  r"(namespace|using)(\s+)" is(by-groups(keyword.namespace, text)) -> go-to(namespace)
  r"(class|errordomain|interface|struct)(\s+)" is(by-groups(keyword.declaration, text)) -> go-to(class)
  r"(\.)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"(void|bool|char|double|float|int|int8|int16|int32|int64|long|short|size_t|ssize_t|string|time_t|uchar|uint|uint8|uint16|uint32|uint64|ulong|unichar|ushort)\b" is(keyword.type)
  r"(true|false|null)\b" is(name.builtin)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(whitespace):
  r"^\s*\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(\n|(.|\n)*?[^\\]\n)" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)

lex(statement):
  any-of(whitespace)
  any-of(statements)
  r"[{}]" is(punctuation)
  r";" is(punctuation) -> pop

lex(if0):
  r"^\s*\#if.*?(?<!\\)\n" is(comment.preproc) -> push
  r"^\s*\#el(?:se|if).*\n" is(comment.preproc) -> pop
  r"^\s*\#endif.*?(?<!\\)\n" is(comment.preproc) -> pop
  r".*?\n" is(comment)

lex(namespace):
  r"[a-zA-Z_][a-zA-Z0-9_.]*" is(name.namespace) -> pop

lex(root):
  any-of(whitespace)
  r"" is(text) -> go-to(statement)

lex(class):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

const-set(.Lexer, lexer)
