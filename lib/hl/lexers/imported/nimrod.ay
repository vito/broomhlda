use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Nimrod"
  aliases: ["nimrod", "nim"]
  extensions: [".nim", ".nimrod"]
  mimetypes: ["text/x-nimrod"]
  start: .root
  flags: Regexp IGNORECASE

  lex(rdqs):
    r"\"(?!\")" is(literal.string) -> pop
    r"\"\"" is(literal.string.escape)
    any-of(strings)

  lex(float-suffix):
    r"\'[fF](32|64)" is(literal.number.float)
    r"" is(text) -> pop

  lex(chars):
    r"\\([\\abcefnrtvl\"\']|x[a-fA-F0-9]{2}|[0-9]{1,3})" is(literal.string.escape)
    r"'" is(literal.string.char) -> pop
    r"." is(literal.string.char)

  lex(float-number):
    r"\.(?!\.)[0-9_]*" is(literal.number.float)
    r"[eE][+-]?[0-9][0-9_]*" is(literal.number.float)
    r"" is(text) -> pop

  lex(int-suffix):
    r"\'[iI](32|64)" is(literal.number.integer.long)
    r"\'[iI](8|16)" is(literal.number.integer)
    r"" is(text) -> pop

  lex(nl):
    r"\n" is(literal.string)

  lex(dqs):
    r"\\([\\abcefnrtvl\"\']|\n|x[a-fA-F0-9]{2}|[0-9]{1,3})" is(literal.string.escape)
    r"\"" is(literal.string) -> pop
    any-of(strings)

  lex(root):
    r"\#\#.*$" is(literal.string.doc)
    r"\#.*$" is(comment)
    r"\*|=|>|<|\+|-|/|@|\$|\126|&|%|\!|\?|\||\\|\[|\]" is(operator)
    r"\.\.|\.|,|\[\.|\.\]|{\.|\.}|\(\.|\.\)|{|}|\(|\)|:|\^|`|;" is(punctuation)
    r"(?:[\w]+)\"" is(literal.string) -> go-to(rdqs)
    r"\"\"\"" is(literal.string) -> go-to(tdqs)
    r"\"" is(literal.string) -> go-to(dqs)
    r"'" is(literal.string.char) -> go-to(chars)
    r"(a_?n_?d_?|o_?r_?|n_?o_?t_?|x_?o_?r_?|s_?h_?l_?|s_?h_?r_?|d_?i_?v_?|m_?o_?d_?|i_?n_?|n_?o_?t_?i_?n_?|i_?s_?|i_?s_?n_?o_?t_?)\b" is(operator.word)
    r"(p_?r_?o_?c_?\s)(?![\(\[\]])" is(keyword) -> go-to(funcname)
    r"(a_?d_?d_?r_?|a_?n_?d_?|a_?s_?|a_?s_?m_?|a_?t_?o_?m_?i_?c_?|b_?i_?n_?d_?|b_?l_?o_?c_?k_?|b_?r_?e_?a_?k_?|c_?a_?s_?e_?|c_?a_?s_?t_?|c_?o_?n_?s_?t_?|c_?o_?n_?t_?i_?n_?u_?e_?|c_?o_?n_?v_?e_?r_?t_?e_?r_?|d_?i_?s_?c_?a_?r_?d_?|d_?i_?s_?t_?i_?n_?c_?t_?|d_?i_?v_?|e_?l_?i_?f_?|e_?l_?s_?e_?|e_?n_?d_?|e_?n_?u_?m_?|e_?x_?c_?e_?p_?t_?|f_?i_?n_?a_?l_?l_?y_?|f_?o_?r_?|g_?e_?n_?e_?r_?i_?c_?|i_?f_?|i_?m_?p_?l_?i_?e_?s_?|i_?n_?|y_?i_?e_?l_?d_?|i_?s_?|i_?s_?n_?o_?t_?|i_?t_?e_?r_?a_?t_?o_?r_?|l_?a_?m_?b_?d_?a_?|l_?e_?t_?|m_?a_?c_?r_?o_?|m_?e_?t_?h_?o_?d_?|m_?o_?d_?|n_?o_?t_?|n_?o_?t_?i_?n_?|o_?b_?j_?e_?c_?t_?|o_?f_?|o_?r_?|o_?u_?t_?|p_?r_?o_?c_?|p_?t_?r_?|r_?a_?i_?s_?e_?|r_?e_?f_?|r_?e_?t_?u_?r_?n_?|s_?h_?l_?|s_?h_?r_?|t_?e_?m_?p_?l_?a_?t_?e_?|t_?r_?y_?|t_?u_?p_?l_?e_?|t_?y_?p_?e_?|w_?h_?e_?n_?|w_?h_?i_?l_?e_?|w_?i_?t_?h_?|w_?i_?t_?h_?o_?u_?t_?|x_?o_?r_?)\b" is(keyword)
    r"(f_?r_?o_?m_?|i_?m_?p_?o_?r_?t_?|i_?n_?c_?l_?u_?d_?e_?)\b" is(keyword.namespace)
    r"(v_?a_?r)\b" is(keyword.declaration)
    r"(i_?n_?t_?|i_?n_?t_?8_?|i_?n_?t_?1_?6_?|i_?n_?t_?3_?2_?|i_?n_?t_?6_?4_?|f_?l_?o_?a_?t_?|f_?l_?o_?a_?t_?3_?2_?|f_?l_?o_?a_?t_?6_?4_?|b_?o_?o_?l_?|c_?h_?a_?r_?|r_?a_?n_?g_?e_?|a_?r_?r_?a_?y_?|s_?e_?q_?|s_?e_?t_?|s_?t_?r_?i_?n_?g_?)\b" is(keyword.type)
    r"(n_?i_?l_?|t_?r_?u_?e_?|f_?a_?l_?s_?e_?)\b" is(keyword.pseudo)
    r"\b((?![_\d])\w)(((?!_)\w)|(_(?!_)\w))*" is(name)
    r"[0-9][0-9_]*(?=([eE.]|\'[fF](32|64)))" is(literal.number.float) -> do-all(go-to(float-suffix), go-to(float-number))
    r"0[xX][a-fA-F0-9][a-fA-F0-9_]*" is(literal.number.hex) -> go-to(int-suffix)
    r"0[bB][01][01_]*" is(literal.number) -> go-to(int-suffix)
    r"0o[0-7][0-7_]*" is(literal.number.oct) -> go-to(int-suffix)
    r"[0-9][0-9_]*" is(literal.number.integer) -> go-to(int-suffix)
    r"\s+" is(text)
    r".+$" is(error)

  lex(funcname):
    r"((?![\d_])\w)(((?!_)\w)|(_(?!_)\w))*" is(name.function) -> pop
    r"`.+`" is(name.function) -> pop

  lex(tdqs):
    r"\"\"\"(?!\")" is(literal.string) -> pop
    any-of(strings)
    any-of(nl)

  lex(strings):
    r"(?<!\$)\$(\d+|\#|\w+)+" is(literal.string.interpol)
    r"[^\\\'\"\$\n]+" is(literal.string)
    r"[\'\"\\]" is(literal.string)
    r"\$" is(literal.string)

const-set(.Lexer, lexer)
