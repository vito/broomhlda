use("atomy")
use("hl/define")

Lexer = lexer:
name: "Protocol Buffer"
aliases: ["protobuf"]
extensions: [".proto"]
mimetypes: []
start: .root
flags: 0

lex(type):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name) -> pop

lex(message):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.class) -> pop

lex(root):
  Regexp new("[ \\t]+") is(text)
  Regexp new("[,;{}\\[\\]\\(\\)]") is(punctuation)
  Regexp new("/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("\\b(import|option|optional|required|repeated|default|packed|ctype|extensions|to|max|rpc|returns)\\b") is(keyword)
  Regexp new("(int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|float|double|bool|string|bytes)\\b") is(keyword.type)
  Regexp new("(true|false)\\b") is(keyword.constant)
  Regexp new("(package)(\\s+)") is(by-groups(keyword.namespace, text)) -> go-to(package)
  Regexp new("(message|extend)(\\s+)") is(by-groups(keyword.declaration, text)) -> go-to(message)
  Regexp new("(enum|group|service)(\\s+)") is(by-groups(keyword.declaration, text)) -> go-to(type)
  Regexp new("\\\".*\\\"") is(literal.string)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("(\\-?(inf|nan))") is(literal.number.float)
  Regexp new("0x[0-9a-fA-F]+[LlUu]*") is(literal.number.hex)
  Regexp new("0[0-7]+[LlUu]*") is(literal.number.oct)
  Regexp new("\\d+[LlUu]*") is(literal.number.integer)
  Regexp new("[+-=]") is(operator)
  Regexp new("([a-zA-Z_][a-zA-Z0-9_\\.]*)([ \\t]*)(=)") is(by-groups(name.attribute, text, operator))
  Regexp new("[a-zA-Z_][a-zA-Z0-9_\\.]*") is(name)

lex(package):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.namespace) -> pop

