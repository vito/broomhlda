use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Asymptote"
  aliases: ["asy", "asymptote"]
  extensions: [".asy"]
  mimetypes: ["text/x-asymptote"]
  start: .root
  flags: 0

  lex(function):
    any-of(whitespace)
    any-of(statements)
    r";" is(punctuation)
    r"{" is(punctuation) -> push
    r"}" is(punctuation) -> pop

  lex(statements):
    r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
    r"'" is(literal.string) -> go-to(string)
    r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[lL]?" is(literal.number.float)
    r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
    r"0x[0-9a-fA-F]+[Ll]?" is(literal.number.hex)
    r"0[0-7]+[Ll]?" is(literal.number.oct)
    r"\d+[Ll]?" is(literal.number.integer)
    r"[\126!%^&*+=|?:<>/-]" is(operator)
    r"[()\[\],.]" is(punctuation)
    r"\b(case)(.+?)(:)" is(by-groups(keyword, using(self class), text))
    r"(and|controls|tension|atleast|curl|if|else|while|for|do|return|break|continue|struct|typedef|new|access|import|unravel|from|include|quote|static|public|private|restricted|this|explicit|true|false|null|cycle|newframe|operator)\b" is(keyword)
    r"(Braid|FitResult|Label|Legend|TreeNode|abscissa|arc|arrowhead|binarytree|binarytreeNode|block|bool|bool3|bounds|bqe|circle|conic|coord|coordsys|cputime|ellipse|file|filltype|frame|grid3|guide|horner|hsv|hyperbola|indexedTransform|int|inversion|key|light|line|linefit|marginT|marker|mass|object|pair|parabola|path|path3|pen|picture|point|position|projection|real|revolution|scaleT|scientific|segment|side|slice|splitface|string|surface|tensionSpecifier|ticklocate|ticksgridT|tickvalues|transform|transformation|tree|triangle|trilinear|triple|vector|vertex|void)(?=([ ]{1,}[a-zA-Z]))" is(keyword.type)
    r"(Braid|FitResult|TreeNode|abscissa|arrowhead|block|bool|bool3|bounds|coord|frame|guide|horner|int|linefit|marginT|pair|pen|picture|position|real|revolution|slice|splitface|ticksgridT|tickvalues|tree|triple|vertex|void)\b" is(keyword.type)
    r"[a-zA-Z_][a-zA-Z0-9_]*:(?!:)" is(name.label)
    r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

  lex(whitespace):
    r"\n" is(text)
    r"\s+" is(text)
    r"\\\n" is(text)
    r"//(\n|(.|\n)*?[^\\]\n)" is(comment)
    r"/(\\\n)?\*(.|\n)*?\*(\\\n)?/" is(comment)

  lex(statement):
    any-of(whitespace)
    any-of(statements)
    r"[{}]" is(punctuation)
    r";" is(punctuation) -> pop

  lex(root):
    any-of(whitespace)
    r"((?:[a-zA-Z0-9_*\s])+?(?:\s|\*))([a-zA-Z_][a-zA-Z0-9_]*)(\s*\([^;]*?\))((?:\s|//.*?\n|/\*.*?\*/)+)({)" is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation)) -> go-to(function)
    r"((?:[a-zA-Z0-9_*\s])+?(?:\s|\*))([a-zA-Z_][a-zA-Z0-9_]*)(\s*\([^;]*?\))((?:\s|//.*?\n|/\*.*?\*/)+)(;)" is(by-groups(using(self class), name.function, using(self class), using(self class), punctuation))
    r"" is(text) -> go-to(statement)

  lex(string):
    r"'" is(literal.string) -> pop
    r"\\([\\abfnrtv\"\'?]|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
    r"\n" is(literal.string)
    r"[^\\'\n]+" is(literal.string)
    r"\\\n" is(literal.string)
    r"\\n" is(literal.string)
    r"\\" is(literal.string)

const-set(.Lexer, lexer)
