use("atomy")
use("hl/define")

Lexer = lexer:
name: "Go"
aliases: ["go"]
extensions: [".go"]
mimetypes: ["text/x-gosrc"]
start: .root
flags: 0

lex(root):
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(.*?)\n" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"(import|package)\b" is(keyword.namespace)
  r"(var|func|struct|map|chan|type|interface|const)\b" is(keyword.declaration)
  r"(break|default|select|case|defer|go|else|goto|switch|fallthrough|if|range|continue|for|return)\b" is(keyword)
  r"(true|false|iota|nil)\b" is(keyword.constant)
  r"(uint|uint8|uint16|uint32|uint64|int|int8|int16|int32|int64|float|float32|float64|complex64|complex128|byte|rune|string|bool|error|uintptr|print|println|panic|recover|close|complex|real|imag|len|cap|append|copy|delete|new|make)\b(\()" is(by-groups(name.builtin, punctuation))
  r"(uint|uint8|uint16|uint32|uint64|int|int8|int16|int32|int64|float|float32|float64|complex64|complex128|byte|rune|string|bool|error|uintptr)\b" is(keyword.type)
  r"\d+i" is(literal.number)
  r"\d+\.\d*([Ee][-+]\d+)?i" is(literal.number)
  r"\.\d+([Ee][-+]\d+)?i" is(literal.number)
  r"\d+[Ee][-+]\d+i" is(literal.number)
  r"\d+(\.\d+[eE][+\-]?\d+|\.\d*|[eE][+\-]?\d+)" is(literal.number.float)
  r"\.\d+([eE][+\-]?\d+)?" is(literal.number.float)
  r"0[0-7]+" is(literal.number.oct)
  r"0[xX][0-9a-fA-F]+" is(literal.number.hex)
  r"(0|[1-9][0-9]*)" is(literal.number.integer)
  r"'(\\['\"\\abfnrtv]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}|[^\\])'" is(literal.string.char)
  r"`[^`]*`" is(literal.string)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"(<<=|>>=|<<|>>|<=|>=|&\^=|&\^|\+=|-=|\*=|/=|%=|&=|\|=|&&|\|\||<-|\+\+|--|==|!=|:=|\.\.\.|[+\-*/%&])" is(operator)
  r"[|^<>=!()\[\]{}.,;:]" is(punctuation)
  r"[a-zA-Z_]\w*" is(name.other)

