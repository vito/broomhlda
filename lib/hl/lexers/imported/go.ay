use("atomy")
use("hl/define")

Lexer = lexer:
name: "Go"
aliases: ["go"]
extensions: [".go"]
mimetypes: ["text/x-gosrc"]
start: .root
flags: 0

lex(root):
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(.*?)\n" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"(break|default|func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|fallthrough|if|range|type|continue|for|import|return|var)\b" is(keyword)
  r"(uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|float64|byte|uint|int|float|uintptr|string|close|closed|len|cap|new|make)\b" is(name.builtin)
  r"\d+(\.\d+[eE][+\-]?\d+|\.\d*|[eE][+\-]?\d+)" is(literal.number.float)
  r"\.\d+([eE][+\-]?\d+)?" is(literal.number.float)
  r"0[0-7]+" is(literal.number.oct)
  r"0[xX][0-9a-fA-F]+" is(literal.number.hex)
  r"(0|[1-9][0-9]*)" is(literal.number.integer)
  r"'(\\['\"\\abfnrtv]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}|[^\\])'" is(literal.string.char)
  r"`[^`]*`" is(literal.string)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"(<<=|>>=|<<|>>|<=|>=|&\^=|&\^|\+=|-=|\*=|/=|%=|&=|\|=|&&|\|\||<-|\+\+|--|==|!=|:=|\.\.\.)|[+\-*/%&|^<>=!()\[\]{}.,;:]" is(punctuation)
  r"[a-zA-Z_]\w*" is(name)

