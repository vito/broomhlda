use("atomy")
use("hl/define")

Lexer = lexer:
name: "Io"
aliases: ["io"]
extensions: [".io"]
mimetypes: ["text/x-iosrc"]
start: .root
flags: 0

lex(nestedcomment):
  r"[^+/]+" is(comment.multiline)
  r"/\+" is(comment.multiline) -> push
  r"\+/" is(comment.multiline) -> pop
  r"[+/]" is(comment.multiline)

lex(root):
  r"\n" is(text)
  r"\s+" is(text)
  r"//(.*?)\n" is(comment.single)
  r"\#(.*?)\n" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"/\+" is(comment.multiline) -> go-to(nestedcomment)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"::=|:=|=|\(|\)|;|,|\*|-|\+|>|<|@|!|/|\||\^|\.|%|&|\[|\]|\{|\}" is(operator)
  r"(clone|do|doFile|doString|method|for|if|else|elseif|then)\b" is(keyword)
  r"(nil|false|true)\b" is(name.constant)
  r"(Object|list|List|Map|args|Sequence|Coroutine|File)\b" is(name.builtin)
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)
  r"(\d+\.?\d*|\d*\.\d+)([eE][+-]?[0-9]+)?" is(literal.number.float)
  r"\d+" is(literal.number.integer)

