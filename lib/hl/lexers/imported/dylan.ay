use("atomy")
use("hl/define")

Lexer = lexer:
name: "Dylan"
aliases: ["dylan"]
extensions: [".dylan", ".dyl"]
mimetypes: ["text/x-dylan"]
start: .root
flags: Regexp MULTILINE

lex(root):
  Regexp new("\\b(subclass|abstract|block|c(on(crete|stant)|lass)|domain|ex(c(eption|lude)|port)|f(unction(|al))|generic|handler|i(n(herited|line|stance|terface)|mport)|library|m(acro|ethod)|open|primary|sealed|si(deways|ngleton)|slot|v(ariable|irtual))\\b") is(name.builtin)
  Regexp new("<\\w+>") is(keyword.type)
  Regexp new("//.*?\\n") is(comment.single)
  Regexp new("/\\*[\\w\\W]*?\\*/") is(comment.multiline)
  Regexp new("\"") is(literal.string) -> go-to(string)
  Regexp new("'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'") is(literal.string.char)
  Regexp new("=>|\\b(a(bove|fterwards)|b(e(gin|low)|y)|c(ase|leanup|reate)|define|else(|if)|end|f(inally|or|rom)|i[fn]|l(et|ocal)|otherwise|rename|s(elect|ignal)|t(hen|o)|u(n(less|til)|se)|wh(en|ile))\\b") is(keyword)
  Regexp new("([ \\t])([!\\$%&\\*\\/:<=>\\?\126_^a-zA-Z0-9.+\\-]*:)") is(by-groups(text, name.variable))
  Regexp new("([ \\t]*)(\\S+[^:])([ \\t]*)(\\()([ \\t]*)") is(by-groups(text, name.function, text, punctuation, text))
  Regexp new("-?[0-9.]+") is(literal.number)
  Regexp new("[(),;]") is(punctuation)
  Regexp new("\\$[a-zA-Z0-9-]+") is(name.constant)
  Regexp new("[!$%&*/:<>=?\126^.+\\[\\]{}-]+") is(operator)
  Regexp new("\\s+") is(text)
  Regexp new("#[a-zA-Z0-9-]+") is(keyword)
  Regexp new("[a-zA-Z0-9-]+") is(name.variable)

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

