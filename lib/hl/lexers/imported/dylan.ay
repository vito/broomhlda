use("atomy")
use("hl/define")

Lexer = lexer:
name: "Dylan"
aliases: ["dylan"]
extensions: [".dylan", ".dyl"]
mimetypes: ["text/x-dylan"]
start: .root
flags: Regexp MULTILINE

lex(root):
  r"\b(subclass|abstract|block|c(on(crete|stant)|lass)|domain|ex(c(eption|lude)|port)|f(unction(al)?)|generic|handler|i(n(herited|line|stance|terface)|mport)|library|m(acro|ethod)|open|primary|sealed|si(deways|ngleton)|slot|v(ariable|irtual))\b" is(name.builtin)
  r"<\w+>" is(keyword.type)
  r"//.*?\n" is(comment.single)
  r"/\*[\w\W]*?\*/" is(comment.multiline)
  r"\"" is(literal.string) -> go-to(string)
  r"'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"=>|\b(a(bove|fterwards)|b(e(gin|low)|y)|c(ase|leanup|reate)|define|else(if)?|end|f(inally|or|rom)|i[fn]|l(et|ocal)|otherwise|rename|s(elect|ignal)|t(hen|o)|u(n(less|til)|se)|wh(en|ile))\b" is(keyword)
  r"([ \t])([!\$%&\*\/:<=>\?\126_^a-zA-Z0-9.+\-]*:)" is(by-groups(text, name.variable))
  r"([ \t]*)(\S+[^:])([ \t]*)(\()([ \t]*)" is(by-groups(text, name.function, text, punctuation, text))
  r"-?[0-9.]+" is(literal.number)
  r"[(),;]" is(punctuation)
  r"\$[a-zA-Z0-9-]+" is(name.constant)
  r"[!$%&*/:<>=?\126^.+\[\]{}-]+" is(operator)
  r"\s+" is(text)
  r"\#\"[a-zA-Z0-9-]+\"" is(keyword)
  r"\#[a-zA-Z0-9-]+" is(keyword)
  r"\#(\(|\[)" is(punctuation)
  r"[a-zA-Z0-9-_]+" is(name.variable)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

