use("atomy")
use("hl/define")

Lexer = lexer:
name: "D"
aliases: ["d"]
extensions: [".d", ".di"]
mimetypes: ["text/x-dsrc"]
start: .root
flags: 0

lex(delimited-parenthesis):
  r"[^\(\)]+" is(literal.string)
  r"\(" is(literal.string) -> go-to(delimited-inside-parenthesis)
  r"\)\"" is(literal.string) -> pop

lex(delimited-curly):
  r"[^{}]+" is(literal.string)
  r"{" is(literal.string) -> go-to(delimited-inside-curly)
  r"}\"" is(literal.string) -> pop

lex(delimited-angle):
  r"[^<>]+" is(literal.string)
  r"<" is(literal.string) -> go-to(delimited-inside-angle)
  r">\"" is(literal.string) -> pop

lex(delimited-inside-parenthesis):
  r"[^\(\)]+" is(literal.string)
  r"\(" is(literal.string) -> push
  r"\)" is(literal.string) -> pop

lex(delimited-inside-curly):
  r"[^{}]+" is(literal.string)
  r"{" is(literal.string) -> push
  r"}" is(literal.string) -> pop

lex(delimited-inside-bracket):
  r"[^\[\]]+" is(literal.string)
  r"\[" is(literal.string) -> push
  r"\]" is(literal.string) -> pop

lex(token-string-nest):
  r"{" is(punctuation) -> push
  r"}" is(punctuation) -> pop
  any-of(root)

lex(delimited-bracket):
  r"[^\[\]]+" is(literal.string)
  r"\[" is(literal.string) -> go-to(delimited-inside-bracket)
  r"\]\"" is(literal.string) -> pop

lex(token-string):
  r"{" is(punctuation) -> go-to(token-string-nest)
  r"}" is(literal.string) -> pop
  any-of(root)

lex(delimited-inside-angle):
  r"[^<>]+" is(literal.string)
  r"<" is(literal.string) -> push
  r">" is(literal.string) -> pop

lex(root):
  r"\n" is(text)
  r"\s+" is(text)
  r"//(.*?)\n" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"/\+" is(comment.multiline) -> go-to(nested-comment)
  r"(abstract|alias|align|asm|assert|auto|body|break|case|cast|catch|class|const|continue|debug|default|delegate|delete|deprecated|do|else|enum|export|extern|finally|final|foreach_reverse|foreach|for|function|goto|if|import|inout|interface|invariant|in|is|lazy|mixin|module|new|nothrow|out|override|package|pragma|private|protected|public|pure|ref|return|scope|static|struct|super|switch|synchronized|template|this|throw|try|typedef|typeid|typeof|union|unittest|version|volatile|while|with|__traits)\b" is(keyword)
  r"(bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong|ushort|void|wchar)\b" is(keyword.type)
  r"(false|true|null)\b" is(keyword.constant)
  r"macro\b" is(keyword.reserved)
  r"(string|wstring|dstring)\b" is(name.builtin)
  r"0[xX]([0-9a-fA-F_]*\.[0-9a-fA-F_]+|[0-9a-fA-F_]+)[pP][+\-]?[0-9_]+[fFL]?[i]?" is(literal.number.float)
  r"[0-9_]+(\.[0-9_]+[eE][+\-]?[0-9_]+|\.[0-9_]*|[eE][+\-]?[0-9_]+)[fFL]?[i]?" is(literal.number.float)
  r"\.(0|[1-9][0-9_]*)([eE][+\-]?[0-9_]+)?[fFL]?[i]?" is(literal.number.float)
  r"0[Bb][01_]+" is(literal.number)
  r"0[0-7_]+" is(literal.number.oct)
  r"0[xX][0-9a-fA-F_]+" is(literal.number.hex)
  r"(0|[1-9][0-9_]*)([LUu]|Lu|LU|uL|UL)?" is(literal.number.integer)
  r"'(\\['\"?\\abfnrtv]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}|\\&\w+;|.)'" is(literal.string.char)
  r"r\"[^\"]*\"[cwd]?" is(literal.string)
  r"`[^`]*`[cwd]?" is(literal.string)
  r"\"(\\\\|\\\"|[^\"])*\"[cwd]?" is(literal.string)
  r"\\(['\\"?\\abfnrtv]|x[0-9a-fA-F]{2}|[0-7]{1,3}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|&\w+;)" is(literal.string)
  r"x\"[0-9a-fA-F_\s]*\"[cwd]?" is(literal.string)
  r"q\"\[" is(literal.string) -> go-to(delimited-bracket)
  r"q\"\(" is(literal.string) -> go-to(delimited-parenthesis)
  r"q\"<" is(literal.string) -> go-to(delimited-angle)
  r"q\"{" is(literal.string) -> go-to(delimited-curly)
  r"q\"([a-zA-Z_]\w*)\n.*?\n\1\"" is(literal.string)
  r"q\"(.).*?\1\"" is(literal.string)
  r"q{" is(literal.string) -> go-to(token-string)
  r"(\126=|\^=|%=|\*=|==|!>=|!<=|!<>=|!<>|!<|!>|!=|>>>=|>>>|>>=|>>|>=|<>=|<>|<<=|<<|<=|\+\+|\+=|--|-=|\|\||\|=|&&|&=|\.\.\.|\.\.|/=)|[/.&|\-+<>!()\[\]{}?,;:$=*%^\126]" is(punctuation)
  r"[a-zA-Z_]\w*" is(name)

lex(nested-comment):
  r"[^+/]+" is(comment.multiline)
  r"/\+" is(comment.multiline) -> push
  r"\+/" is(comment.multiline) -> pop
  r"[+/]" is(comment.multiline)

