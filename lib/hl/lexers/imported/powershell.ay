use("atomy")
use("hl/define")

Lexer = lexer:
name: "PowerShell"
aliases: ["powershell", "posh", "ps1"]
extensions: [".ps1"]
mimetypes: ["text/x-powershell"]
start: .root
flags: Regexp IGNORECASE | Regexp MULTILINE

lex(multline):
  r"[^\#&.]+" is(comment.multiline)
  r"\#(>|&gt;)" is(comment.multiline) -> pop
  r"\.(component|description|example|externalhelp|forwardhelpcategory|forwardhelptargetname|functionality|inputs|link|notes|outputs|parameter|remotehelprunspace|role|synopsis)" is(literal.string.doc)
  r"[\#&.]" is(comment.multiline)

lex(root):
  r"\s+" is(text)
  r"^(\s*\#[\#\s]*)(\.(?:component|description|example|externalhelp|forwardhelpcategory|forwardhelptargetname|functionality|inputs|link|notes|outputs|parameter|remotehelprunspace|role|synopsis))([^\n]*$)" is(by-groups(comment, literal.string.doc, comment))
  r"\#[^\n]*?$" is(comment)
  r"(&lt;|<)\#" is(comment.multiline) -> go-to(multline)
  r"@\"\n.*?\n\"@" is(literal.string.heredoc)
  r"@'\n.*?\n'@" is(literal.string.heredoc)
  r"`[\'\"$@-]" is(punctuation)
  r"\"" is(literal.string.double) -> go-to(string)
  r"'([^']|'')*'" is(literal.string.single)
  r"(\$|@@|@)((global|script|private|env):)?[a-z0-9_]+" is(name.variable)
  r"(while|validateset|validaterange|validatepattern|validatelength|validatecount|until|trap|switch|return|ref|process|param|parameter|in|if|global:|function|foreach|for|finally|filter|end|elseif|else|dynamicparam|do|default|continue|cmdletbinding|break|begin|alias|\?|%|\#script|\#private|\#local|\#global|mandatory|parametersetname|position|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|helpmessage|try|catch)\b" is(keyword)
  r"-(and|as|band|bnot|bor|bxor|casesensitive|ccontains|ceq|cge|cgt|cle|clike|clt|cmatch|cne|cnotcontains|cnotlike|cnotmatch|contains|creplace|eq|exact|f|file|ge|gt|icontains|ieq|ige|igt|ile|ilike|ilt|imatch|ine|inotcontains|inotlike|inotmatch|ireplace|is|isnot|le|like|lt|match|ne|not|notcontains|notlike|notmatch|or|regex|replace|wildcard)\b" is(operator)
  r"(write|where|wait|use|update|unregister|undo|trace|test|tee|take|suspend|stop|start|split|sort|skip|show|set|send|select|scroll|resume|restore|restart|resolve|resize|reset|rename|remove|register|receive|read|push|pop|ping|out|new|move|measure|limit|join|invoke|import|group|get|format|foreach|export|expand|exit|enter|enable|disconnect|disable|debug|cxnew|copy|convertto|convertfrom|convert|connect|complete|compare|clear|checkpoint|aggregate|add)-[a-z_][a-z0-9_]*\b" is(name.builtin)
  r"\[[a-z_\[][a-z0-9_. `,\[\]]*\]" is(name.constant)
  r"-[a-z_][a-z0-9_]*" is(name)
  r"\w+" is(name)
  r"[.,{}\[\]$()=+*/\\&%!\126?^`|<>-]" is(punctuation)

lex(string):
  r"[^$`\"]+" is(literal.string.double)
  r"\$\(" is(literal.string.interpol) -> go-to(interpol)
  r"`\"|\"\"" is(literal.string.double)
  r"[`$]" is(literal.string.double)
  r"\"" is(literal.string.double) -> pop

lex(interpol):
  r"[^$)]+" is(literal.string.interpol)
  r"\$\(" is(literal.string.interpol) -> push
  r"\)" is(literal.string.interpol) -> pop

