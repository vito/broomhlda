use("atomy")
use("hl/define")

Lexer = lexer:
name: "QML"
aliases: ["qml", "Qt Meta Language", "Qt modeling Language"]
extensions: [".qml"]
mimetypes: ["application/x-qml"]
start: .root
flags: Regexp MULTILINE

lex(commentsandwhitespace):
  r"\s+" is(text)
  r"<!--" is(comment)
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)

lex(root):
  r"^(?=\s|/|<!--)" is(text) -> go-to(slashstartsregex)
  any-of(commentsandwhitespace)
  r"\+\+|--|\126|&&|\?|:|\|\||\\(?=\n)|(<<|>>>?|==?|!=?|[-<>+*%&\|\^/])=?" is(operator) -> go-to(slashstartsregex)
  r"[{(\[;,]" is(punctuation) -> go-to(slashstartsregex)
  r"[})\].]" is(punctuation)
  r"\bid\s*:\s*[A-Za-z][_A-Za-z.0-9]*" is(keyword.declaration) -> go-to(slashstartsregex)
  r"\b[A-Za-z][_A-Za-z.0-9]*\s*:" is(keyword) -> go-to(slashstartsregex)
  r"(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|new|delete|typeof|instanceof|void|this)\b" is(keyword) -> go-to(slashstartsregex)
  r"(var|let|with|function)\b" is(keyword.declaration) -> go-to(slashstartsregex)
  r"(abstract|boolean|byte|char|class|const|debugger|double|enum|export|extends|final|float|goto|implements|import|int|interface|long|native|package|private|protected|public|short|static|super|synchronized|throws|transient|volatile)\b" is(keyword.reserved)
  r"(true|false|null|NaN|Infinity|undefined)\b" is(keyword.constant)
  r"(Array|Boolean|Date|Error|Function|Math|netscape|Number|Object|Packages|RegExp|String|sun|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|window)\b" is(name.builtin)
  r"[$a-zA-Z_][a-zA-Z0-9_]*" is(name.other)
  r"[0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+" is(literal.number.hex)
  r"[0-9]+" is(literal.number.integer)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r"'(\\\\|\\'|[^'])*'" is(literal.string.single)

lex(slashstartsregex):
  any-of(commentsandwhitespace)
  r"/(\\.|[^\[/\\\n]|\[(\\.|[^\]\\\n])*])+/([gim]+\b|\B)" is(literal.string.regex) -> pop
  r"(?=/)" is(text) -> do-all(pop, go-to(badregex))
  r"" is(text) -> pop

lex(badregex):
  r"\n" is(text) -> pop

