use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "RPMSpec"
  aliases: ["spec"]
  extensions: [".spec"]
  mimetypes: ["text/x-rpm-spec"]
  start: .root
  flags: 0

  lex(description):
    r"^(%(?:package|prep|build|install|clean|check|pre[a-z]*|post[a-z]*|trigger[a-z]*|files))(.*)$" is(by-groups(name.decorator, text)) -> pop
    r"\n" is(text)
    r"." is(text)

  lex(changelog):
    r"\*.*\n" is(generic.subheading)
    r"^(%(?:package|prep|build|install|clean|check|pre[a-z]*|post[a-z]*|trigger[a-z]*|files))(.*)$" is(by-groups(name.decorator, text)) -> pop
    r"\n" is(text)
    r"." is(text)

  lex(macro):
    r"%define.*\n" is(comment.preproc)
    r"%\{\!\?.*%define.*\}" is(comment.preproc)
    r"(%(?:if(?:n?arch)?|else(?:if)?|endif))(.*)$" is(by-groups(comment.preproc, text))

  lex(interpol):
    r"%\{?__[a-z_]+\}?" is(name.function)
    r"%\{?_([a-z_]+dir|[a-z_]+path|prefix)\}?" is(keyword.pseudo)
    r"%\{\?[A-Za-z0-9_]+\}" is(name.variable)
    r"\$\{?RPM_[A-Z0-9_]+\}?" is(name.variable.global)
    r"%\{[a-zA-Z][a-zA-Z0-9_]+\}" is(keyword.constant)

  lex(basic):
    any-of(macro)
    r"(?i)^(Name|Version|Release|Epoch|Summary|Group|License|Packager|Vendor|Icon|URL|Distribution|Prefix|Patch[0-9]*|Source[0-9]*|Requires\(?[a-z]*\)?|[a-z]+Req|Obsoletes|Provides|Conflicts|Build[a-z]+|[a-z]+Arch|Auto[a-z]+)(:)(.*)$" is(by-groups(generic.heading, punctuation, using(self class)))
    r"^%description" is(name.decorator) -> go-to(description)
    r"^%changelog" is(name.decorator) -> go-to(changelog)
    r"^(%(?:package|prep|build|install|clean|check|pre[a-z]*|post[a-z]*|trigger[a-z]*|files))(.*)$" is(by-groups(name.decorator, text))
    r"%(attr|defattr|dir|doc(?:dir)?|setup|config(?:ure)?|make(?:install)|ghost|patch[0-9]+|find_lang|exclude|verify)" is(keyword)
    any-of(interpol)
    r"'.*'" is(literal.string.single)
    r"\"" is(literal.string.double) -> go-to(string)
    r"." is(text)

  lex(root):
    r"\#.*\n" is(comment)
    any-of(basic)

  lex(string):
    r"\"" is(literal.string.double) -> pop
    r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
    any-of(interpol)
    r"." is(literal.string.double)

const-set(.Lexer, lexer)
