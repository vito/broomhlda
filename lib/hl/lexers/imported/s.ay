use("atomy")
use("hl/define")

Lexer = lexer:
name: "S"
aliases: ["splus", "s", "r"]
extensions: [".S", ".R"]
mimetypes: ["text/S-plus", "text/S", "text/R"]
start: .root
flags: 0

lex(statements):
  any-of(comments)
  r"\s+" is(text)
  r"\'" is(literal.string) -> go-to(string-squote)
  r"\\"" is(literal.string) -> go-to(string-dquote)
  any-of(builtin-symbols)
  any-of(numbers)
  any-of(keywords)
  any-of(punctuation)
  any-of(operators)
  any-of(valid-name)

lex(string-dquote):
  r"[^\\"]*\\"" is(literal.string) -> pop

lex(operators):
  r"<-|-|==|<=|>=|<|>|&&|&|!=|\|\|?" is(operator)
  r"\*|\+|\^|/|%%|%/%|=" is(operator)
  r"%in%|%*%" is(operator)

lex(keywords):
  r"for(?=\s*\()|while(?=\s*\()|if(?=\s*\()|(?<=\s)else|(?<=\s)break(?=;|$)|return(?=\s*\()|function(?=\s*\()" is(keyword.reserved)

lex(numbers):
  r"(?<![0-9a-zA-Z\)\}\]`\\"])(?=\s*)[-\+]?[0-9]+(\.[0-9]*)?(E[0-9][-\+]?(\.[0-9]*)?)?" is(literal.number)
  r"\.[0-9]*(E[0-9][-\+]?(\.[0-9]*)?)?" is(literal.number)

lex(valid-name):
  r"[a-zA-Z][0-9a-zA-Z\._]+" is(text)
  r"`.+`" is(literal.string.backtick)

lex(builtin-symbols):
  r"(NULL|NA|TRUE|FALSE|NaN)\b" is(keyword.constant)
  r"(T|F)\b" is(keyword.variable)

lex(punctuation):
  r"\[|\]|\[\[|\]\]|\$|\(|\)|@|:::?|;|," is(punctuation)

lex(comments):
  r"\#.*$" is(comment.single)

lex(root):
  any-of(statements)
  r"\{|\}" is(punctuation)
  r"." is(text)

lex(string-squote):
  r"[^\']*\'" is(literal.string) -> pop

