use("atomy")
use("hl/define")

Lexer = lexer:
name: "Dart"
aliases: ["dart"]
extensions: [".dart"]
mimetypes: ["text/x-dart"]
start: .root
flags: Regexp MULTILINE

lex(string-double):
  r"\"" is(literal.string.double) -> pop
  r"[^\"$]+" is(literal.string.double)
  r"(\$)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(literal.string.interpol, name))
  r"(\$\{)(.*?)(\})" is(by-groups(literal.string.interpol, using(self class), literal.string.interpol))
  r"\$+" is(literal.string.double)

lex(string-single):
  r"'" is(literal.string.single) -> pop
  r"[^'$]+" is(literal.string.single)
  r"(\$)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(literal.string.interpol, name))
  r"(\$\{)(.*?)(\})" is(by-groups(literal.string.interpol, using(self class), literal.string.interpol))
  r"\$+" is(literal.string.single)

lex(root):
  r"\#!(.*?)$" is(comment.preproc)
  r"(\#)(import|library|source)" is(by-groups(text, keyword))
  r"[^\S\n]+" is(text)
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)
  r"(class|interface)(\s+)" is(by-groups(keyword.declaration, text)) -> go-to(class)
  r"(assert|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|this|throw|try|while)\b" is(keyword)
  r"(abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\b" is(keyword.declaration)
  r"(bool|double|Dynamic|int|num|Object|String|void)" is(keyword.type)
  r"(false|null|true)" is(keyword.constant)
  r"@\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r"@'(\\\\|\\'|[^'])*'" is(literal.string.single)
  r"\"" is(literal.string.double) -> go-to(string-double)
  r"'" is(literal.string.single) -> go-to(string-single)
  r"[a-zA-Z_$][a-zA-Z0-9_]*:" is(name.label)
  r"[a-zA-Z_$][a-zA-Z0-9_]*" is(name)
  r"[\126!%^&*+=|?:<>/-]" is(operator)
  r"[(){}\[\],.;]" is(punctuation)
  r"0[xX][0-9a-fA-F]+" is(literal.number.hex)
  r"\d+(\.\d*)?([eE][+-]?\d+)?" is(literal.number)
  r"\.\d+([eE][+-]?\d+)?" is(literal.number)
  r"\n" is(text)

lex(class):
  r"[a-zA-Z_$][a-zA-Z0-9_]*" is(name.class) -> pop

