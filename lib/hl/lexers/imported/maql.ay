use("atomy")
use("hl/define")

Lexer = lexer:
name: "MAQL"
aliases: ["maql"]
extensions: [".maql"]
mimetypes: ["text/x-gooddata-maql", "application/x-gooddata-maql"]
start: .root
flags: Regexp IGNORECASE

lex(root):
  Regexp new("IDENTIFIER\\b") is(name.builtin)
  Regexp new("\\{[^}]+\\}") is(name.variable)
  Regexp new("[0-9]+(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]{1,3})?") is(literal.number)
  Regexp new("\"") is(literal.string) -> go-to(string-literal)
  Regexp new("\\<\\>|\\!\\=") is(operator)
  Regexp new("\\=|\\>\\=|\\>|\\<\\=|\\<") is(operator)
  Regexp new("\\:\\=") is(operator)
  Regexp new("\\[[^]]+\\]") is(name.variable.class)
  Regexp new("(DIMENSIONS?|BOTTOM|METRIC|COUNT|OTHER|FACT|WITH|TOP|OR|ATTRIBUTE|CREATE|PARENT|FALSE|ROWS?|FROM|ALL|AS|PF|COLUMNS?|DEFINE|REPORT|LIMIT|TABLE|LIKE|AND|BY|BETWEEN|EXCEPT|SELECT|MATCH|WHERE|TRUE|FOR|IN|WITHOUT|FILTER|ALIAS|ORDER|FACT|WHEN|NOT|ON|KEYS|KEY|FULLSET|PRIMARY|LABELS|LABEL|VISUAL|TITLE|DESCRIPTION|FOLDER|ALTER|DROP|ADD|DATASET|DATATYPE|INT|BIGINT|DOUBLE|DATE|VARCHAR|DECIMAL|SYNCHRONIZE|TYPE|DEFAULT|ORDER|ASC|DESC|HYPERLINK|INCLUDE|TEMPLATE|MODIFY)\\b") is(keyword)
  Regexp new("[a-zA-Z]\\w*\\b") is(name.function)
  Regexp new("#.*") is(comment.single)
  Regexp new("[,;\\(\\)]") is(punctuation)
  Regexp new("\\s+") is(text)

lex(string-literal):
  Regexp new("\\\\[tnrfbae\"\\\\]") is(literal.string.escape)
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("[^\\\\\"]+") is(literal.string)

