use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Debian Control file"
  aliases: ["control"]
  extensions: ["control"]
  mimetypes: []
  start: .root
  flags: 0

  lex(maintainer):
    r"<[^>]+>" is(generic.strong)
    r"<[^>]+>$" is(generic.strong) -> pop
    r",\n?" is(text)
    r"." is(text)

  lex(depends):
    r":\s*" is(text)
    r"(\$)(\{)(\w+\s*:\s*\w+)" is(by-groups(operator, text, name.entity))
    r"\(" is(text) -> go-to(depend-vers)
    r"," is(text)
    r"\|" is(operator)
    r"[\s]+" is(text)
    r"[}\)]\s*$" is(text) -> pop
    r"}" is(text)
    r"[^,]$" is(name.function) -> pop
    r"([\+\.a-zA-Z0-9-])(\s*)" is(by-groups(name.function, text))
    r"\[.*?\]" is(name.entity)

  lex(root):
    r"^(Description)" is(keyword) -> go-to(description)
    r"^(Maintainer)(:\s*)" is(by-groups(keyword, text)) -> go-to(maintainer)
    r"^((Build-)?Depends)" is(keyword) -> go-to(depends)
    r"^((?:Python-)?Version)(:\s*)(\S+)$" is(by-groups(keyword, text, literal.number))
    r"^((?:Installed-)?Size)(:\s*)(\S+)$" is(by-groups(keyword, text, literal.number))
    r"^(MD5Sum|SHA1|SHA256)(:\s*)(\S+)$" is(by-groups(keyword, text, literal.number))
    r"^([a-zA-Z\-0-9\.]*?)(:\s*)(.*?)$" is(by-groups(keyword, text.whitespace, literal.string))

  lex(description):
    r"(.*)(Homepage)(: )(\S+)" is(by-groups(text, literal.string, name, name.class))
    r":.*\n" is(generic.strong)
    r" .*\n" is(text)
    r"" is(text) -> pop

  lex(depend-vers):
    r"\)," is(text) -> pop
    r"\)[^,]" is(text) -> pop(2)
    r"([><=]+)(\s*)([^\)]+)" is(by-groups(operator, text, literal.number))

const-set(.Lexer, lexer)
