use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "BlitzMax"
  aliases: ["blitzmax", "bmax"]
  extensions: [".bmx"]
  mimetypes: ["text/x-bmx"]
  start: .root
  flags: Regexp IGNORECASE

  lex(root):
    r"[ \t]+" is(text)
    r"\.\.\n" is(text)
    r"'.*?\n" is(comment.single)
    r"([ \t]*)\bRem\n(\n|.)*?\s*\bEnd([ \t]*)Rem" is(comment.multiline)
    r"\"" is(literal.string.double) -> go-to(string)
    r"[0-9]+\.[0-9]*(?!\.)" is(literal.number.float)
    r"\.[0-9]*(?!\.)" is(literal.number.float)
    r"[0-9]+" is(literal.number.integer)
    r"\$[0-9a-f]+" is(literal.number.hex)
    r"\%[10]+" is(literal.number)
    r"(?:(?:(:)?([ \t]*)(:?\b(Shl|Shr|Sar|Mod)\b|([+\-*/&|\126]))|Or|And|Not|[=<>^]))" is(operator)
    r"[(),.:\[\]]" is(punctuation)
    r"(?:\#[\w \t]*)" is(name.label)
    r"(?:\?[\w \t]*)" is(comment.preproc)
    r"\b(New)\b([ \t]?)([(]?)([a-z_][a-z0-9_]*)" is(by-groups(keyword.reserved, text, punctuation, name.class))
    r"\b(Import|Framework|Module)([ \t]+)([a-z_][a-z0-9_]*\.[a-z_][a-z0-9_]*)" is(by-groups(keyword.reserved, text, keyword.namespace))
    r"([a-z_][a-z0-9_]*)(?:(?:([ \t]*)(@{1,2}|[!\#$%])|([ \t]*:[ \t]*\b(?:Shl|Shr|Sar|Mod)\b)|([ \t]*)([:])([ \t]*)(?:\b(Int|Byte|Short|Float|Double|Long)\b|([a-z_][a-z0-9_]*)))(?:([ \t]*)(Ptr))?)?((?:[ \t]|\.\.\n)*)([(])" is(by-groups(name.function, text, keyword.type, operator, text, punctuation, text, keyword.type, name.class, text, keyword.type, text, punctuation))
    r"([a-z_][a-z0-9_]*)(?:(?:([ \t]*)(@{1,2}|[!\#$%])|([ \t]*:[ \t]*\b(?:Shl|Shr|Sar|Mod)\b)|([ \t]*)([:])([ \t]*)(?:\b(Int|Byte|Short|Float|Double|Long)\b|([a-z_][a-z0-9_]*)))(?:([ \t]*)(Ptr))?)" is(by-groups(name.variable, text, keyword.type, operator, text, punctuation, text, keyword.type, name.class, text, keyword.type))
    r"\b(Type|Extends)([ \t]+)([a-z_][a-z0-9_]*)" is(by-groups(keyword.reserved, text, name.class))
    r"\b(Ptr)\b" is(keyword.type)
    r"\b(Pi|True|False|Null|Self|Super)\b" is(keyword.constant)
    r"\b(Local|Global|Const|Field)\b" is(keyword.declaration)
    r"\b(TNullMethodException|TNullFunctionException|TNullObjectException|TArrayBoundsException|TRuntimeException)\b" is(name.exception)
    r"\b(Strict|SuperStrict|Module|ModuleInfo|End|Return|Continue|Exit|Public|Private|Var|VarPtr|Chr|Len|Asc|SizeOf|Sgn|Abs|Min|Max|New|Release|Delete|Incbin|IncbinPtr|IncbinLen|Framework|Include|Import|Extern|EndExtern|Function|EndFunction|Type|EndType|Extends|Method|EndMethod|Abstract|Final|If|Then|Else|ElseIf|EndIf|For|To|Next|Step|EachIn|While|Wend|EndWhile|Repeat|Until|Forever|Select|Case|Default|EndSelect|Try|Catch|EndTry|Throw|Assert|Goto|DefData|ReadData|RestoreData)\b" is(keyword.reserved)
    r"([a-z_][a-z0-9_]*)" is(name.variable)

  lex(string):
    r"\"\"" is(literal.string.double)
    r"\"C?" is(literal.string.double) -> pop
    r"[^\"]+" is(literal.string.double)

const-set(.Lexer, lexer)
