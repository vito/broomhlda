use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
name: "Django/Jinja"
aliases: ["django", "jinja"]
extensions: []
mimetypes: ["application/x-django-templating", "application/x-jinja"]
start: .root
flags: Regexp MULTILINE

lex(var):
  r"\s+" is(text)
  r"(-?)(\}\})" is(by-groups(text, comment.preproc)) -> pop
  any-of(varnames)

lex(varnames):
  r"(\|)(\s*)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, text, name.function))
  r"(is)(\s+)(not)?(\s+)?([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(keyword, text, keyword, text, name.function))
  r"(_|true|false|none|True|False|None)\b" is(keyword.pseudo)
  r"(in|as|reversed|recursive|not|and|or|is|if|else|import|with(?:(?:out)?\s*context)?|scoped|ignore\s+missing)\b" is(keyword)
  r"(loop|block|super|forloop)\b" is(name.builtin)
  r"[a-zA-Z][a-zA-Z0-9_-]*" is(name.variable)
  r"\.[a-zA-Z0-9_]+" is(name.variable)
  r":?\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r":?'(\\\\|\\'|[^'])*'" is(literal.string.single)
  r"([{}()\[\]+\-*/,:\126]|[><=]=?)" is(operator)
  r"[0-9](\.[0-9]*)?(eE[+-][0-9])?[flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?" is(literal.number)

lex(root):
  r"[^{]+" is(other)
  r"\{\{" is(comment.preproc) -> go-to(var)
  r"\{[*\#].*?[*\#]\}" is(comment)
  r"(\{%)(-?\s*)(comment)(\s*-?)(%\})(.*?)(\{%)(-?\s*)(endcomment)(\s*-?)(%\})" is(by-groups(comment.preproc, text, keyword, text, comment.preproc, comment, comment.preproc, text, keyword, text, comment.preproc))
  r"(\{%)(-?\s*)(raw)(\s*-?)(%\})(.*?)(\{%)(-?\s*)(endraw)(\s*-?)(%\})" is(by-groups(comment.preproc, text, keyword, text, comment.preproc, text, comment.preproc, text, keyword, text, comment.preproc))
  r"(\{%)(-?\s*)(filter)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(comment.preproc, text, keyword, text, name.function)) -> go-to(block)
  r"(\{%)(-?\s*)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(comment.preproc, text, keyword)) -> go-to(block)
  r"\{" is(other)

lex(block):
  r"\s+" is(text)
  r"(-?)(%\})" is(by-groups(text, comment.preproc)) -> pop
  any-of(varnames)
  r"." is(punctuation)

const-set(.Lexer, lexer)
