use("atomy")
use("hl/define")

Lexer = lexer:
name: "HTML"
aliases: ["html"]
extensions: [".html", ".htm", ".xhtml", ".xslt"]
mimetypes: ["text/html", "application/xhtml+xml"]
start: .root
flags: Regexp IGNORECASE | Regexp MULTILINE

lex(comment):
  r"[^-]+" is(comment)
  r"-->" is(comment) -> pop
  r"-" is(comment)

lex(style-content):
  r"<\s*/\s*style\s*>" is(name.tag) -> pop
  r".+?(?=<\s*/\s*style\s*>)" is(using(Css))

lex(attr):
  r"\".*?\"" is(literal.string) -> pop
  r"'.*?'" is(literal.string) -> pop
  r"[^\s>]+" is(literal.string) -> pop

lex(script-content):
  r"<\s*/\s*script\s*>" is(name.tag) -> pop
  r".+?(?=<\s*/\s*script\s*>)" is(using(Javascript))

lex(tag):
  r"\s+" is(text)
  r"[a-zA-Z0-9_:-]+\s*=" is(name.attribute) -> go-to(attr)
  r"[a-zA-Z0-9_:-]+" is(name.attribute)
  r"/?\s*>" is(name.tag) -> pop

lex(root):
  r"[^<&]+" is(text)
  r"&\S*?;" is(name.entity)
  r"\<\!\[CDATA\[.*?\]\]\>" is(comment.preproc)
  r"<!--" is(comment) -> go-to(comment)
  r"<\?.*?\?>" is(comment.preproc)
  r"<![^>]*>" is(comment.preproc)
  r"<\s*script\s*" is(name.tag) -> do-all(go-to(script-content), go-to(tag))
  r"<\s*style\s*" is(name.tag) -> do-all(go-to(style-content), go-to(tag))
  r"<\s*[a-zA-Z0-9:]+" is(name.tag) -> go-to(tag)
  r"<\s*/\s*[a-zA-Z0-9:]+\s*>" is(name.tag)

