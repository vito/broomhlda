use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Ioke"
  aliases: ["ioke", "ik"]
  extensions: [".ik"]
  mimetypes: ["text/x-iokesrc"]
  start: .root
  flags: 0

  lex(squareRegexp):
    r"(?<!\\)][oxpniums]*" is(literal.string.regex) -> pop
    any-of(interpolatableText)
    r"\\]" is(literal.string.regex)
    r"[^\]]" is(literal.string.regex)

  lex(textInterpolationRoot):
    r"}" is(punctuation) -> pop
    any-of(root)

  lex(interpolatableText):
    r"(\\b|\\e|\\t|\\n|\\f|\\r|\\\"|\\\\|\\\#|\\\Z|\\u[0-9a-fA-F]{1,4}|\\[0-3]?[0-7]?[0-7])" is(literal.string.escape)
    r"\#{" is(punctuation) -> go-to(textInterpolationRoot)

  lex(text):
    r"(?<!\\)\"" is(literal.string) -> pop
    any-of(interpolatableText)
    r"[^\"]" is(literal.string)

  lex(documentation):
    r"(?<!\\)\"" is(literal.string.doc) -> pop
    any-of(interpolatableText)
    r"[^\"]" is(literal.string.doc)

  lex(slashRegexp):
    r"(?<!\\)/[oxpniums]*" is(literal.string.regex) -> pop
    any-of(interpolatableText)
    r"\\/" is(literal.string.regex)
    r"[^/]" is(literal.string.regex)

  lex(squareText):
    r"(?<!\\)]" is(literal.string) -> pop
    any-of(interpolatableText)
    r"[^\]]" is(literal.string)

  lex(root):
    r"\n" is(text)
    r"\s+" is(text)
    r";(.*?)\n" is(comment)
    r"\A\#!(.*?)\n" is(comment)
    r"\#/" is(literal.string.regex) -> go-to(slashRegexp)
    r"\#r\[" is(literal.string.regex) -> go-to(squareRegexp)
    r":[a-zA-Z0-9_!:?]+" is(literal.string.symbol)
    r"[a-zA-Z0-9_!:?]+:(?![a-zA-Z0-9_!?])" is(literal.string.other)
    r":\"(\\\\|\\\"|[^\"])*\"" is(literal.string.symbol)
    r"((?<=fn\()|(?<=fnx\()|(?<=method\()|(?<=macro\()|(?<=lecro\()|(?<=syntax\()|(?<=dmacro\()|(?<=dlecro\()|(?<=dlecrox\()|(?<=dsyntax\())\s*\"" is(literal.string.doc) -> go-to(documentation)
    r"\"" is(literal.string) -> go-to(text)
    r"\#\[" is(literal.string) -> go-to(squareText)
    r"[a-zA-Z0-9_][a-zA-Z0-9!?_:]+(?=\s*=.*mimic\s)" is(name.entity)
    r"[a-zA-Z_][a-zA-Z0-9_!:?]*(?=[\s]*[+*/-]?=[^=].*($|\.))" is(name.variable)
    r"(break|cond|continue|do|ensure|for|for:dict|for:set|if|let|loop|p:for|p:for:dict|p:for:set|return|unless|until|while|with)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(eval|mimic|print|println)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(cell\?|cellNames|cellOwner\?|cellOwner|cells|cell|documentation|hash|identity|mimic|removeCell\!|undefineCell\!)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(stackTraceAsText)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(dict|list|message|set)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(case|case:and|case:else|case:nand|case:nor|case:not|case:or|case:otherwise|case:xor)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(asText|become\!|derive|freeze\!|frozen\?|in\?|is\?|kind\?|mimic\!|mimics|mimics\?|prependMimic\!|removeAllMimics\!|removeMimic\!|same\?|send|thaw\!|uniqueHexId)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(after|around|before)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(kind|cellDescriptionDict|cellSummary|genSym|inspect|notice)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(use|destructuring)" is(keyword.reserved)
    r"(cell\?|cellOwner\?|cellOwner|cellNames|cells|cell|documentation|identity|removeCell!|undefineCell)(?![a-zA-Z0-9!:_?])" is(keyword)
    r"(internal:compositeRegexp|internal:concatenateText|internal:createDecimal|internal:createNumber|internal:createRegexp|internal:createText)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(availableRestarts|bind|error\!|findRestart|handle|invokeRestart|rescue|restart|signal\!|warn\!)(?![a-zA-Z0-9!:_?])" is(keyword.reserved)
    r"(nil|false|true)(?![a-zA-Z0-9!:_?])" is(name.constant)
    r"(Arity|Base|Call|Condition|DateTime|Aspects|Pointcut|Assignment|BaseBehavior|Boolean|Case|AndCombiner|Else|NAndCombiner|NOrCombiner|NotCombiner|OrCombiner|XOrCombiner|Conditions|Definitions|FlowControl|Internal|Literals|Reflection|DefaultMacro|DefaultMethod|DefaultSyntax|Dict|FileSystem|Ground|Handler|Hook|IO|IokeGround|Struct|LexicalBlock|LexicalMacro|List|Message|Method|Mixins|NativeMethod|Number|Origin|Pair|Range|Reflector|Regexp Match|Regexp|Rescue|Restart|Runtime|Sequence|Set|Symbol|System|Text|Tuple)(?![a-zA-Z0-9!:_?])" is(name.builtin)
    r"(generateMatchMethod|aliasMethod|\955|\654|fnx|fn|method|dmacro|dlecro|syntax|macro|dlecrox|lecrox|lecro|syntax)(?![a-zA-Z0-9!:_?])" is(name.function)
    r"-?0[xX][0-9a-fA-F]+" is(literal.number.hex)
    r"-?(\d+\.?\d*|\d*\.\d+)([eE][+-]?[0-9]+)?" is(literal.number.float)
    r"-?\d+" is(literal.number.integer)
    r"\#\(" is(punctuation)
    r"(&&>>|\|\|>>|\*\*>>|:::|::|\.\.\.|===|\*\*>|\*\*=|&&>|&&=|\|\|>|\|\|=|\->>|\+>>|!>>|<>>>|<>>|&>>|%>>|\#>>|@>>|/>>|\*>>|\?>>|\|>>|\^>>|\126>>|\$>>|=>>|<<=|>>=|<=>|<\->|=\126|!\126|=>|\+\+|\-\-|<=|>=|==|!=|&&|\.\.|\+=|\-=|\*=|\/=|%=|&=|\^=|\|=|<\-|\+>|!>|<>|&>|%>|\#>|\@>|\/>|\*>|\?>|\|>|\^>|\126>|\$>|<\->|\->|<<|>>|\*\*|\?\||\?&|\|\||>|<|\*|\/|%|\+|\-|&|\^|\||=|\$|!|\126|\?|\#|\8800|\8728|\8712|\8713)" is(operator)
    r"(and|nand|or|xor|nor|return|import)(?![a-zA-Z0-9_!?])" is(operator)
    r"(\`\`|\`|\'\'|\'|\.|\,|@@|@|\[|\]|\(|\)|{|})" is(punctuation)
    r"[A-Z][a-zA-Z0-9_!:?]*" is(name.class)
    r"[a-z_][a-zA-Z0-9_!:?]*" is(name)

const-set(.Lexer, lexer)
