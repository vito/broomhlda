use("atomy")
use("hl/define")

Lexer = lexer:
name: "Objective-J"
aliases: ["objective-j", "objectivej", "obj-j", "objj"]
extensions: [".j"]
mimetypes: ["text/x-objective-j"]
start: .root
flags: Regexp MULTILINE

lex(statements):
  Regexp new("(L|@)?\"") is(literal.string) -> go-to(string)
  Regexp new("(L|@)?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'") is(literal.string.char)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string.double)
  Regexp new("'(\\\\\\\\|\\\\'|[^'])*'") is(literal.string.single)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("0x[0-9a-fA-F]+[Ll]?") is(literal.number.hex)
  Regexp new("0[0-7]+[Ll]?") is(literal.number.oct)
  Regexp new("\\d+[Ll]?") is(literal.number.integer)
  Regexp new("^(?=\\s|/|<!--)") is(text) -> go-to(slashstartsregex)
  Regexp new("\\+\\+|--|\126|&&|\\?|:|\\|\\||\\\\(?=\\n)|(<<|>>>?|==?|!=?|[-<>+*%&\\|\\^/])=?") is(operator) -> go-to(slashstartsregex)
  Regexp new("[{(\\[;,]") is(punctuation) -> go-to(slashstartsregex)
  Regexp new("[})\\].]") is(punctuation)
  Regexp new("(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|new|delete|typeof|instanceof|void|prototype|__proto__)\\b") is(keyword) -> go-to(slashstartsregex)
  Regexp new("(var|with|function)\\b") is(keyword.declaration) -> go-to(slashstartsregex)
  Regexp new("(@selector|@private|@protected|@public|@encode|@synchronized|@try|@throw|@catch|@finally|@end|@property|@synthesize|@dynamic|@for|@accessors|new)\\b") is(keyword)
  Regexp new("(int|long|float|short|double|char|unsigned|signed|void|id|BOOL|bool|boolean|IBOutlet|IBAction|SEL|@outlet|@action)\\b") is(keyword.type)
  Regexp new("(self|super)\\b") is(name.builtin)
  Regexp new("(TRUE|YES|FALSE|NO|Nil|nil|NULL)\\b") is(keyword.constant)
  Regexp new("(true|false|null|NaN|Infinity|undefined)\\b") is(keyword.constant)
  Regexp new("(ABS|ASIN|ACOS|ATAN|ATAN2|SIN|COS|TAN|EXP|POW|CEIL|FLOOR|ROUND|MIN|MAX|RAND|SQRT|E|LN2|LN10|LOG2E|LOG10E|PI|PI2|PI_2|SQRT1_2|SQRT2)\\b") is(keyword.constant)
  Regexp new("(Array|Boolean|Date|Error|Function|Math|netscape|Number|Object|Packages|RegExp|String|sun|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|window)\\b") is(name.builtin)
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]*)((?:\\s|//.*?\\n|/[*].*?[*]/)*)(?=\\()") is(by-groups(name.function, using(self class)))
  Regexp new("[$a-zA-Z_][a-zA-Z0-9_]*") is(name)

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

lex(function-signature):
  any-of(whitespace)
  Regexp new("(\\((?:\\s|//.*?\\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]+)((?:\\s|//.*?\\n|/[*].*?[*]/)*\\)(?:\\s|//.*?\\n|/[*].*?[*]/)*)([$a-zA-Z_][a-zA-Z0-9_]+(?:\\s|//.*?\\n|/[*].*?[*]/)*:)") is(by-groups(using(self class), keyword.type, using(self class), name.function)) -> go-to(function-parameters)
  Regexp new("(\\((?:\\s|//.*?\\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]+)((?:\\s|//.*?\\n|/[*].*?[*]/)*\\)(?:\\s|//.*?\\n|/[*].*?[*]/)*)([$a-zA-Z_][a-zA-Z0-9_]+)") is(by-groups(using(self class), keyword.type, using(self class), name.function)) -> pop
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]+(?:\\s|//.*?\\n|/[*].*?[*]/)*:)") is(by-groups(name.function)) -> go-to(function-parameters)
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]+)") is(by-groups(name.function)) -> pop
  Regexp new("") is(text) -> pop

lex(classname):
  Regexp new("([a-zA-Z_][a-zA-Z0-9_]*)((?:\\s|//.*?\\n|/[*].*?[*]/)*:(?:\\s|//.*?\\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]*)?") is(by-groups(name.class, using(self class), name.class)) -> pop
  Regexp new("([a-zA-Z_][a-zA-Z0-9_]*)((?:\\s|//.*?\\n|/[*].*?[*]/)*\\()([a-zA-Z_][a-zA-Z0-9_]*)(\\))") is(by-groups(name.class, using(self class), name.label, text)) -> pop
  Regexp new("([a-zA-Z_][a-zA-Z0-9_]*)") is(name.class) -> pop

lex(forward-classname):
  Regexp new("([a-zA-Z_][a-zA-Z0-9_]*)(\\s*,\\s*)") is(by-groups(name.class, text)) -> push
  Regexp new("([a-zA-Z_][a-zA-Z0-9_]*)(\\s*;?)") is(by-groups(name.class, text)) -> pop

lex(badregex):
  Regexp new("\10") is(text) -> pop

lex(function-parameters):
  any-of(whitespace)
  Regexp new("(\\((?:\\s|//.*?\\n|/[*].*?[*]/)*)([^\\)]+)((?:\\s|//.*?\\n|/[*].*?[*]/)*\\)(?:\\s|//.*?\\n|/[*].*?[*]/)*)+([$a-zA-Z_][a-zA-Z0-9_]+)") is(by-groups(using(self class), keyword.type, using(self class), text))
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]+(?:\\s|//.*?\\n|/[*].*?[*]/)*:)") is(name.function)
  Regexp new("(:)") is(name.function)
  Regexp new("(,(?:\\s|//.*?\\n|/[*].*?[*]/)*...)") is(using(self class))
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]+)") is(text)

lex(if0):
  Regexp new("^\\s*#if.*?(?<!\\\\)\\n") is(comment.preproc) -> push
  Regexp new("^\\s*#endif.*?(?<!\\\\)\\n") is(comment.preproc) -> pop
  Regexp new(".*?\\n") is(comment)

lex(whitespace):
  Regexp new("(@import)(\\s+)(\"(\\\\\\\\|\\\\\"|[^\"])*\")") is(by-groups(comment.preproc, text, literal.string.double))
  Regexp new("(@import)(\\s+)(<(\\\\\\\\|\\\\>|[^>])*>)") is(by-groups(comment.preproc, text, literal.string.double))
  Regexp new("(#(?:include|import))(\\s+)(\"(\\\\\\\\|\\\\\"|[^\"])*\")") is(by-groups(comment.preproc, text, literal.string.double))
  Regexp new("(#(?:include|import))(\\s+)(<(\\\\\\\\|\\\\>|[^>])*>)") is(by-groups(comment.preproc, text, literal.string.double))
  Regexp new("#if\\s+0") is(comment.preproc) -> go-to(if0)
  Regexp new("#") is(comment.preproc) -> go-to(macro)
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("<!--") is(comment)

lex(root):
  any-of(whitespace)
  Regexp new("^((?:\\s|//.*?\\n|/[*].*?[*]/)*[\\+-](?:\\s|//.*?\\n|/[*].*?[*]/)*)([\\(a-zA-Z_].*?[^\\(])((?:\\s|//.*?\\n|/[*].*?[*]/)*{)") is(by-groups(using(self class), using(self class), using(self class)))
  Regexp new("(@interface|@implementation)(\\s+)") is(by-groups(keyword, text)) -> go-to(classname)
  Regexp new("(@class|@protocol)(\\s*)") is(by-groups(keyword, text)) -> go-to(forward-classname)
  Regexp new("(\\s*)(@end)(\\s*)") is(by-groups(text, keyword, text))
  any-of(statements)
  Regexp new("[{\\(\\)}]") is(punctuation)
  Regexp new(";") is(punctuation)

lex(slashstartsregex):
  any-of(whitespace)
  Regexp new("/(\\\\.|[^\\[/\\\\\\n]|\\[(\\\\.|[^\\]\\\\\\n])*])+/([gim]+\\b|\\B)") is(literal.string.regex) -> pop
  Regexp new("(?=/)") is(text) -> do-all(pop, go-to(badregex))
  Regexp new("") is(text) -> pop

lex(macro):
  Regexp new("[^/\\n]+") is(comment.preproc)
  Regexp new("/[*](.|\\n)*?[*]/") is(comment.multiline)
  Regexp new("//.*?\\n") is(comment.single) -> pop
  Regexp new("/") is(comment.preproc)
  Regexp new("(?<=\\\\)\\n") is(comment.preproc)
  Regexp new("\\n") is(comment.preproc) -> pop

lex(expression):
  Regexp new("([$a-zA-Z_][a-zA-Z0-9_]*)(\\()") is(by-groups(name.function, punctuation))
  Regexp new("(\\))") is(punctuation) -> pop

