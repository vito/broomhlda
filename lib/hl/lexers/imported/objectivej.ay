use("atomy")
use("hl/define")

Lexer = lexer:
name: "Objective-J"
aliases: ["objective-j", "objectivej", "obj-j", "objj"]
extensions: [".j"]
mimetypes: ["text/x-objective-j"]
start: .root
flags: Regexp MULTILINE

lex(statements):
  r"(L|@)?\"" is(literal.string) -> go-to(string)
  r"(L|@)?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string.double)
  r"'(\\\\|\\'|[^'])*'" is(literal.string.single)
  r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[lL]?" is(literal.number.float)
  r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
  r"0x[0-9a-fA-F]+[Ll]?" is(literal.number.hex)
  r"0[0-7]+[Ll]?" is(literal.number.oct)
  r"\d+[Ll]?" is(literal.number.integer)
  r"^(?=\s|/|<!--)" is(text) -> go-to(slashstartsregex)
  r"\+\+|--|\126|&&|\?|:|\|\||\\(?=\n)|(<<|>>>?|==?|!=?|[-<>+*%&\|\^/])=?" is(operator) -> go-to(slashstartsregex)
  r"[{(\[;,]" is(punctuation) -> go-to(slashstartsregex)
  r"[})\].]" is(punctuation)
  r"(for|in|while|do|break|return|continue|switch|case|default|if|else|throw|try|catch|finally|new|delete|typeof|instanceof|void|prototype|__proto__)\b" is(keyword) -> go-to(slashstartsregex)
  r"(var|with|function)\b" is(keyword.declaration) -> go-to(slashstartsregex)
  r"(@selector|@private|@protected|@public|@encode|@synchronized|@try|@throw|@catch|@finally|@end|@property|@synthesize|@dynamic|@for|@accessors|new)\b" is(keyword)
  r"(int|long|float|short|double|char|unsigned|signed|void|id|BOOL|bool|boolean|IBOutlet|IBAction|SEL|@outlet|@action)\b" is(keyword.type)
  r"(self|super)\b" is(name.builtin)
  r"(TRUE|YES|FALSE|NO|Nil|nil|NULL)\b" is(keyword.constant)
  r"(true|false|null|NaN|Infinity|undefined)\b" is(keyword.constant)
  r"(ABS|ASIN|ACOS|ATAN|ATAN2|SIN|COS|TAN|EXP|POW|CEIL|FLOOR|ROUND|MIN|MAX|RAND|SQRT|E|LN2|LN10|LOG2E|LOG10E|PI|PI2|PI_2|SQRT1_2|SQRT2)\b" is(keyword.constant)
  r"(Array|Boolean|Date|Error|Function|Math|netscape|Number|Object|Packages|RegExp|String|sun|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|window)\b" is(name.builtin)
  r"([$a-zA-Z_][a-zA-Z0-9_]*)((?:\s|//.*?\n|/[*].*?[*]/)*)(?=\()" is(by-groups(name.function, using(self class)))
  r"[$a-zA-Z_][a-zA-Z0-9_]*" is(name)

lex(string):
  r"\"" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
  r"[^\\\"\n]+" is(literal.string)
  r"\\\n" is(literal.string)
  r"\\" is(literal.string)

lex(function-signature):
  any-of(whitespace)
  r"(\((?:\s|//.*?\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]+)((?:\s|//.*?\n|/[*].*?[*]/)*\)(?:\s|//.*?\n|/[*].*?[*]/)*)([$a-zA-Z_][a-zA-Z0-9_]+(?:\s|//.*?\n|/[*].*?[*]/)*:)" is(by-groups(using(self class), keyword.type, using(self class), name.function)) -> go-to(function-parameters)
  r"(\((?:\s|//.*?\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]+)((?:\s|//.*?\n|/[*].*?[*]/)*\)(?:\s|//.*?\n|/[*].*?[*]/)*)([$a-zA-Z_][a-zA-Z0-9_]+)" is(by-groups(using(self class), keyword.type, using(self class), name.function)) -> pop
  r"([$a-zA-Z_][a-zA-Z0-9_]+(?:\s|//.*?\n|/[*].*?[*]/)*:)" is(by-groups(name.function)) -> go-to(function-parameters)
  r"([$a-zA-Z_][a-zA-Z0-9_]+)" is(by-groups(name.function)) -> pop
  r"" is(text) -> pop

lex(classname):
  r"([a-zA-Z_][a-zA-Z0-9_]*)((?:\s|//.*?\n|/[*].*?[*]/)*:(?:\s|//.*?\n|/[*].*?[*]/)*)([a-zA-Z_][a-zA-Z0-9_]*)?" is(by-groups(name.class, using(self class), name.class)) -> pop
  r"([a-zA-Z_][a-zA-Z0-9_]*)((?:\s|//.*?\n|/[*].*?[*]/)*\()([a-zA-Z_][a-zA-Z0-9_]*)(\))" is(by-groups(name.class, using(self class), name.label, text)) -> pop
  r"([a-zA-Z_][a-zA-Z0-9_]*)" is(name.class) -> pop

lex(forward-classname):
  r"([a-zA-Z_][a-zA-Z0-9_]*)(\s*,\s*)" is(by-groups(name.class, text)) -> push
  r"([a-zA-Z_][a-zA-Z0-9_]*)(\s*;?)" is(by-groups(name.class, text)) -> pop

lex(badregex):
  r"\n" is(text) -> pop

lex(function-parameters):
  any-of(whitespace)
  r"(\((?:\s|//.*?\n|/[*].*?[*]/)*)([^\)]+)((?:\s|//.*?\n|/[*].*?[*]/)*\)(?:\s|//.*?\n|/[*].*?[*]/)*)([$a-zA-Z_][a-zA-Z0-9_]+)" is(by-groups(using(self class), keyword.type, using(self class), text))
  r"([$a-zA-Z_][a-zA-Z0-9_]+(?:\s|//.*?\n|/[*].*?[*]/)*:)" is(name.function)
  r"(:)" is(name.function)
  r"(,(?:\s|//.*?\n|/[*].*?[*]/)*\.\.\.)" is(using(self class))
  r"([$a-zA-Z_][a-zA-Z0-9_]+)" is(text)

lex(if0):
  r"^\s*\#if.*?(?<!\\)\n" is(comment.preproc) -> push
  r"^\s*\#endif.*?(?<!\\)\n" is(comment.preproc) -> pop
  r".*?\n" is(comment)

lex(whitespace):
  r"(@import)(\s+)(\"(?:\\\\|\\\"|[^\"])*\")" is(by-groups(comment.preproc, text, literal.string.double))
  r"(@import)(\s+)(<(?:\\\\|\\>|[^>])*>)" is(by-groups(comment.preproc, text, literal.string.double))
  r"(\#(?:include|import))(\s+)(\"(?:\\\\|\\\"|[^\"])*\")" is(by-groups(comment.preproc, text, literal.string.double))
  r"(\#(?:include|import))(\s+)(<(?:\\\\|\\>|[^>])*>)" is(by-groups(comment.preproc, text, literal.string.double))
  r"\#if\s+0" is(comment.preproc) -> go-to(if0)
  r"\#" is(comment.preproc) -> go-to(macro)
  r"\n" is(text)
  r"\s+" is(text)
  r"\\\n" is(text)
  r"//(\n|(.|\n)*?[^\\]\n)" is(comment.single)
  r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
  r"<!--" is(comment)

lex(root):
  any-of(whitespace)
  r"^((?:\s|//.*?\n|/[*].*?[*]/)*[\+-](?:\s|//.*?\n|/[*].*?[*]/)*)([\(a-zA-Z_].*?[^\(])((?:\s|//.*?\n|/[*].*?[*]/)*{)" is(by-groups(using(self class), using(self class), using(self class)))
  r"(@interface|@implementation)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
  r"(@class|@protocol)(\s*)" is(by-groups(keyword, text)) -> go-to(forward-classname)
  r"(\s*)(@end)(\s*)" is(by-groups(text, keyword, text))
  any-of(statements)
  r"[{\(\)}]" is(punctuation)
  r";" is(punctuation)

lex(slashstartsregex):
  any-of(whitespace)
  r"/(\\.|[^\[/\\\n]|\[(\\.|[^\]\\\n])*])+/([gim]+\b|\B)" is(literal.string.regex) -> pop
  r"(?=/)" is(text) -> do-all(pop, go-to(badregex))
  r"" is(text) -> pop

lex(macro):
  r"[^/\n]+" is(comment.preproc)
  r"/[*](.|\n)*?[*]/" is(comment.multiline)
  r"//.*?\n" is(comment.single) -> pop
  r"/" is(comment.preproc)
  r"(?<=\\)\n" is(comment.preproc)
  r"\n" is(comment.preproc) -> pop

lex(expression):
  r"([$a-zA-Z_][a-zA-Z0-9_]*)(\()" is(by-groups(name.function, punctuation))
  r"(\))" is(punctuation) -> pop

