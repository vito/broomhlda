use("atomy")
use("hl/define")

Lexer = lexer:
name: "Tcsh"
aliases: ["tcsh", "csh"]
extensions: [".tcsh", ".csh"]
mimetypes: ["application/x-csh"]
start: .root
flags: 0

lex(curly):
  Regexp new("}") is(keyword) -> pop
  Regexp new(":-") is(keyword)
  Regexp new("[a-zA-Z0-9_]+") is(name.variable)
  Regexp new("[^}:\"\\'`$]+") is(punctuation)
  Regexp new(":") is(punctuation)
  any-of(root)

lex(backticks):
  Regexp new("`") is(literal.string.backtick) -> pop
  any-of(root)

lex(root):
  any-of(basic)
  Regexp new("\\$\\(") is(keyword) -> go-to(paren)
  Regexp new("\\${#?") is(keyword) -> go-to(curly)
  Regexp new("`") is(literal.string.backtick) -> go-to(backticks)
  any-of(data)

lex(basic):
  Regexp new("\\b(if|endif|else|while|then|foreach|case|default|continue|goto|breaksw|end|switch|endsw)\\s*\\b") is(keyword)
  Regexp new("\\b(alias|alloc|bg|bindkey|break|builtins|bye|caller|cd|chdir|complete|dirs|echo|echotc|eval|exec|exit|fg|filetest|getxvers|glob|getspath|hashstat|history|hup|inlib|jobs|kill|limit|log|login|logout|ls-F|migrate|newgrp|nice|nohup|notify|onintr|popd|printenv|pushd|rehash|repeat|rootnode|popd|pushd|set|shift|sched|setenv|setpath|settc|setty|setxvers|shift|source|stop|suspend|source|suspend|telltc|time|umask|unalias|uncomplete|unhash|universe|unlimit|unset|unsetenv|ver|wait|warp|watchlog|where|which)\\s*\\b") is(name.builtin)
  Regexp new("#.*\\n") is(comment)
  Regexp new("\\\\[\\w\\W]") is(literal.string.escape)
  Regexp new("(\\b\\w+)(\\s*)(=)") is(by-groups(name.variable, text, operator))
  Regexp new("[\\[\\]{}()=]+") is(operator)
  Regexp new("<<\\s*(\\'?)\\\\?(\\w+)[\\w\\W]+?\\2") is(literal.string)

lex(paren):
  Regexp new("\\)") is(keyword) -> pop
  any-of(root)

lex(data):
  Regexp new("(?s)\"(\\\\\\\\|\\\\[0-7]+|\\\\.|[^\"\\\\])*\"") is(literal.string.double)
  Regexp new("(?s)'(\\\\\\\\|\\\\[0-7]+|\\\\.|[^'\\\\])*'") is(literal.string.single)
  Regexp new("\\s+") is(text)
  Regexp new("[^=\\s\\n\\[\\]{}()$\"\\'`\\\\]+") is(text)
  Regexp new("\\d+(?= |\\Z)") is(literal.number)
  Regexp new("\\$#?(\\w+|.)") is(name.variable)

