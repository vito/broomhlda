use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "Erlang"
  aliases: ["erlang"]
  extensions: [".erl", ".hrl", ".es", ".escript"]
  mimetypes: ["text/x-erlang"]
  start: .root
  flags: 0

  lex(root):
    r"\s+" is(text)
    r"%.*\n" is(comment)
    r"(after|begin|case|catch|cond|end|fun|if|let|of|query|receive|try|when)\b" is(keyword)
    r"(abs|append_element|apply|atom_to_list|binary_to_list|bitstring_to_list|binary_to_term|bit_size|bump_reductions|byte_size|cancel_timer|check_process_code|delete_module|demonitor|disconnect_node|display|element|erase|exit|float|float_to_list|fun_info|fun_to_list|function_exported|garbage_collect|get|get_keys|group_leader|hash|hd|integer_to_list|iolist_to_binary|iolist_size|is_atom|is_binary|is_bitstring|is_boolean|is_builtin|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_process_alive|is_record|is_reference|is_tuple|length|link|list_to_atom|list_to_binary|list_to_bitstring|list_to_existing_atom|list_to_float|list_to_integer|list_to_pid|list_to_tuple|load_module|localtime_to_universaltime|make_tuple|md5|md5_final|md5_update|memory|module_loaded|monitor|monitor_node|node|nodes|open_port|phash|phash2|pid_to_list|port_close|port_command|port_connect|port_control|port_call|port_info|port_to_list|process_display|process_flag|process_info|purge_module|put|read_timer|ref_to_list|register|resume_process|round|send|send_after|send_nosuspend|set_cookie|setelement|size|spawn|spawn_link|spawn_monitor|spawn_opt|split_binary|start_timer|statistics|suspend_process|system_flag|system_info|system_monitor|system_profile|term_to_binary|tl|trace|trace_delivered|trace_info|trace_pattern|trunc|tuple_size|tuple_to_list|universaltime_to_localtime|unlink|unregister|whereis)\b" is(name.builtin)
    r"(and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\b" is(operator.word)
    r"^-" is(punctuation) -> go-to(directive)
    r"(\+\+?|--?|\*|/|<|>|/=|=:=|=/=|=<|>=|==?|<-|!|\?)" is(operator)
    r"\"" is(literal.string) -> go-to(string)
    r"<<" is(name.label)
    r">>" is(name.label)
    r"((?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]'))(:)" is(by-groups(name.namespace, punctuation))
    r"(?:^|(?<=:))((?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]'))(\s*)(\()" is(by-groups(name.function, text, punctuation))
    r"[+-]?(?:[2-9]|[12][0-9]|3[0-6])\#[0-9a-zA-Z]+" is(literal.number.integer)
    r"[+-]?\d+" is(literal.number.integer)
    r"[+-]?\d+.\d+" is(literal.number.float)
    r"[\]\[:_@\\".{}()|;,]" is(punctuation)
    r"(?:[A-Z_][a-zA-Z0-9_]*)" is(name.variable)
    r"(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]')" is(name)
    r"\?(?:(?:[A-Z_][a-zA-Z0-9_]*)|(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]'))" is(name.constant)
    r"\$(?:(?:\\(?:[bdefnrstv\'\"\\/]|[0-7][0-7]?[0-7]?|\^[a-zA-Z]))|\\[ %]|[^\\])" is(literal.string.char)
    r"\#(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]')(:?\.(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]'))?" is(name.label)

  lex(string):
    r"(?:\\(?:[bdefnrstv\'\"\\/]|[0-7][0-7]?[0-7]?|\^[a-zA-Z]))" is(literal.string.escape)
    r"\"" is(literal.string) -> pop
    r"\126[0-9.*]*[\126\#+bBcdefginpPswWxX]" is(literal.string.interpol)
    r"[^\"\\\126]+" is(literal.string)
    r"\126" is(literal.string)

  lex(directive):
    r"(define)(\s*)(\()((?:(?:[A-Z_][a-zA-Z0-9_]*)|(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]')))" is(by-groups(name.entity, text, punctuation, name.constant)) -> pop
    r"(record)(\s*)(\()((?:(?:[A-Z_][a-zA-Z0-9_]*)|(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]')))" is(by-groups(name.entity, text, punctuation, name.label)) -> pop
    r"(?:[a-z][a-zA-Z0-9_]*|'[^\n']*[^\\]')" is(name.entity) -> pop

const-set(.Lexer, lexer)
