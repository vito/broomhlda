use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "systemverilog"
  aliases: ["systemverilog", "sv"]
  extensions: [".sv", ".svh"]
  mimetypes: ["text/x-systemverilog"]
  start: .root
  flags: 0

  lex(classname):
    r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

  lex(macro):
    r"[^/\n]+" is(comment.preproc)
    r"/[*](.|\n)*?[*]/" is(comment.multiline)
    r"//.*?\n" is(comment.single) -> pop
    r"/" is(comment.preproc)
    r"(?<=\\)\n" is(comment.preproc)
    r"\n" is(comment.preproc) -> pop

  lex(root):
    r"^\s*`define" is(comment.preproc) -> go-to(macro)
    r"^(\s*)(package)(\s+)" is(by-groups(text, keyword.namespace, text))
    r"^(\s*)(import)(\s+)" is(by-groups(text, keyword.namespace, text)) -> go-to(import)
    r"\n" is(text)
    r"\s+" is(text)
    r"\\\n" is(text)
    r"/(\\\n)?/(\n|(.|\n)*?[^\\]\n)" is(comment.single)
    r"/(\\\n)?[*](.|\n)*?[*](\\\n)?/" is(comment.multiline)
    r"[{}\#@]" is(punctuation)
    r"L?\"" is(literal.string) -> go-to(string)
    r"L?'(\\.|\\[0-7]{1,3}|\\x[a-fA-F0-9]{1,2}|[^\\\'\n])'" is(literal.string.char)
    r"(\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[lL]?" is(literal.number.float)
    r"(\d+\.\d*|\.\d+|\d+[fF])[fF]?" is(literal.number.float)
    r"([0-9]+)|(\'h)[0-9a-fA-F]+" is(literal.number.hex)
    r"([0-9]+)|(\'b)[0-1]+" is(literal.number.hex)
    r"([0-9]+)|(\'d)[0-9]+" is(literal.number.integer)
    r"([0-9]+)|(\'o)[0-7]+" is(literal.number.oct)
    r"\'[01xz]" is(literal.number)
    r"\d+[Ll]?" is(literal.number.integer)
    r"\*/" is(error)
    r"[\126!%^&*+=|?:<>/-]" is(operator)
    r"[()\[\],.;\']" is(punctuation)
    r"`[a-zA-Z_][a-zA-Z0-9_]*" is(name.constant)
    r"(accept_on|alias|always|always_comb|always_ff|always_latch|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|checker|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endchecker|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|eventually|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|global|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|implies|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|let|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nexttime|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|reject_on|release|repeat|restrict|return|rnmos|rpmos|rtran|rtranif0|rtranif1|s_always|s_eventually|s_nexttime|s_until|s_until_with|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong|strong0|strong1|struct|super|supply0|supply1|sync_accept_on|sync_reject_on|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unique0|unsigned|until|until_with|untyped|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\b" is(keyword)
    r"(`__FILE__|`__LINE__|`begin_keywords|`celldefine|`default_nettype|`define|`else|`elsif|`end_keywords|`endcelldefine|`endif|`ifdef|`ifndef|`include|`line|`nounconnected_drive|`pragma|`resetall|`timescale|`unconnected_drive|`undef|`undefineall)\b" is(comment.preproc)
    r"(\$display|\$displayb|\$displayh|\$displayo|\$dumpall|\$dumpfile|\$dumpflush|\$dumplimit|\$dumpoff|\$dumpon|\$dumpports|\$dumpportsall|\$dumpportsflush|\$dumpportslimit|\$dumpportsoff|\$dumpportson|\$dumpvars|\$fclose|\$fdisplay|\$fdisplayb|\$fdisplayh|\$fdisplayo|\$feof|\$ferror|\$fflush|\$fgetc|\$fgets|\$fmonitor|\$fmonitorb|\$fmonitorh|\$fmonitoro|\$fopen|\$fread|\$fscanf|\$fseek|\$fstrobe|\$fstrobeb|\$fstrobeh|\$fstrobeo|\$ftell|\$fwrite|\$fwriteb|\$fwriteh|\$fwriteo|\$monitor|\$monitorb|\$monitorh|\$monitoro|\$monitoroff|\$monitoron|\$plusargs|\$readmemb|\$readmemh|\$rewind|\$sformat|\$sformatf|\$sscanf|\$strobe|\$strobeb|\$strobeh|\$strobeo|\$swrite|\$swriteb|\$swriteh|\$swriteo|\$test|\$ungetc|\$value\$plusargs|\$write|\$writeb|\$writeh|\$writememb|\$writememh|\$writeo)\b" is(name.builtin)
    r"(class)(\s+)" is(by-groups(keyword, text)) -> go-to(classname)
    r"(byte|shortint|int|longint|integer|time|bit|logic|reg|supply0|supply1|tri|triand|trior|tri0|tri1|trireg|uwire|wire|wand|worshortreal|real|realtime)\b" is(keyword.type)
    r"[a-zA-Z_][a-zA-Z0-9_]*:(?!:)" is(name.label)
    r"[a-zA-Z_][a-zA-Z0-9_]*" is(name)

  lex(string):
    r"\"" is(literal.string) -> pop
    r"\\([\\abfnrtv\"\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})" is(literal.string.escape)
    r"[^\\\"\n]+" is(literal.string)
    r"\\\n" is(literal.string)
    r"\\" is(literal.string)

  lex(import):
    r"[a-zA-Z0-9_:]+\*?" is(name.namespace) -> pop

const-set(.Lexer, lexer)
