use("atomy")
use("hl/define")

Lexer = lexer:
name: "Prolog"
aliases: ["prolog"]
extensions: [".prolog", ".pro", ".pl"]
mimetypes: ["text/x-prolog"]
start: .root
flags: 0

lex(nested-comment):
  Regexp new("\\*/") is(comment.multiline) -> pop
  Regexp new("/\\*") is(comment.multiline) -> push
  Regexp new("[^*/]+") is(comment.multiline)
  Regexp new("[*/]") is(comment.multiline)

lex(root):
  Regexp new("^#.*") is(comment.single)
  Regexp new("/\\*") is(comment.multiline) -> go-to(nested-comment)
  Regexp new("%.*") is(comment.single)
  Regexp new("[0-9]+") is(literal.number)
  Regexp new("[\\[\\](){}|.,;!]") is(punctuation)
  Regexp new(":-|-->") is(punctuation)
  Regexp new("\"(?:\\\\x[0-9a-fA-F]+\\\\|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\[0-7]+\\\\|\\\\[\\w\\W]|[^\"])*\"") is(literal.string.double)
  Regexp new("'(?:''|[^'])*'") is(literal.string.atom)
  Regexp new("(is|<|>|=<|>=|==|=:=|=|/|//|\\*|\\+|-)(?=\\s|[a-zA-Z0-9\\[])") is(operator)
  Regexp new("(mod|div|not)\\b") is(operator)
  Regexp new("_") is(keyword)
  Regexp new("([a-z]+)(:)") is(by-groups(name.namespace, punctuation))
  Regexp new("([a-z\192-\8191\12352-\55295\57344-\65519][a-zA-Z0-9_$\192-\8191\12352-\55295\57344-\65519]*)(\\s*)(:-|-->)") is(by-groups(name.function, text, operator))
  Regexp new("([a-z\192-\8191\12352-\55295\57344-\65519][a-zA-Z0-9_$\192-\8191\12352-\55295\57344-\65519]*)(\\s*)(\\()") is(by-groups(name.function, text, punctuation))
  Regexp new("[a-z\192-\8191\12352-\55295\57344-\65519][a-zA-Z0-9_$\192-\8191\12352-\55295\57344-\65519]*") is(literal.string.atom)
  Regexp new("[#&*+\\-./:<=>?@\\\\^\126\161-\191\8208-\12351]+") is(literal.string.atom)
  Regexp new("[A-Z_][A-Za-z0-9_]*") is(name.variable)
  Regexp new("\\s+|[\8192-\8207\65520-\65534\65519]") is(text)

