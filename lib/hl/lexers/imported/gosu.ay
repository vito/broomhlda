use("atomy")
use("hl/define")

Lexer = lexer:
name: "Gosu"
aliases: ["gosu"]
extensions: [".gs", ".gsx", ".gsp", ".vark"]
mimetypes: ["text/x-gosu"]
start: .root
flags: Regexp MULTILINE

lex(stringTemplateShorthand):
  r"\"" is(literal.string) -> go-to(string)
  r"\{" is(operator) -> go-to(stringTemplateShorthand)
  r"\}" is(operator) -> pop
  any-of(root)

lex(stringTemplate):
  r"\"" is(literal.string) -> go-to(string)
  r"%>" is(operator) -> pop
  any-of(root)

lex(root):
  r"^(\s*(?:[a-zA-Z_][a-zA-Z0-9_\.\[\]]*\s+)+?)([a-zA-Z_][a-zA-Z0-9_]*)(\s*)(\()" is(by-groups(using(self class), name.function, text, operator))
  r"[^\S\n]+" is(text)
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)
  r"@[a-zA-Z_][a-zA-Z0-9_\.]*" is(name.decorator)
  r"(in|as|typeof|statictypeof|typeis|typeas|if|else|foreach|for|index|while|do|continue|break|return|try|catch|finally|this|throw|new|switch|case|default|eval|super|outer|classpath|using)\b" is(keyword)
  r"(var|delegate|construct|function|private|internal|protected|public|abstract|override|final|static|extends|transient|implements|represents|readonly)\b" is(keyword.declaration)
  r"(property\s+)(get|set)?" is(keyword.declaration)
  r"(boolean|byte|char|double|float|int|long|short|void|block)\b" is(keyword.type)
  r"(package)(\s+)" is(by-groups(keyword.namespace, text))
  r"(true|false|null|NaN|Infinity)\b" is(keyword.constant)
  r"(class|interface|enhancement|enum)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(keyword.declaration, text, name.class))
  r"(uses)(\s+)([a-zA-Z0-9_.]+\*?)" is(by-groups(keyword.namespace, text, name.namespace))
  r"\"" is(literal.string) -> go-to(string)
  r"(\??[\.\#])([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"(:)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"[a-zA-Z_\$][a-zA-Z0-9_]*" is(name)
  r"and|or|not|[\\\126\^\*!%&\[\]\(\)\{\}<>\|+=:;,./?-]" is(operator)
  r"[0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?" is(literal.number.float)
  r"[0-9]+" is(literal.number.integer)
  r"\n" is(text)

lex(string):
  r"\"" is(literal.string) -> pop
  any-of(templateText)

lex(templateText):
  r"(\\<)|(\\\$)" is(literal.string)
  r"(<%@\s+)(extends|params)" is(by-groups(operator, name.decorator)) -> go-to(stringTemplate)
  r"<%!--.*?--%>" is(comment.multiline)
  r"(<%)|(<%=)" is(operator) -> go-to(stringTemplate)
  r"\$\{" is(operator) -> go-to(stringTemplateShorthand)
  r"." is(literal.string)

