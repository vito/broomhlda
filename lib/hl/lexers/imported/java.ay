use("atomy")
use("hl/define")

Lexer = lexer:
name: "Java"
aliases: ["java"]
extensions: [".java"]
mimetypes: ["text/x-java"]
start: .root
flags: Regexp MULTILINE

lex(import):
  r"[a-zA-Z0-9_.]+\*?" is(name.namespace) -> pop

lex(root):
  r"^(\s*(?:[a-zA-Z_][a-zA-Z0-9_\.\[\]]*\s+)+?)([a-zA-Z_][a-zA-Z0-9_]*)(\s*)(\()" is(by-groups(using(self class), name.function, text, operator))
  r"[^\S\n]+" is(text)
  r"//.*?\n" is(comment.single)
  r"/\*.*?\*/" is(comment.multiline)
  r"@[a-zA-Z_][a-zA-Z0-9_\.]*" is(name.decorator)
  r"(assert|break|case|catch|continue|default|do|else|finally|for|if|goto|instanceof|new|return|switch|this|throw|try|while)\b" is(keyword)
  r"(abstract|const|enum|extends|final|implements|native|private|protected|public|static|strictfp|super|synchronized|throws|transient|volatile)\b" is(keyword.declaration)
  r"(boolean|byte|char|double|float|int|long|short|void)\b" is(keyword.type)
  r"(package)(\s+)" is(by-groups(keyword.namespace, text))
  r"(true|false|null)\b" is(keyword.constant)
  r"(class|interface)(\s+)" is(by-groups(keyword.declaration, text)) -> go-to(class)
  r"(import)(\s+)" is(by-groups(keyword.namespace, text)) -> go-to(import)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"'\\.'|'[^\\]'|'\\u[0-9a-f]{4}'" is(literal.string.char)
  r"(\.)([a-zA-Z_][a-zA-Z0-9_]*)" is(by-groups(operator, name.attribute))
  r"[a-zA-Z_][a-zA-Z0-9_]*:" is(name.label)
  r"[a-zA-Z_\$][a-zA-Z0-9_]*" is(name)
  r"[\126\^\*!%&\[\]\(\)\{\}<>\|+=:;,./?-]" is(operator)
  r"[0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?" is(literal.number.float)
  r"0x[0-9a-f]+" is(literal.number.hex)
  r"[0-9]+L?" is(literal.number.integer)
  r"\n" is(text)

lex(class):
  r"[a-zA-Z_][a-zA-Z0-9_]*" is(name.class) -> pop

