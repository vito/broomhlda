use("atomy")
use("hl/define")

Lexer = lexer:
name: "Darcs Patch"
aliases: ["dpatch"]
extensions: [".dpatch", ".darcspatch"]
mimetypes: []
start: .root
flags: 0

lex(comment):
  Regexp new("[^\\]].*\\n") is(comment)
  Regexp new("\\]") is(operator) -> pop

lex(insert):
  any-of(specialText)
  Regexp new("\\[") is(generic.inserted)
  Regexp new("[^\\n\\[]*") is(generic.inserted)

lex(delete):
  any-of(specialText)
  Regexp new("\\[") is(generic.deleted)
  Regexp new("[^\\n\\[]*") is(generic.deleted)

lex(root):
  Regexp new("<") is(operator)
  Regexp new(">") is(operator)
  Regexp new("{") is(operator)
  Regexp new("}") is(operator)
  Regexp new("(\\[)((?:TAG )?)(.*)(\\n)(.*)(\\*\\*)(\\d+)(\\s?)(\\])") is(by-groups(operator, keyword, name, text, name, operator, literal.date, text, operator))
  Regexp new("(\\[)((?:TAG )?)(.*)(\\n)(.*)(\\*\\*)(\\d+)(\\s?)") is(by-groups(operator, keyword, name, text, name, operator, literal.date, text)) -> go-to(comment)
  Regexp new("New patches:") is(generic.heading)
  Regexp new("Context:") is(generic.heading)
  Regexp new("Patch bundle hash:") is(generic.heading)
  Regexp new("(\\s*)(hunk|addfile|adddir|rmfile|rmdir|move|replace)(.*\\n)") is(by-groups(text, keyword, text))
  Regexp new("\\+") is(generic.inserted) -> go-to(insert)
  Regexp new("-") is(generic.deleted) -> go-to(delete)
  Regexp new(".*\\n") is(text)

lex(specialText):
  Regexp new("\\n") is(text) -> pop
  Regexp new("\\[_[^_]*_]") is(operator)

