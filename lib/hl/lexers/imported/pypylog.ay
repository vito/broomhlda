use(require("atomy"))
use(require("hl/define"))

lexer = lexer:
  name: "PyPy Log"
  aliases: ["pypylog", "pypy"]
  extensions: [".pypylog"]
  mimetypes: ["application/x-pypylog"]
  start: .root
  flags: 0

  lex(extra-stuff):
    r"\s+" is(text)
    r"\#.*?$" is(comment)

  lex(jit-backend-counts):
    r"\[\w+\] jit-backend-counts}$" is(keyword) -> pop
    r":" is(punctuation)
    r"\d+" is(literal.number)
    any-of(extra-stuff)

  lex(root):
    r"\[\w+\] {jit-log-.*?$" is(keyword) -> go-to(jit-log)
    r"\[\w+\] {jit-backend-counts$" is(keyword) -> go-to(jit-backend-counts)
    any-of(extra-stuff)

  lex(jit-log):
    r"\[\w+\] jit-log-.*?}$" is(keyword) -> pop
    r"^\+\d+: " is(comment)
    r"--end of the loop--" is(comment)
    r"[ifp]\d+" is(name)
    r"ptr\d+" is(name)
    r"(\()(\w+(?:\.\w+)?)(\))" is(by-groups(punctuation, name.builtin, punctuation))
    r"[\[\]=,()]" is(punctuation)
    r"(\d+\.\d+|inf|-inf)" is(literal.number.float)
    r"-?\d+" is(literal.number.integer)
    r"'.*'" is(literal.string)
    r"(None|descr|ConstClass|ConstPtr|TargetToken)" is(name)
    r"<.*?>+" is(name.builtin)
    r"(label|debug_merge_point|jump|finish)" is(name.class)
    r"(int_add_ovf|int_add|int_sub_ovf|int_sub|int_mul_ovf|int_mul|int_floordiv|int_mod|int_lshift|int_rshift|int_and|int_or|int_xor|int_eq|int_ne|int_ge|int_gt|int_le|int_lt|int_is_zero|int_is_true|uint_floordiv|uint_ge|uint_lt|float_add|float_sub|float_mul|float_truediv|float_neg|float_eq|float_ne|float_ge|float_gt|float_le|float_lt|float_abs|ptr_eq|ptr_ne|instance_ptr_eq|instance_ptr_ne|cast_int_to_float|cast_float_to_int|force_token|quasiimmut_field|same_as|virtual_ref_finish|virtual_ref|mark_opaque_ptr|call_may_force|call_assembler|call_loopinvariant|call_release_gil|call_pure|call|new_with_vtable|new_array|newstr|newunicode|new|arraylen_gc|getarrayitem_gc_pure|getarrayitem_gc|setarrayitem_gc|getarrayitem_raw|setarrayitem_raw|getfield_gc_pure|getfield_gc|getinteriorfield_gc|setinteriorfield_gc|getfield_raw|setfield_gc|setfield_raw|strgetitem|strsetitem|strlen|copystrcontent|unicodegetitem|unicodesetitem|unicodelen|guard_true|guard_false|guard_value|guard_isnull|guard_nonnull_class|guard_nonnull|guard_class|guard_no_overflow|guard_not_forced|guard_no_exception|guard_not_invalidated)" is(name.builtin)
    any-of(extra-stuff)

const-set(.Lexer, lexer)
