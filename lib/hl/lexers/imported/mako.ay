use("atomy")
use("hl/define")

Lexer = lexer:
name: "Mako"
aliases: ["mako"]
extensions: [".mao"]
mimetypes: ["application/x-mako"]
start: .root
flags: 0

lex(ondeftags):
  r"<%" is(comment.preproc)
  r"(?<=<%)(include|inherit|namespace|page)" is(name.builtin)
  any-of(tag)

lex(tag):
  r"((?:\w+)\s*=)(\s*)(\".*?\")" is(by-groups(name.attribute, text, literal.string))
  r"/?\s*>" is(comment.preproc) -> pop
  r"\s+" is(text)

lex(root):
  r"(\s*)(%)(\s*end(?:\w+))(\n|\Z)" is(by-groups(text, comment.preproc, keyword, other))
  r"(\s*)(%)([^\n]*)(\n|\Z)" is(by-groups(text, comment.preproc, using(Python), other))
  r"(\s*)(\#\#[^\n]*)(\n|\Z)" is(by-groups(text, comment.preproc, other))
  r"<%doc>.*?</%doc>"(m) is(comment.preproc)
  r"(<%)([\w\.\:]+)" is(by-groups(comment.preproc, name.builtin)) -> go-to(tag)
  r"(</%)([\w\.\:]+)(>)" is(by-groups(comment.preproc, name.builtin, comment.preproc))
  r"<%(?=([\w\.\:]+))" is(comment.preproc) -> go-to(ondeftags)
  r"(<%(?:!?))(.*?)(%>)"(m) is(by-groups(comment.preproc, using(Python), comment.preproc))
  r"(\$\{)(.*?)(\})" is(by-groups(comment.preproc, using(Python), comment.preproc))
  r"(?sx)\10                (.+?)                \# anything, followed by:\10                (?:\10                 (?<=\n)(?=%|\\#\\#) | \# an eval or comment line\10                 (?=\\#\*) |          \# multiline comment\10                 (?=</?%) |          \# a python block\10                                     \# call start or end\10                 (?=\$\{) |          \# a substitution\10                 (?<=\n)(?=\s*%) |\10                                     \# - don't consume\10                 (\\\n) |            \# an escaped newline\10                 \Z                  \# end of string\10                )\10            " is(by-groups(other, operator))
  r"\s+" is(text)

lex(attr):
  r"\".*?\"" is(literal.string) -> pop
  r"'.*?'" is(literal.string) -> pop
  r"[^\s>]+" is(literal.string) -> pop

