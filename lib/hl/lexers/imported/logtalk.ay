use("atomy")
use("hl/define")

Lexer = lexer:
name: "Logtalk"
aliases: ["logtalk"]
extensions: [".lgt"]
mimetypes: ["text/x-logtalk"]
start: .root
flags: 0

lex(quoted-atom):
  r"''" is(literal.string)
  r"'" is(literal.string) -> pop
  r"\\([\\abfnrtv\"\']|(x[a-fA-F0-9]+|[0-7]+)\\)" is(literal.string.escape)
  r"[^\\'\n]+" is(literal.string)
  r"\\" is(literal.string)

lex(root):
  r"^\s*:-\s" is(punctuation) -> go-to(directive)
  r"%.*?\n" is(comment)
  r"/\*(.|\n)*?\*/" is(comment)
  r"\n" is(text)
  r"\s+" is(text)
  r"0'." is(literal.number)
  r"0b[01]+" is(literal.number)
  r"0o[0-7]+" is(literal.number)
  r"0x[0-9a-fA-F]+" is(literal.number)
  r"\d+\.?\d*((e|E)(\+|-)?\d+)?" is(literal.number)
  r"([A-Z_][a-zA-Z0-9_]*)" is(name.variable)
  r"(after|before)(?=[(])" is(keyword)
  r"(parameter|this|se(lf|nder))(?=[(])" is(keyword)
  r"(current_predicate|predicate_property)(?=[(])" is(keyword)
  r"(expand_(goal|term)|(goal|term)_expansion|phrase)(?=[(])" is(keyword)
  r"(abolish|c(reate|urrent))_(object|protocol|category)(?=[(])" is(keyword)
  r"(object|protocol|category)_property(?=[(])" is(keyword)
  r"co(mplements_object|nforms_to_protocol)(?=[(])" is(keyword)
  r"extends_(object|protocol|category)(?=[(])" is(keyword)
  r"imp(lements_protocol|orts_category)(?=[(])" is(keyword)
  r"(instantiat|specializ)es_class(?=[(])" is(keyword)
  r"(current_event|(abolish|define)_events)(?=[(])" is(keyword)
  r"(current|set)_logtalk_flag(?=[(])" is(keyword)
  r"logtalk_(compile|l(ibrary_path|oad_context|oad))(?=[(])" is(keyword)
  r"(clause|retract(all)?)(?=[(])" is(keyword)
  r"a(bolish|ssert(a|z))(?=[(])" is(keyword)
  r"(ca(ll|tch)|throw)(?=[(])" is(keyword)
  r"(fail|true)\b" is(keyword)
  r"((bag|set)of|f(ind|or)all)(?=[(])" is(keyword)
  r"threaded(_(call|once|ignore|exit|peek|wait|notify))?(?=[(])" is(keyword)
  r"unify_with_occurs_check(?=[(])" is(keyword)
  r"(functor|arg|copy_term|numbervars)(?=[(])" is(keyword)
  r"(rem|mod|abs|sign)(?=[(])" is(keyword)
  r"float(_(integer|fractional)_part)?(?=[(])" is(keyword)
  r"(floor|truncate|round|ceiling)(?=[(])" is(keyword)
  r"(cos|atan|exp|log|s(in|qrt))(?=[(])" is(keyword)
  r"(var|atom(ic)?|integer|float|c(allable|ompound)|n(onvar|umber)|ground)(?=[(])" is(keyword)
  r"compare(?=[(])" is(keyword)
  r"(curren|se)t_(in|out)put(?=[(])" is(keyword)
  r"(open|close)(?=[(])" is(keyword)
  r"flush_output(?=[(])" is(keyword)
  r"(at_end_of_stream|flush_output)\b" is(keyword)
  r"(stream_property|at_end_of_stream|set_stream_position)(?=[(])" is(keyword)
  r"(nl|(get|peek|put)_(byte|c(har|ode)))(?=[(])" is(keyword)
  r"\bnl\b" is(keyword)
  r"read(_term)?(?=[(])" is(keyword)
  r"write(q|_(canonical|term))?(?=[(])" is(keyword)
  r"(current_)?op(?=[(])" is(keyword)
  r"(current_)?char_conversion(?=[(])" is(keyword)
  r"atom_(length|c(hars|o(ncat|des)))(?=[(])" is(keyword)
  r"(char_code|sub_atom)(?=[(])" is(keyword)
  r"number_c(har|ode)s(?=[(])" is(keyword)
  r"(se|curren)t_prolog_flag(?=[(])" is(keyword)
  r"\bhalt\b" is(keyword)
  r"halt(?=[(])" is(keyword)
  r"(::|:|\^\^)" is(operator)
  r"[{}]" is(keyword)
  r"\b(ignore|once)(?=[(])" is(keyword)
  r"\brepeat\b" is(keyword)
  r"(key)?sort(?=[(])" is(keyword)
  r"(>>|<<|/\\|\\\\|\\)" is(operator)
  r"\bis\b" is(keyword)
  r"(=:=|=\\=|<|=<|>=|>)" is(operator)
  r"=\.\." is(operator)
  r"(=|\\=)" is(operator)
  r"(==|\\==|@=<|@<|@>=|@>)" is(operator)
  r"(//|[-+*/])" is(operator)
  r"\b(e|pi|mod|rem)\b" is(operator)
  r"\b\*\*\b" is(operator)
  r"-->" is(operator)
  r"([!;]|->)" is(operator)
  r"\\+" is(operator)
  r"[?@]" is(operator)
  r"\^" is(operator)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"[()\[\],.|]" is(text)
  r"[a-z][a-zA-Z0-9_]*" is(text)
  r"'" is(literal.string) -> go-to(quoted-atom)

lex(directive):
  r"(el)?if(?=[(])" is(keyword) -> go-to(root)
  r"(e(lse|ndif))[.]" is(keyword) -> go-to(root)
  r"(category|object|protocol)(?=[(])" is(keyword) -> go-to(entityrelations)
  r"(end_(category|object|protocol))[.]" is(keyword) -> go-to(root)
  r"(public|protected|private)(?=[(])" is(keyword) -> go-to(root)
  r"e(n(coding|sure_loaded)|xport)(?=[(])" is(keyword) -> go-to(root)
  r"in(fo|itialization)(?=[(])" is(keyword) -> go-to(root)
  r"(dynamic|synchronized|threaded)[.]" is(keyword) -> go-to(root)
  r"(alias|d(ynamic|iscontiguous)|m(eta_predicate|ode|ultifile)|s(et_(logtalk|prolog)_flag|ynchronized))(?=[(])" is(keyword) -> go-to(root)
  r"op(?=[(])" is(keyword) -> go-to(root)
  r"(c(alls|oinductive)|reexport|use(s|_module))(?=[(])" is(keyword) -> go-to(root)
  r"[a-z][a-zA-Z0-9_]*(?=[(])" is(text) -> go-to(root)
  r"[a-z][a-zA-Z0-9_]*[.]" is(text) -> go-to(root)

lex(entityrelations):
  r"(complements|extends|i(nstantiates|mp(lements|orts))|specializes)(?=[(])" is(keyword)
  r"0'." is(literal.number)
  r"0b[01]+" is(literal.number)
  r"0o[0-7]+" is(literal.number)
  r"0x[0-9a-fA-F]+" is(literal.number)
  r"\d+\.?\d*((e|E)(\+|-)?\d+)?" is(literal.number)
  r"([A-Z_][a-zA-Z0-9_]*)" is(name.variable)
  r"[a-z][a-zA-Z0-9_]*" is(text)
  r"'" is(literal.string) -> go-to(quoted-atom)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)
  r"([)]\.)" is(text) -> go-to(root)
  r"(::)" is(operator)
  r"[()\[\],.|]" is(text)
  r"%.*?\n" is(comment)
  r"/\*(.|\n)*?\*/" is(comment)
  r"\n" is(text)
  r"\s+" is(text)

