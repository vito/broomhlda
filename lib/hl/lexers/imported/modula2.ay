use("atomy")
use("hl/define")

Lexer = lexer:
name: "Modula-2"
aliases: ["modula2", "m2"]
extensions: [".def", ".mod"]
mimetypes: ["text/x-modula2"]
start: .root
flags: Regexp MULTILINE

lex(punctuation):
  r"[\(\)\[\]{},.:;|]" is(punctuation)

lex(pragmas):
  r"\(\*\$(.*?)\*\)" is(comment.preproc)
  r"<\*(.*?)\*>" is(comment.preproc)

lex(whitespace):
  r"\n+" is(text)
  r"\s+" is(text)

lex(numliterals):
  r"[01]+B" is(literal.number.binary)
  r"[0-7]+B" is(literal.number.oct)
  r"[0-7]+C" is(literal.number.oct)
  r"[0-9A-F]+C" is(literal.number.hex)
  r"[0-9A-F]+H" is(literal.number.hex)
  r"[0-9]+\.[0-9]+E[+-][0-9]+" is(literal.number.float)
  r"[0-9]+\.[0-9]+" is(literal.number.float)
  r"[0-9]+" is(literal.number.integer)

lex(operators):
  r"[*/+=\#\126&<>\^-]" is(operator)
  r":=" is(operator)
  r"@" is(operator)
  r"\.\." is(operator)
  r"`" is(operator)
  r"::" is(operator)

lex(identifiers):
  r"([a-zA-Z_\$][a-zA-Z0-9_\$]*)" is(name)

lex(root):
  any-of(whitespace)
  any-of(comments)
  any-of(pragmas)
  any-of(identifiers)
  any-of(numliterals)
  any-of(strings)
  any-of(operators)
  any-of(punctuation)

lex(strings):
  r"'(\\\\|\\'|[^'])*'" is(literal.string)
  r"\"(\\\\|\\\"|[^\"])*\"" is(literal.string)

lex(comments):
  r"//.*?\n" is(comment.single)
  r"/\*(.*?)\*/" is(comment.multiline)
  r"\(\*([^\$].*?)\*\)" is(comment.multiline)

