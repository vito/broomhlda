use("atomy")
use("hl/define")

Lexer = lexer:
  name: "Atomy"
  aliases: "atomy"
  extensions: [".ay"]
  mimetypes: "text/x-atomy"
  start: .root
  flags: Regexp MULTILINE

  @@ident-char = raw"[\p{L}\d\-_]"
  @@identifier = r"[\p{Ll}_]#{@@ident-char}*"

  @@op-char = raw"[\p{S}!@#%&*\-\\.\/\?]"
  @@operator = r"(?!~`):?#{@@op-char}+"

  @@ascii = [
    "NUL","SOH","[SE]TX","EOT","ENQ","ACK",
    "BEL","BS","HT","LF","VT","FF","CR","S[OI]","DLE",
    "DC[1-4]","NAK","SYN","ETB","CAN",
    "EM","SUB","ESC","[FGRU]S","SP","DEL"
  ]


  word(reg) =
    r"(?<!#{@@op-char}|#{@@ident-char})#{reg}(?!#{@@op-char}|#{@@ident-char})"


  -- starting point for lexing
  lex(root):
    -- comments
    r"--.*?$" is(comment.single)
    r"{-" is(comment.multiline) => in-comment

    -- primitive constants
    word(r"true|false|nil|undefined") is(keyword.constant)
    word(r"self") is(name.builtin.pseudo)

    -- constants
    r"[A-Z][a-zA-Z0-9_]*" is(name.constant)

    -- floats
    r"[\+\-]?\d+[eE][\+\-]?\d+" is(number.float)
    r"[\+\-]?\d+\.\d+([eE][\+\-]?\d+)?" is(number.float)

    -- integers
    r"[\+\-]?0[oO][0-7]+" is(number.octal)
    r"[\+\-]?0[xX][\da-fA-F]+" is(number.hexadecimal)
    r"[\+\-]?\d+" is(number.integer)

    -- reserved words
    word(r"#language") is(keyword.reserved)

    -- special variables
    r"@@#{@@identifier}" is(name.variable.class)
    r"\$#{@@identifier}" is(name.variable.global)
    r"@#{@@identifier}" is(name.variable.instance)

    -- particles
    r"\.#{@@identifier}" is(string.symbol)

    -- quoting expressions
    r"['`]#{@@identifier}" is(string.symbol)
    r"['`]" is(string.symbol)

    -- unquote
    r"~#{@@identifier}" is(string.interpolate)
    r"~" is(string.interpolate)

    -- macro-quotes
    r"(#{@@identifier})(\")" is(by-groups(name, string)) => macro-quote

    -- identifiers
    @@identifier is(name)

    -- operators
    @@operator is(operator)

    -- strings
    r"\"" is(string) => in-string

    -- whitespace
    r"\s+" is(text)

    -- punctuation
    r"[\[\](),:;{}|]" is(punctuation)


  -- inside of a block comment; handle nesting
  lex(in-comment):
    r"[^\-\{\}]+" is(comment.multiline)
    r"{-" is(comment.multiline) -> push
    r"-}" is(comment.multiline) -> pop
    r"[-{}]" is(comment.mutline)


  -- inside of a string; contain escapes
  lex(in-string):
    r"[^\\\"]+" is(string)
    r"\\" is(string.escape) => escape
    r"\"" is(string) -> pop


  -- match delimiters in a macro-quote, skipping escapes
  lex(macro-quote) [d]:
    r"[^\\\"]" is(string)
    r"\\." is(string)
    r"\"" is(string) -> pop


  -- all of our character escapes
  lex(escape):
    r"[nsrtvfbae\\\"]" is(string.escape) -> pop
    r"\^[\]\[A-Z@\^_]" is(string.escape) -> pop
    Regexp new(@@ascii join("|")) is(string.escape) -> pop
    r"o[0-7]+" is(string.escape) -> pop
    r"x[\da-fA-F]+" is(string.escape) -> pop
    r"\d+" is(string.escape) -> pop
    r"\s+\\" is(string.escape) -> pop
