module(HL):
  module(States):
    data(State):
      Continue
      GoTo(@next)
      CapturesTo(@callback)
      Pop
      PopNum(@num)
      Push
      DoAll(@states)
      Combined(@matchers)

    class(HL::Lexers::Lexer):
      apply(Continue, _ = []) := nil

      apply(g: GoTo, _ = []) :=
        @state << @@matchers fetch(g next)

      apply(Push, _ = []) :=
        @state << @state last

      apply(Pop, _ = []) :=
        @state pop

      apply(p: PopNum, _ = []) :=
        @state pop(p num)

      apply(c: CapturesTo, cs = []) :=
        @state << c callback call(cs)

      apply(d: DoAll, _ = []) :=
        d each (s): apply(s)

      apply(c: Combined, _ = []) :=
        @state = c flatten + @state
