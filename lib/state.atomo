module(HL):
  module(States):
    data(State):
      Continue
      GoTo(@next)
      Pop
      PopNum(@num)
      Push
      DoAll(@states)
      Combined(@matchers)

    class(HL::Lexers::Lexer):
      apply(Continue, _ = []) := nil

      apply((g: GoTo), cs = []) :=
        @state << class matchers fetch(g next) call(cs)

      apply(Push, _ = []) :=
        @state << @state last

      apply(Pop, _ = []) :=
        @state pop

      apply((p: PopNum), _ = []) :=
        @state pop(p num)

      apply((d: DoAll), d = []) :=
        d each (s): apply(s, d)

      apply((c: Combined), d = []) :=
        @state << c matchers collect (l): l call(d)
