lexer(HL::Lexers::Hybris):

name: "Hybris"
aliases: ["hybris", "hy"]
extensions: [".hy", ".hyb"]
mimetypes: ["text/x-hybris", "application/x-hybris"]
start: #root
flags: Regexp::MULTILINE

lex(import):
  Regexp new("[a-zA-Z0-9_.]+\\*?") is(name.namespace) -> pop

lex(root):
  Regexp new("^(\\s*(?:function|method|operator\\s+)+?)([a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(\\()") is(by-groups(name.function, text, operator))
  Regexp new("[^\\S\\n]+") is(text)
  Regexp new("//.*?\\n") is(comment.single)
  Regexp new("/\\*.*?\\*/") is(comment.multiline)
  Regexp new("@[a-zA-Z_][a-zA-Z0-9_\\.]*") is(name.decorator)
  Regexp new("(break|case|catch|next|default|do|else|finally|for|foreach|of|unless|if|new|return|switch|me|throw|try|while)\\b") is(keyword)
  Regexp new("(extends|private|protected|public|static|throws|function|method|operator)\\b") is(keyword.declaration)
  Regexp new("(true|false|null|__FILE__|__LINE__|__VERSION__|__LIB_PATH__|__INC_PATH__)\\b") is(keyword.constant)
  Regexp new("(class|struct)(\\s+)") is(by-groups(keyword.declaration, text)) -> go-to(class)
  Regexp new("(import|include)(\\s+)") is(by-groups(keyword.namespace, text)) -> go-to(import)
  Regexp new("(gc_collect|gc_mm_items|gc_mm_usage|gc_collect_threshold|urlencode|urldecode|base64encode|base64decode|sha1|crc32|sha2|md5|md5_file|acos|asin|atan|atan2|ceil|cos|cosh|exp|fabs|floor|fmod|log|log10|pow|sin|sinh|sqrt|tan|tanh|isint|isfloat|ischar|isstring|isarray|ismap|isalias|typeof|sizeof|toint|tostring|fromxml|toxml|binary|pack|load|eval|var_names|var_values|user_functions|dyn_functions|methods|call|call_method|mknod|mkfifo|mount|umount2|umount|ticks|usleep|sleep|time|strtime|strdate|dllopen|dlllink|dllcall|dllcall_argv|dllclose|env|exec|fork|getpid|wait|popen|pclose|exit|kill|pthread_create|pthread_create_argv|pthread_exit|pthread_join|pthread_kill|smtp_send|http_get|http_post|http_download|socket|bind|listen|accept|getsockname|getpeername|settimeout|connect|server|recv|send|close|print|println|printf|input|readline|serial_open|serial_fcntl|serial_get_attr|serial_get_ispeed|serial_get_ospeed|serial_set_attr|serial_set_ispeed|serial_set_ospeed|serial_write|serial_read|serial_close|xml_load|xml_parse|fopen|fseek|ftell|fsize|fread|fwrite|fgets|fclose|file|readdir|pcre_replace|size|pop|unmap|has|keys|values|length|find|substr|replace|split|trim|remove|contains|join)\\b") is(name.builtin)
  Regexp new("(MethodReference|Runner|Dll|Thread|Pipe|Process|Runnable|CGI|ClientSocket|Socket|ServerSocket|File|Console|Directory|Exception)\\b") is(keyword.type)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("'\\\\.'|'[^\\\\]'|'\\\\u[0-9a-f]{4}'") is(literal.string.char)
  Regexp new("(\\.)([a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(operator, name.attribute))
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*:") is(name.label)
  Regexp new("[a-zA-Z_\\$][a-zA-Z0-9_]*") is(name)
  Regexp new("[\126\\^\\*!%&\\[\\]\\(\\)\\{\\}<>\\|+=:;,./?\\-@]+") is(operator)
  Regexp new("[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?") is(literal.number.float)
  Regexp new("0x[0-9a-f]+") is(literal.number.hex)
  Regexp new("[0-9]+L?") is(literal.number.integer)
  Regexp new("\\n") is(text)

lex(class):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.class) -> pop

