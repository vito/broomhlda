lexer(HL::Lexers::ActionScript3):

name: "ActionScript 3"
aliases: ["as3", "actionscript3"]
extensions: [".as"]
mimetypes: ["application/x-actionscript", "text/x-actionscript", "text/actionscript"]
start: #root
flags: Regexp::MULTILINE

lex(defval):
  Regexp new("(=)(\\s*)([^(),]+)(\\s*)(,?)") is(by-groups(operator, text, using(self send(#class)), text, operator)) -> pop
  Regexp new(",?") is(operator) -> pop

lex(type):
  Regexp new("(\\s*)(:)(\\s*)([$a-zA-Z_][a-zA-Z0-9_]*|\\*)") is(by-groups(text, operator, text, keyword.type)) -> pop(2)
  Regexp new("\\s*") is(text) -> pop(2)

lex(root):
  Regexp new("\\s+") is(text)
  Regexp new("(function\\s+)([$a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(\\()") is(by-groups(keyword.declaration, name.function, text, operator)) -> go-to(funcparams)
  Regexp new("(var|const)(\\s+)([$a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(:)(\\s*)([$a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(keyword.declaration, text, name, text, punctuation, text, keyword.type))
  Regexp new("(import|package)(\\s+)((?:[$a-zA-Z_][a-zA-Z0-9_]*|\\.)+)(\\s*)") is(by-groups(keyword, text, name.namespace, text))
  Regexp new("(new)(\\s+)([$a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(\\()") is(by-groups(keyword, text, keyword.type, text, operator))
  Regexp new("//.*?\\n") is(comment.single)
  Regexp new("/\\*.*?\\*/") is(comment.multiline)
  Regexp new("/(\\\\\\\\|\\\\/|[^\\n])*/[gisx]*") is(literal.string.regex)
  Regexp new("(\\.)([$a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(operator, name.attribute))
  Regexp new("(case|default|for|each|in|while|do|break|return|continue|if|else|throw|try|catch|with|new|typeof|arguments|instanceof|this|switch|import|include|as|is)\\b") is(keyword)
  Regexp new("(class|public|final|internal|native|override|private|protected|static|import|extends|implements|interface|intrinsic|return|super|dynamic|function|const|get|namespace|package|set)\\b") is(keyword.declaration)
  Regexp new("(true|false|null|NaN|Infinity|-Infinity|undefined|void)\\b") is(keyword.constant)
  Regexp new("(decodeURI|decodeURIComponent|encodeURI|escape|eval|isFinite|isNaN|isXMLName|clearInterval|fscommand|getTimer|getURL|getVersion|isFinite|parseFloat|parseInt|setInterval|trace|updateAfterEvent|unescape)\\b") is(name.function)
  Regexp new("[$a-zA-Z_][a-zA-Z0-9_]*") is(name)
  Regexp new("[0-9][0-9]*\\.[0-9]+([eE][0-9]+)?[fd]?") is(literal.number.float)
  Regexp new("0x[0-9a-f]+") is(literal.number.hex)
  Regexp new("[0-9]+") is(literal.number.integer)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string.double)
  Regexp new("'(\\\\\\\\|\\\\'|[^'])*'") is(literal.string.single)
  Regexp new("[\126\\^\\*!%&<>\\|+=:;,/?\\\\{}\\[\\]();.-]+") is(operator)

lex(funcparams):
  Regexp new("\\s+") is(text)
  Regexp new("(\\s*)(\\.\\.\\.)?([$a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(:)(\\s*)([$a-zA-Z_][a-zA-Z0-9_]*|\\*)(\\s*)") is(by-groups(text, punctuation, name, text, operator, text, keyword.type, text)) -> go-to(defval)
  Regexp new("\\)") is(operator) -> go-to(type)

