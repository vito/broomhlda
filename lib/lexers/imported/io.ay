namespace(broomhlda)

lexer(HL::Lexers::Io):

name: "Io"
aliases: ["io"]
extensions: [".io"]
mimetypes: ["text/x-iosrc"]
start: #root
flags: 0

lex(nestedcomment):
  Regexp new("[^+/]+") is(comment.multiline)
  Regexp new("/\\+") is(comment.multiline) -> push
  Regexp new("\\+/") is(comment.multiline) -> pop
  Regexp new("[+/]") is(comment.multiline)

lex(root):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("//(.*?)\\n") is(comment.single)
  Regexp new("#(.*?)\\n") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("/\\+") is(comment.multiline) -> go-to(nestedcomment)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("::=|:=|=|\\(|\\)|;|,|\\*|-|\\+|>|<|@|!|/|\\||\\^|\\.|%|&|\\[|\\]|\\{|\\}") is(operator)
  Regexp new("(clone|do|doFile|doString|method|for|if|else|elseif|then)\\b") is(keyword)
  Regexp new("(nil|false|true)\\b") is(name.constant)
  Regexp new("(Object|list|List|Map|args|Sequence|Coroutine|File)\8") is(name.builtin)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name)
  Regexp new("(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?") is(literal.number.float)
  Regexp new("\\d+") is(literal.number.integer)

