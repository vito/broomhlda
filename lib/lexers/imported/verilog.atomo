lexer(HL::Lexers::Verilog):

name: "verilog"
aliases: ["v"]
extensions: [".v", ".sv"]
mimetypes: ["text/x-verilog"]
start: #root
flags: 0

lex(classname):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.class) -> pop

lex(macro):
  Regexp new("[^/\\n]+") is(comment.preproc)
  Regexp new("/[*](.|\\n)*?[*]/") is(comment.multiline)
  Regexp new("//.*?\\n") is(comment.single) -> pop
  Regexp new("/") is(comment.preproc)
  Regexp new("(?<=\\\\)\\n") is(comment.preproc)
  Regexp new("\\n") is(comment.preproc) -> pop

lex(root):
  Regexp new("^\\s*`define") is(comment.preproc) -> go-to(macro)
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("[{}#@]") is(punctuation)
  Regexp new("L?\"") is(literal.string) -> go-to(string)
  Regexp new("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'") is(literal.string.char)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("([0-9]+)|(\\'h)[0-9a-fA-F]+") is(literal.number.hex)
  Regexp new("([0-9]+)|(\\'b)[0-1]+") is(literal.number.hex)
  Regexp new("([0-9]+)|(\\'d)[0-9]+") is(literal.number.integer)
  Regexp new("([0-9]+)|(\\'o)[0-7]+") is(literal.number.oct)
  Regexp new("\\'[01xz]") is(literal.number)
  Regexp new("\\d+[Ll]?") is(literal.number.integer)
  Regexp new("\\*/") is(error)
  Regexp new("[\126!%^&*+=|?:<>/-]") is(operator)
  Regexp new("[()\\[\\],.;\\']") is(punctuation)
  Regexp new("`[a-zA-Z_][a-zA-Z0-9_]*") is(name.constant)
  Regexp new("^\\s*(package)(\\s+)") is(by-groups(keyword.namespace, text))
  Regexp new("^\\s*(import)(\\s+)") is(by-groups(keyword.namespace, text)) -> go-to(import)
  Regexp new("(always|always_comb|always_ff|always_latch|and|assign|automatic|begin|break|buf|bufif0|bufif1|case|casex|casez|cmos|const|continue|deassign|default|defparam|disable|do|edge|else|end|endcase|endfunction|endgenerate|endmodule|endpackage|endprimitive|endspecify|endtable|endtask|enum|event|final|for|force|forever|fork|function|generate|genvar|highz0|highz1|if|initial|inout|input|integer|join|large|localparam|macromodule|medium|module|nand|negedge|nmos|nor|not|notif0|notif1|or|output|packed|parameter|pmos|posedge|primitive|pull0|pull1|pulldown|pullup|rcmos|ref|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|signed|small|specify|specparam|strength|string|strong0|strong1|struct|table|task|tran|tranif0|tranif1|type|typedef|unsigned|var|vectored|void|wait|weak0|weak1|while|xnor|xor)\\b") is(keyword)
  Regexp new("(`accelerate|`autoexpand_vectornets|`celldefine|`default_nettype|`else|`elsif|`endcelldefine|`endif|`endprotect|`endprotected|`expand_vectornets|`ifdef|`ifndef|`include|`noaccelerate|`noexpand_vectornets|`noremove_gatenames|`noremove_netnames|`nounconnected_drive|`protect|`protected|`remove_gatenames|`remove_netnames|`resetall|`timescale|`unconnected_drive|`undef)\\b") is(comment.preproc)
  Regexp new("(\\$bits|\\$bitstoreal|\\$bitstoshortreal|\\$countdrivers|\\$display|\\$fclose|\\$fdisplay|\\$finish|\\$floor|\\$fmonitor|\\$fopen|\\$fstrobe|\\$fwrite|\\$getpattern|\\$history|\\$incsave|\\$input|\\$itor|\\$key|\\$list|\\$log|\\$monitor|\\$monitoroff|\\$monitoron|\\$nokey|\\$nolog|\\$printtimescale|\\$random|\\$readmemb|\\$readmemh|\\$realtime|\\$realtobits|\\$reset|\\$reset_count|\\$reset_value|\\$restart|\\$rtoi|\\$save|\\$scale|\\$scope|\\$shortrealtobits|\\$showscopes|\\$showvariables|\\$showvars|\\$sreadmemb|\\$sreadmemh|\\$stime|\\$stop|\\$strobe|\\$time|\\$timeformat|\\$write)\\b") is(name.builtin)
  Regexp new("(class)(\\s+)") is(by-groups(keyword, text)) -> go-to(classname)
  Regexp new("(byte|shortint|int|longint|interger|time|bit|logic|reg|supply0|supply1|tri|triand|trior|tri0|tri1|trireg|uwire|wire|wand|worshortreal|real|realtime)\\b") is(keyword.type)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*:(?!:)") is(name.label)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name)

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

lex(import):
  Regexp new("[a-zA-Z0-9_:]+\\*?") is(name.namespace) -> pop

