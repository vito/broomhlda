lexer(HL::Lexers::Php):

name: "PHP"
aliases: ["php", "php3", "php4", "php5"]
extensions: [".php", ".php[345]"]
mimetypes: ["text/x-php"]
start: #root
flags: Regexp::IGNORECASE | Regexp::MULTILINE

lex(classname):
  Regexp new("[a-zA-Z_][\\\\a-zA-Z0-9_]*") is(name.class) -> pop

lex(php):
  Regexp new("\\?>") is(comment.preproc) -> pop
  Regexp new("<<<(\\'?)([a-zA-Z_][a-zA-Z0-9_]*)\\1\\n.*?\\n\\2\\;?\\n") is(literal.string)
  Regexp new("\\s+") is(text)
  Regexp new("#.*?\\n") is(comment.single)
  Regexp new("//.*?\\n") is(comment.single)
  Regexp new("/\\*\\*/") is(comment.multiline)
  Regexp new("/\\*\\*.*?\\*/") is(literal.string.doc)
  Regexp new("/\\*.*?\\*/") is(comment.multiline)
  Regexp new("(->|::)(\\s*)([a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(operator, text, name.attribute))
  Regexp new("[\126!%^&*+=|:.<>/?@-]+") is(operator)
  Regexp new("[\\[\\]{}();,]+") is(punctuation)
  Regexp new("(class)(\\s+)") is(by-groups(keyword, text)) -> go-to(classname)
  Regexp new("(function)(\\s*)(?=\\()") is(by-groups(keyword, text))
  Regexp new("(function)(\\s+)(&?)(\\s*)") is(by-groups(keyword, text, operator, text)) -> go-to(functionname)
  Regexp new("(const)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(keyword, text, name.constant))
  Regexp new("(and|E_PARSE|old_function|E_ERROR|or|as|E_WARNING|parent|eval|PHP_OS|break|exit|case|extends|PHP_VERSION|cfunction|FALSE|print|for|require|continue|foreach|require_once|declare|return|default|static|do|switch|die|stdClass|echo|else|TRUE|elseif|var|empty|if|xor|enddeclare|include|virtual|endfor|include_once|while|endforeach|global|__FILE__|endif|list|__LINE__|endswitch|new|__sleep|endwhile|not|array|__wakeup|E_ALL|NULL|final|php_user_filter|interface|implements|public|private|protected|abstract|clone|try|catch|throw|this|use|namespace)\\b") is(keyword)
  Regexp new("(true|false|null)\8") is(keyword.constant)
  Regexp new("\\$\\{\\$+[a-zA-Z_][a-zA-Z0-9_]*\\}") is(name.variable)
  Regexp new("\\$+[a-zA-Z_][a-zA-Z0-9_]*") is(name.variable)
  Regexp new("[\\\\a-zA-Z_][\\\\a-zA-Z0-9_]*") is(name.other)
  Regexp new("(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?") is(literal.number.float)
  Regexp new("\\d+[eE][+-]?[0-9]+") is(literal.number.float)
  Regexp new("0[0-7]+") is(literal.number.oct)
  Regexp new("0[xX][a-fA-F0-9]+") is(literal.number.hex)
  Regexp new("\\d+") is(literal.number.integer)
  Regexp new("'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'") is(literal.string.single)
  Regexp new("`([^`\\\\]*(?:\\\\.[^`\\\\]*)*)`") is(literal.string.backtick)
  Regexp new("\"") is(literal.string.double) -> go-to(string)

lex(root):
  Regexp new("<\\?(php)?") is(comment.preproc) -> go-to(php)
  Regexp new("[^<]+") is(other)
  Regexp new("<") is(other)

lex(functionname):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.function) -> pop

lex(string):
  Regexp new("\"") is(literal.string.double) -> pop
  Regexp new("[^{$\"\\\\]+") is(literal.string.double)
  Regexp new("\\\\([nrt\\\"$\\\\]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2})") is(literal.string.escape)
  Regexp new("\\$[a-zA-Z_][a-zA-Z0-9_]*(\\[\\S+\\]|->[a-zA-Z_][a-zA-Z0-9_]*)?") is(literal.string.interpol)
  Regexp new("(\\{\\$\\{)(.*?)(\\}\\})") is(by-groups(literal.string.interpol, using(self send(#class)), literal.string.interpol))
  Regexp new("(\\{)(\\$.*?)(\\})") is(by-groups(literal.string.interpol, using(self send(#class)), literal.string.interpol))
  Regexp new("(\\$\\{)(\\S+)(\\})") is(by-groups(literal.string.interpol, name.variable, literal.string.interpol))
  Regexp new("[${\\\\]+") is(literal.string.double)

