lexer(HL::Lexers::Go):

name: "Go"
aliases: ["go"]
extensions: [".go"]
mimetypes: ["text/x-gosrc"]
start: #root
flags: 0

lex(root):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(.*?)\\n") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("(break|default|func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|fallthrough|if|range|type|continue|for|import|return|var)\\b") is(keyword)
  Regexp new("(uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|float64|byte|uint|int|float|uintptr|string|close|closed|len|cap|new|make)\\b") is(name.builtin)
  Regexp new("\\d+(\\.\\d+[eE][+\\-]?\\d+|\\.\\d*|[eE][+\\-]?\\d+)") is(literal.number.float)
  Regexp new("\\.\\d+([eE][+\\-]?\\d+)?") is(literal.number.float)
  Regexp new("0[0-7]+") is(literal.number.oct)
  Regexp new("0[xX][0-9a-fA-F]+") is(literal.number.hex)
  Regexp new("(0|[1-9][0-9]*)") is(literal.number.integer)
  Regexp new("'(\\\\['\"\\\\abfnrtv]|\\\\x[0-9a-fA-F]{2}|\\\\[0-7]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|[^\\\\])'") is(literal.string.char)
  Regexp new("`[^`]*`") is(literal.string)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("(<<=|>>=|<<|>>|<=|>=|&\\^=|&\\^|\\+=|-=|\\*=|/=|%=|&=|\\|=|&&|\\|\\||<-|\\+\\+|--|==|!=|:=|\\.\\.\\.)|[+\\-*/%&|^<>=!()\\[\\]{}.,;:]") is(punctuation)
  Regexp new("[a-zA-Z_]\\w*") is(name)

