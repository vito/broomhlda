lexer(HL::Lexers::S):

name: "S"
aliases: ["splus", "s", "r"]
extensions: [".S", ".R"]
mimetypes: ["text/S-plus", "text/S", "text/R"]
start: #root
flags: 0

lex(statements):
  any-of(comments)
  Regexp new("\\s+") is(text)
  Regexp new("\\'") is(literal.string) -> go-to(string-squote)
  Regexp new("\\\"") is(literal.string) -> go-to(string-dquote)
  any-of(builtin-symbols)
  any-of(numbers)
  any-of(keywords)
  any-of(punctuation)
  any-of(operators)
  any-of(valid-name)

lex(string-dquote):
  Regexp new("[^\\\"]*\\\"") is(literal.string) -> pop

lex(operators):
  Regexp new("<-|-|==|<=|>=|<|>|&&|&|!=|\\|\\|?") is(operator)
  Regexp new("\\*|\\+|\\^|/|%%|%/%|=") is(operator)
  Regexp new("%in%|%*%") is(operator)

lex(keywords):
  Regexp new("for(?=\\s*\\()|while(?=\\s*\\()|if(?=\\s*\\()|(?<=\\s)else|(?<=\\s)break(?=;|$)|return(?=\\s*\\()|function(?=\\s*\\()") is(keyword.reserved)

lex(numbers):
  Regexp new("(?<![0-9a-zA-Z\\)\\}\\]`\\\"])(?=\\s*)[-\\+]?[0-9]+(\\.[0-9]*)?(E[0-9][-\\+]?(\\.[0-9]*)?)?") is(literal.number)
  Regexp new("\\.[0-9]*(E[0-9][-\\+]?(\\.[0-9]*)?)?") is(literal.number)

lex(valid-name):
  Regexp new("[a-zA-Z][0-9a-zA-Z\\._]+") is(text)
  Regexp new("`.+`") is(literal.string.backtick)

lex(builtin-symbols):
  Regexp new("(NULL|NA|TRUE|FALSE|NaN)\\b") is(keyword.constant)
  Regexp new("(T|F)\\b") is(keyword.variable)

lex(punctuation):
  Regexp new("\\[|\\]|\\[\\[|\\]\\]|\\$|\\(|\\)|@|:::?|;|,") is(punctuation)

lex(comments):
  Regexp new("#.*$") is(comment.single)

lex(root):
  any-of(statements)
  Regexp new("\\{|\\}") is(punctuation)
  Regexp new(".") is(text)

lex(string-squote):
  Regexp new("[^\\']*\\'") is(literal.string) -> pop

