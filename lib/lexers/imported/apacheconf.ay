namespace(broomhlda)

lexer(HL::Lexers::ApacheConf):

name: "ApacheConf"
aliases: ["apacheconf", "aconf", "apache"]
extensions: [".htaccess", "apache.conf", "apache2.conf"]
mimetypes: ["text/x-apacheconf"]
start: #root
flags: Regexp::IGNORECASE

lex(root):
  Regexp new("\\s+") is(text)
  Regexp new("(#.*?)$") is(comment)
  Regexp new("(<[^\\s>]+)(?:(\\s+)(.*?))?(>)") is(by-groups(name.tag, text, literal.string, name.tag))
  Regexp new("([a-zA-Z][a-zA-Z0-9]*)(\\s+)") is(by-groups(name.builtin, text)) -> go-to(value)
  Regexp new("\\.+") is(text)

lex(value):
  Regexp new("$") is(text) -> pop
  Regexp new("[^\\S\\n]+") is(text)
  Regexp new("\\d+\\.\\d+\\.\\d+\\.\\d+(?:/\\d+)?") is(literal.number)
  Regexp new("\\d+") is(literal.number)
  Regexp new("/([a-zA-Z0-9][a-zA-Z0-9_./-]+)") is(literal.string.other)
  Regexp new("(on|off|none|any|all|double|email|dns|min|minimal|os|productonly|full|emerg|alert|crit|error|warn|notice|info|debug|registry|script|inetd|standalone|user|group)\\b") is(keyword)
  Regexp new("\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"") is(literal.string.double)
  Regexp new("[^\\s\"]+") is(text)

