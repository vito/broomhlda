namespace(broomhlda)

lexer(HL::Lexers::BlitzMax):

name: "BlitzMax"
aliases: ["blitzmax", "bmax"]
extensions: [".bmx"]
mimetypes: ["text/x-bmx"]
start: #root
flags: Regexp::IGNORECASE

lex(root):
  Regexp new("[ \\t]+") is(text)
  Regexp new("\\.\\.\\n") is(text)
  Regexp new("'.*?\\n") is(comment.single)
  Regexp new("([ \\t]*)\\bRem\\n(\\n|.)*?\\s*\\bEnd([ \\t]*)Rem") is(comment.multiline)
  Regexp new("\"") is(literal.string.double) -> go-to(string)
  Regexp new("[0-9]+\\.[0-9]*(?!\\.)") is(literal.number.float)
  Regexp new("\\.[0-9]*(?!\\.)") is(literal.number.float)
  Regexp new("[0-9]+") is(literal.number.integer)
  Regexp new("\\$[0-9a-f]+") is(literal.number.hex)
  Regexp new("\\%[10]+") is(literal.number)
  Regexp new("(?:(?:(:)?([ \\t]*)(:?\\b(Shl|Shr|Sar|Mod)\\b|([+\\-*/&|\126]))|Or|And|Not|[=<>^]))") is(operator)
  Regexp new("[(),.:\\[\\]]") is(punctuation)
  Regexp new("(?:#[\\w \\t]*)") is(name.label)
  Regexp new("(?:\\?[\\w \\t]*)") is(comment.preproc)
  Regexp new("\\b(New)\\b([ \\t]?)([(]?)([a-z_][a-z0-9_]*)") is(by-groups(keyword.reserved, text, punctuation, name.class))
  Regexp new("\\b(Import|Framework|Module)([ \\t]+)([a-z_][a-z0-9_]*\\.[a-z_][a-z0-9_]*)") is(by-groups(keyword.reserved, text, keyword.namespace))
  Regexp new("([a-z_][a-z0-9_]*)(?:(?:([ \\t]*)(@{1,2}|[!#$%])|([ \\t]*:[ \\t]*\\b(?:Shl|Shr|Sar|Mod)\\b)|([ \\t]*)([:])([ \\t]*)(?:\\b(Int|Byte|Short|Float|Double|Long)\\b|([a-z_][a-z0-9_]*)))(?:([ \\t]*)(Ptr))?)?((?:[ \\t]|\\.\\.\\n)*)([(])") is(by-groups(name.function, text, keyword.type, operator, text, punctuation, text, keyword.type, name.class, text, keyword.type, text, punctuation))
  Regexp new("([a-z_][a-z0-9_]*)(?:(?:([ \\t]*)(@{1,2}|[!#$%])|([ \\t]*:[ \\t]*\\b(?:Shl|Shr|Sar|Mod)\\b)|([ \\t]*)([:])([ \\t]*)(?:\\b(Int|Byte|Short|Float|Double|Long)\\b|([a-z_][a-z0-9_]*)))(?:([ \\t]*)(Ptr))?)") is(by-groups(name.variable, text, keyword.type, operator, text, punctuation, text, keyword.type, name.class, text, keyword.type))
  Regexp new("\\b(Type|Extends)([ \\t]+)([a-z_][a-z0-9_]*)") is(by-groups(keyword.reserved, text, name.class))
  Regexp new("\\b(Ptr)\\b") is(keyword.type)
  Regexp new("\\b(Pi|True|False|Null|Self|Super)\\b") is(keyword.constant)
  Regexp new("\\b(Local|Global|Const|Field)\\b") is(keyword.declaration)
  Regexp new("\\b(TNullMethodException|TNullFunctionException|TNullObjectException|TArrayBoundsException|TRuntimeException)\\b") is(name.exception)
  Regexp new("\\b(Strict|SuperStrict|Module|ModuleInfo|End|Return|Continue|Exit|Public|Private|Var|VarPtr|Chr|Len|Asc|SizeOf|Sgn|Abs|Min|Max|New|Release|Delete|Incbin|IncbinPtr|IncbinLen|Framework|Include|Import|Extern|EndExtern|Function|EndFunction|Type|EndType|Extends|Method|EndMethod|Abstract|Final|If|Then|Else|ElseIf|EndIf|For|To|Next|Step|EachIn|While|Wend|EndWhile|Repeat|Until|Forever|Select|Case|Default|EndSelect|Try|Catch|EndTry|Throw|Assert|Goto|DefData|ReadData|RestoreData)\\b") is(keyword.reserved)
  Regexp new("([a-z_][a-z0-9_]*)") is(name.variable)

lex(string):
  Regexp new("\"\"") is(literal.string.double)
  Regexp new("\"C?") is(literal.string.double) -> pop
  Regexp new("[^\"]+") is(literal.string.double)

