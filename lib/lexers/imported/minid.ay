namespace(broomhlda)

lexer(HL::Lexers::MiniD):

name: "MiniD"
aliases: ["minid"]
extensions: [".md"]
mimetypes: ["text/x-minidsrc"]
start: #root
flags: 0

lex(nestedcomment):
  Regexp new("[^+/]+") is(comment.multiline)
  Regexp new("/\\+") is(comment.multiline) -> push
  Regexp new("\\+/") is(comment.multiline) -> pop
  Regexp new("[+/]") is(comment.multiline)

lex(root):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("//(.*?)\\n") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)
  Regexp new("/\\+") is(comment.multiline) -> go-to(nestedcomment)
  Regexp new("(as|assert|break|case|catch|class|continue|coroutine|default|do|else|finally|for|foreach|function|global|namespace|if|import|in|is|local|module|return|super|switch|this|throw|try|vararg|while|with|yield)\\b") is(keyword)
  Regexp new("(false|true|null)\\b") is(keyword.constant)
  Regexp new("([0-9][0-9_]*)?\\.[0-9_]+([eE][+\\-]?[0-9_]+)?") is(literal.number.float)
  Regexp new("0[Bb][01_]+") is(literal.number)
  Regexp new("0[Cc][0-7_]+") is(literal.number.oct)
  Regexp new("0[xX][0-9a-fA-F_]+") is(literal.number.hex)
  Regexp new("(0|[1-9][0-9_]*)") is(literal.number.integer)
  Regexp new("'(\\\\['\"?\\\\abfnrtv]|\\\\x[0-9a-fA-F]{2}|\\\\[0-9]{1,3}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|.)'") is(literal.string.char)
  Regexp new("@\"(\"\"|.)*\"") is(literal.string)
  Regexp new("`(``|.)*`") is(literal.string)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("(\126=|\\^=|%=|\\*=|==|!=|>>>=|>>>|>>=|>>|>=|<=>|\\?=|-\\>|<<=|<<|<=|\\+\\+|\\+=|--|-=|\\|\\||\\|=|&&|&=|\\.\\.|/=)|[-/.&$@|\\+<>!()\\[\\]{}?,;:=*%^\126#\\\\]") is(punctuation)
  Regexp new("[a-zA-Z_]\\w*") is(name)

