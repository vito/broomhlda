lexer(HL::Lexers::CommonLisp):

name: "Common Lisp"
aliases: ["common-lisp", "cl"]
extensions: [".cl", ".lisp", ".el"]
mimetypes: ["text/x-common-lisp"]
start: #root
flags: Regexp::IGNORECASE

lex(multiline-comment):
  Regexp new("#\\|") is(comment.multiline) -> push
  Regexp new("\\|#") is(comment.multiline) -> pop
  Regexp new("[^|#]+") is(comment.multiline)
  Regexp new("[|#]") is(comment.multiline)

lex(body):
  Regexp new("\\s+") is(text)
  Regexp new(";.*$") is(comment.single)
  Regexp new("#\\|") is(comment.multiline) -> go-to(multiline-comment)
  Regexp new("#\\d*Y.*$") is(comment.special)
  Regexp new("\"(\\\\.|[^\"\\\\])*\"") is(literal.string)
  Regexp new(":(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)") is(literal.string.symbol)
  Regexp new("'(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)") is(literal.string.symbol)
  Regexp new("'") is(operator)
  Regexp new("`") is(operator)
  Regexp new("[-+]?\\d+\\.?(?=[ \"()\\'\\n,;`])") is(literal.number.integer)
  Regexp new("[-+]?\\d+/\\d+(?=[ \"()\\'\\n,;`])") is(literal.number)
  Regexp new("[-+]?(\\d*\\.\\d+([defls][-+]?\\d+)?|\\d+(\\.\\d*)?[defls][-+]?\\d+)(?=[ \"()\\'\\n,;`])") is(literal.number.float)
  Regexp new("#\\\\.(?=[ \"()\\'\\n,;`])") is(literal.string.char)
  Regexp new("#\\\\(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)") is(literal.string.char)
  Regexp new("#\\(") is(operator) -> go-to(body)
  Regexp new("#\\d*\\*[01]*") is(literal.other)
  Regexp new("#:(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)") is(literal.string.symbol)
  Regexp new("#[.,]") is(operator)
  Regexp new("#\\'") is(name.function)
  Regexp new("#[bB][+-]?[01]+(/[01]+)?") is(literal.number)
  Regexp new("#[oO][+-]?[0-7]+(/[0-7]+)?") is(literal.number.oct)
  Regexp new("#[xX][+-]?[0-9a-fA-F]+(/[0-9a-fA-F]+)?") is(literal.number.hex)
  Regexp new("#\\d+[rR][+-]?[0-9a-zA-Z]+(/[0-9a-zA-Z]+)?") is(literal.number)
  Regexp new("(#[cC])(\\()") is(by-groups(literal.number, punctuation)) -> go-to(body)
  Regexp new("(#\\d+[aA])(\\()") is(by-groups(literal.other, punctuation)) -> go-to(body)
  Regexp new("(#[sS])(\\()") is(by-groups(literal.other, punctuation)) -> go-to(body)
  Regexp new("#[pP]?\"(\\\\.|[^\"])*\"") is(literal.other)
  Regexp new("#\\d+=") is(operator)
  Regexp new("#\\d+#") is(operator)
  Regexp new("#+nil(?=[ \"()\\'\\n,;`])\\s*\\(") is(comment.preproc) -> go-to(commented-form)
  Regexp new("#[+-]") is(operator)
  Regexp new("(,@|,|\\.)") is(operator)
  Regexp new("(t|nil)(?=[ \"()\\'\\n,;`])") is(name.constant)
  Regexp new("\\*(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)\\*") is(name.variable.global)
  Regexp new("(\\|[^|]+\\||(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126])(?:\\\\.|[a-zA-Z0-9!$%&*+-/<=>?@\\[\\]^_{}\126]|[#.:])*)") is(name.variable)
  Regexp new("\\(") is(punctuation) -> go-to(body)
  Regexp new("\\)") is(punctuation) -> pop

lex(root):
  Regexp new("") is(text) -> go-to(body)

lex(commented-form):
  Regexp new("\\(") is(comment.preproc) -> push
  Regexp new("\\)") is(comment.preproc) -> pop
  Regexp new("[^()]+") is(comment.preproc)

