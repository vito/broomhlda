namespace(broomhlda)

lexer(HL::Lexers::Logtalk):

name: "Logtalk"
aliases: ["logtalk"]
extensions: [".lgt"]
mimetypes: ["text/x-logtalk"]
start: #root
flags: 0

lex(quoted-atom):
  Regexp new("['][']") is(literal.string)
  Regexp new("[']") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|(x[a-fA-F0-9]+|[0-7]+)\\\\)") is(literal.string.escape)
  Regexp new("[^\\\\'\\n]+") is(literal.string)
  Regexp new("\\\\") is(literal.string)

lex(root):
  Regexp new("^\\s*:-\\s") is(punctuation) -> go-to(directive)
  Regexp new("%.*?\\n") is(comment)
  Regexp new("/\\*(.|\\n)*?\\*/") is(comment)
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("0'.") is(literal.number)
  Regexp new("0b[01]+") is(literal.number)
  Regexp new("0o[0-7]+") is(literal.number)
  Regexp new("0x[0-9a-fA-F]+") is(literal.number)
  Regexp new("\\d+\\.?\\d*((e|E)(\\+|-)?\\d+)?") is(literal.number)
  Regexp new("([A-Z_][a-zA-Z0-9_]*)") is(name.variable)
  Regexp new("(after|before)(?=[(])") is(keyword)
  Regexp new("(parameter|this|se(lf|nder))(?=[(])") is(keyword)
  Regexp new("(current_predicate|predicate_property)(?=[(])") is(keyword)
  Regexp new("(expand_(goal|term)|(goal|term)_expansion|phrase)(?=[(])") is(keyword)
  Regexp new("(abolish|c(reate|urrent))_(object|protocol|category)(?=[(])") is(keyword)
  Regexp new("(object|protocol|category)_property(?=[(])") is(keyword)
  Regexp new("complements_object(?=[(])") is(keyword)
  Regexp new("extends_(object|protocol|category)(?=[(])") is(keyword)
  Regexp new("imp(lements_protocol|orts_category)(?=[(])") is(keyword)
  Regexp new("(instantiat|specializ)es_class(?=[(])") is(keyword)
  Regexp new("(current_event|(abolish|define)_events)(?=[(])") is(keyword)
  Regexp new("(current|set)_logtalk_flag(?=[(])") is(keyword)
  Regexp new("logtalk_(compile|l(ibrary_path|oad))(?=[(])") is(keyword)
  Regexp new("(clause|retract(all)?)(?=[(])") is(keyword)
  Regexp new("a(bolish|ssert(a|z))(?=[(])") is(keyword)
  Regexp new("(ca(ll|tch)|throw)(?=[(])") is(keyword)
  Regexp new("(fail|true)\\b") is(keyword)
  Regexp new("((bag|set)of|f(ind|or)all)(?=[(])") is(keyword)
  Regexp new("threaded(_(call|once|ignore|exit|peek|wait|notify))?(?=[(])") is(keyword)
  Regexp new("unify_with_occurs_check(?=[(])") is(keyword)
  Regexp new("(functor|arg|copy_term)(?=[(])") is(keyword)
  Regexp new("(rem|mod|abs|sign)(?=[(])") is(keyword)
  Regexp new("float(_(integer|fractional)_part)?(?=[(])") is(keyword)
  Regexp new("(floor|truncate|round|ceiling)(?=[(])") is(keyword)
  Regexp new("(cos|atan|exp|log|s(in|qrt))(?=[(])") is(keyword)
  Regexp new("(var|atom(ic)?|integer|float|compound|n(onvar|umber))(?=[(])") is(keyword)
  Regexp new("(curren|se)t_(in|out)put(?=[(])") is(keyword)
  Regexp new("(open|close)(?=[(])") is(keyword)
  Regexp new("flush_output(?=[(])") is(keyword)
  Regexp new("(at_end_of_stream|flush_output)\\b") is(keyword)
  Regexp new("(stream_property|at_end_of_stream|set_stream_position)(?=[(])") is(keyword)
  Regexp new("(nl|(get|peek|put)_(byte|c(har|ode)))(?=[(])") is(keyword)
  Regexp new("\\bnl\\b") is(keyword)
  Regexp new("read(_term)?(?=[(])") is(keyword)
  Regexp new("write(q|_(canonical|term))?(?=[(])") is(keyword)
  Regexp new("(current_)?op(?=[(])") is(keyword)
  Regexp new("(current_)?char_conversion(?=[(])") is(keyword)
  Regexp new("atom_(length|c(hars|o(ncat|des)))(?=[(])") is(keyword)
  Regexp new("(char_code|sub_atom)(?=[(])") is(keyword)
  Regexp new("number_c(har|ode)s(?=[(])") is(keyword)
  Regexp new("(se|curren)t_prolog_flag(?=[(])") is(keyword)
  Regexp new("\\bhalt\\b") is(keyword)
  Regexp new("halt(?=[(])") is(keyword)
  Regexp new("(::|:|\\^\\^)") is(operator)
  Regexp new("[{}]") is(keyword)
  Regexp new("\\bonce(?=[(])") is(keyword)
  Regexp new("\\brepeat\\b") is(keyword)
  Regexp new("(>>|<<|/\\\\|\\\\\\\\|\\\\)") is(operator)
  Regexp new("\\bis\\b") is(keyword)
  Regexp new("(=:=|=\\\\=|<|=<|>=|>)") is(operator)
  Regexp new("=\\.\\.") is(operator)
  Regexp new("(=|\\\\=)") is(operator)
  Regexp new("(==|\\\\==|@=<|@<|@>=|@>)") is(operator)
  Regexp new("(//|[-+*/])") is(operator)
  Regexp new("\\b(mod|rem)\\b") is(operator)
  Regexp new("\\b\\*\\*\\b") is(operator)
  Regexp new("-->") is(operator)
  Regexp new("([!;]|->)") is(operator)
  Regexp new("\\\\+") is(operator)
  Regexp new("[?@]") is(operator)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("[()\\[\\],.|]") is(text)
  Regexp new("[a-z][a-zA-Z0-9_]*") is(text)
  Regexp new("[']") is(literal.string) -> go-to(quoted-atom)

lex(directive):
  Regexp new("(el)?if(?=[(])") is(keyword) -> go-to(root)
  Regexp new("(e(lse|ndif))[.]") is(keyword) -> go-to(root)
  Regexp new("(category|object|protocol)(?=[(])") is(keyword) -> go-to(entityrelations)
  Regexp new("(end_(category|object|protocol))[.]") is(keyword) -> go-to(root)
  Regexp new("(public|protected|private)(?=[(])") is(keyword) -> go-to(root)
  Regexp new("e(n(coding|sure_loaded)|xport)(?=[(])") is(keyword) -> go-to(root)
  Regexp new("in(fo|itialization)(?=[(])") is(keyword) -> go-to(root)
  Regexp new("(dynamic|synchronized|threaded)[.]") is(keyword) -> go-to(root)
  Regexp new("(alias|d(ynamic|iscontiguous)|m(eta_predicate|ode|ultifile)|s(et_(logtalk|prolog)_flag|ynchronized))(?=[(])") is(keyword) -> go-to(root)
  Regexp new("op(?=[(])") is(keyword) -> go-to(root)
  Regexp new("(calls|reexport|use(s|_module))(?=[(])") is(keyword) -> go-to(root)
  Regexp new("[a-z][a-zA-Z0-9_]*(?=[(])") is(text) -> go-to(root)
  Regexp new("[a-z][a-zA-Z0-9_]*[.]") is(text) -> go-to(root)

lex(entityrelations):
  Regexp new("(extends|i(nstantiates|mp(lements|orts))|specializes)(?=[(])") is(keyword)
  Regexp new("0'.") is(literal.number)
  Regexp new("0b[01]+") is(literal.number)
  Regexp new("0o[0-7]+") is(literal.number)
  Regexp new("0x[0-9a-fA-F]+") is(literal.number)
  Regexp new("\\d+\\.?\\d*((e|E)(\\+|-)?\\d+)?") is(literal.number)
  Regexp new("([A-Z_][a-zA-Z0-9_]*)") is(name.variable)
  Regexp new("[a-z][a-zA-Z0-9_]*") is(text)
  Regexp new("[']") is(literal.string) -> go-to(quoted-atom)
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("([)]\\.)") is(text) -> go-to(root)
  Regexp new("(::)") is(operator)
  Regexp new("[()\\[\\],.|]") is(text)
  Regexp new("%.*?\\n") is(comment)
  Regexp new("/\\*(.|\\n)*?\\*/") is(comment)
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)

