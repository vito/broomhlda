lexer(HL::Lexers::Modelica):

name: "Modelica"
aliases: ["modelica"]
extensions: [".mo"]
mimetypes: ["text/x-modelica"]
start: #root
flags: Regexp::IGNORECASE | Regexp::MULTILINE

lex(functions):
  Regexp new("(abs|acos|acosh|asin|asinh|atan|atan2|atan3|ceil|cos|cosh|cross|div|exp|floor|log|log10|mod|rem|sign|sin|sinh|size|sqrt|tan|tanh|zeros)\\b") is(name.function)

lex(classes):
  Regexp new("(block|class|connector|function|model|package|record|type)\\b") is(name.class)

lex(statements):
  Regexp new("\"") is(literal.string) -> go-to(string)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+|\\d.)[eE][+-]?\\d+[lL]?") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+)") is(literal.number.float)
  Regexp new("\\d+[Ll]?") is(literal.number.integer)
  Regexp new("[\126!%^&*+=|?:<>/-]") is(operator)
  Regexp new("[()\\[\\]{},.;]") is(punctuation)
  Regexp new("(true|false|NULL|Real|Integer|Boolean)\\b") is(name.builtin)
  Regexp new("([a-zA-Z_][\\w]*|'[a-zA-Z_\\+\\-\\*\\/\\^][\\w]*')(\\.([a-zA-Z_][\\w]*|'[a-zA-Z_\\+\\-\\*\\/\\^][\\w]*'))+") is(name.class)
  Regexp new("('[\\w\\+\\-\\*\\/\\^]+'|\\w+)") is(name)

lex(whitespace):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment)

lex(html-content):
  Regexp new("<\\s*/\\s*html\\s*>") is(name.tag) -> pop
  Regexp new(".+?(?=<\\s*/\\s*html\\s*>)") is(using(Html))

lex(keywords):
  Regexp new("(algorithm|annotation|break|connect|constant|constrainedby|discrete|each|else|elseif|elsewhen|encapsulated|enumeration|end|equation|exit|expandable|extends|external|false|final|flow|for|if|import|in|inner|input|loop|nondiscrete|outer|output|parameter|partial|protected|public|redeclare|replaceable|stream|time|then|true|when|while|within)\\b") is(keyword)

lex(operators):
  Regexp new("(and|assert|cardinality|change|delay|der|edge|initial|noEvent|not|or|pre|reinit|return|sample|smooth|terminal|terminate)\\b") is(name.builtin)

lex(root):
  any-of(whitespace)
  any-of(keywords)
  any-of(functions)
  any-of(operators)
  any-of(classes)
  Regexp new("(\"<html>|<html>)") is(name.tag) -> go-to(html-content)
  any-of(statements)

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

