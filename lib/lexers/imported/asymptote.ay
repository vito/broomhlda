namespace(broomhlda)

lexer(HL::Lexers::Asymptote):

name: "Asymptote"
aliases: ["asy", "asymptote"]
extensions: [".asy"]
mimetypes: ["text/x-asymptote"]
start: #root
flags: 0

lex(function):
  any-of(whitespace)
  any-of(statements)
  Regexp new(";") is(punctuation)
  Regexp new("{") is(punctuation) -> push
  Regexp new("}") is(punctuation) -> pop

lex(statements):
  Regexp new("\"(\\\\\\\\|\\\\\"|[^\"])*\"") is(literal.string)
  Regexp new("'") is(literal.string) -> go-to(string)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("0x[0-9a-fA-F]+[Ll]?") is(literal.number.hex)
  Regexp new("0[0-7]+[Ll]?") is(literal.number.oct)
  Regexp new("\\d+[Ll]?") is(literal.number.integer)
  Regexp new("[\126!%^&*+=|?:<>/-]") is(operator)
  Regexp new("[()\\[\\],.]") is(punctuation)
  Regexp new("\\b(case)(.+?)(:)") is(by-groups(keyword, using(self send(#class)), text))
  Regexp new("(and|controls|tension|atleast|curl|if|else|while|for|do|return|break|continue|struct|typedef|new|access|import|unravel|from|include|quote|static|public|private|restricted|this|explicit|true|false|null|cycle|newframe|operator)\\b") is(keyword)
  Regexp new("(Braid|FitResult|Label|Legend|TreeNode|abscissa|arc|arrowhead|binarytree|binarytreeNode|block|bool|bool3|bounds|bqe|circle|conic|coord|coordsys|cputime|ellipse|file|filltype|frame|grid3|guide|horner|hsv|hyperbola|indexedTransform|int|inversion|key|light|line|linefit|marginT|marker|mass|object|pair|parabola|path|path3|pen|picture|point|position|projection|real|revolution|scaleT|scientific|segment|side|slice|splitface|string|surface|tensionSpecifier|ticklocate|ticksgridT|tickvalues|transform|transformation|tree|triangle|trilinear|triple|vector|vertex|void)(?=([ ]{1,}[a-zA-Z]))") is(keyword.type)
  Regexp new("(Braid|FitResult|TreeNode|abscissa|arrowhead|block|bool|bool3|bounds|coord|frame|guide|horner|int|linefit|marginT|pair|pen|picture|position|real|revolution|slice|splitface|ticksgridT|tickvalues|tree|triple|vertex|void)\\b") is(keyword.type)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*:(?!:)") is(name.label)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name)

lex(whitespace):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment)

lex(statement):
  any-of(whitespace)
  any-of(statements)
  Regexp new("[{}]") is(punctuation)
  Regexp new(";") is(punctuation) -> pop

lex(root):
  any-of(whitespace)
  Regexp new("((?:[a-zA-Z0-9_*\\s])+?(?:\\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\\s*\\([^;]*?\\))((?:\\s|//.*?\\n|/[*].*?[*]/)+)({)") is(by-groups(using(self send(#class)), name.function, using(self send(#class)), using(self send(#class)), punctuation)) -> go-to(function)
  Regexp new("((?:[a-zA-Z0-9_*\\s])+?(?:\\s|[*]))([a-zA-Z_][a-zA-Z0-9_]*)(\\s*\\([^;]*?\\))((?:\\s|//.*?\\n|/[*].*?[*]/)+)(;)") is(by-groups(using(self send(#class)), name.function, using(self send(#class)), using(self send(#class)), punctuation))
  Regexp new("") is(text) -> go-to(statement)

lex(string):
  Regexp new("'") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\'?]|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("\\n") is(literal.string)
  Regexp new("[^\\\\'\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

