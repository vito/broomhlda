namespace(broomhlda)

lexer(HL::Lexers::Scss):

name: "SCSS"
aliases: ["scss"]
extensions: [".scss"]
mimetypes: ["text/x-scss"]
start: #root
flags: Regexp::IGNORECASE | Regexp::MULTILINE

lex(string-url):
  Regexp new("(\\\\#|#(?=[^\\n{])|[^\\n#)])+") is(literal.string.other)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("\\)") is(literal.string.other) -> pop

lex(attr):
  Regexp new("[^\\s:=\"\\[]+") is(name.attribute)
  Regexp new("#{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("[ \\t]*:") is(operator) -> go-to(value)

lex(string-double):
  Regexp new("(\\\\.|#(?=[^\\n{])|[^\\n\"#])+") is(literal.string.double)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("\"") is(literal.string.double) -> pop

lex(class):
  Regexp new("[\\w-]+") is(name.class)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("") is(text) -> pop

lex(pseudo-class):
  Regexp new("[\\w-]+") is(name.decorator)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("") is(text) -> pop

lex(value):
  Regexp new("[ \\t]+") is(text)
  Regexp new("[!$][\\w-]+") is(name.variable)
  Regexp new("url\\(") is(literal.string.other) -> go-to(string-url)
  Regexp new("[a-z_-][\\w-]*(?=\\()") is(name.function)
  Regexp new("(azimuth|background-attachment|background-color|background-image|background-position|background-repeat|background|border-bottom-color|border-bottom-style|border-bottom-width|border-left-color|border-left-style|border-left-width|border-right|border-right-color|border-right-style|border-right-width|border-top-color|border-top-style|border-top-width|border-bottom|border-collapse|border-left|border-width|border-color|border-spacing|border-style|border-top|border|caption-side|clear|clip|color|content|counter-increment|counter-reset|cue-after|cue-before|cue|cursor|direction|display|elevation|empty-cells|float|font-family|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-weight|font|height|letter-spacing|line-height|list-style-type|list-style-image|list-style-position|list-style|margin-bottom|margin-left|margin-right|margin-top|margin|marker-offset|marks|max-height|max-width|min-height|min-width|opacity|orphans|outline|outline-color|outline-style|outline-width|overflow|padding-bottom|padding-left|padding-right|padding-top|padding|page|page-break-after|page-break-before|page-break-inside|pause-after|pause-before|pause|pitch|pitch-range|play-during|position|quotes|richness|right|size|speak-header|speak-numeral|speak-punctuation|speak|speech-rate|stress|table-layout|text-align|text-decoration|text-indent|text-shadow|text-transform|top|unicode-bidi|vertical-align|visibility|voice-family|volume|white-space|widows|width|word-spacing|z-index|bottom|left|above|absolute|always|armenian|aural|auto|avoid|baseline|behind|below|bidi-override|blink|block|bold|bolder|both|capitalize|center-left|center-right|center|circle|cjk-ideographic|close-quote|collapse|condensed|continuous|crop|crosshair|cross|cursive|dashed|decimal-leading-zero|decimal|default|digits|disc|dotted|double|e-resize|embed|extra-condensed|extra-expanded|expanded|fantasy|far-left|far-right|faster|fast|fixed|georgian|groove|hebrew|help|hidden|hide|higher|high|hiragana-iroha|hiragana|icon|inherit|inline-table|inline|inset|inside|invert|italic|justify|katakana-iroha|katakana|landscape|larger|large|left-side|leftwards|level|lighter|line-through|list-item|loud|lower-alpha|lower-greek|lower-roman|lowercase|ltr|lower|low|medium|message-box|middle|mix|monospace|n-resize|narrower|ne-resize|no-close-quote|no-open-quote|no-repeat|none|normal|nowrap|nw-resize|oblique|once|open-quote|outset|outside|overline|pointer|portrait|px|relative|repeat-x|repeat-y|repeat|rgb|ridge|right-side|rightwards|s-resize|sans-serif|scroll|se-resize|semi-condensed|semi-expanded|separate|serif|show|silent|slow|slower|small-caps|small-caption|smaller|soft|solid|spell-out|square|static|status-bar|super|sw-resize|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|text|text-bottom|text-top|thick|thin|transparent|ultra-condensed|ultra-expanded|underline|upper-alpha|upper-latin|upper-roman|uppercase|url|visible|w-resize|wait|wider|x-fast|x-high|x-large|x-loud|x-low|x-small|x-soft|xx-large|xx-small|yes)\\b") is(name.constant)
  Regexp new("(indigo|gold|firebrick|indianred|darkolivegreen|darkseagreen|mediumvioletred|mediumorchid|chartreuse|mediumslateblue|springgreen|crimson|lightsalmon|brown|turquoise|olivedrab|cyan|skyblue|darkturquoise|goldenrod|darkgreen|darkviolet|darkgray|lightpink|darkmagenta|lightgoldenrodyellow|lavender|yellowgreen|thistle|violet|orchid|ghostwhite|honeydew|cornflowerblue|darkblue|darkkhaki|mediumpurple|cornsilk|bisque|slategray|darkcyan|khaki|wheat|deepskyblue|darkred|steelblue|aliceblue|gainsboro|mediumturquoise|floralwhite|coral|lightgrey|lightcyan|darksalmon|beige|azure|lightsteelblue|oldlace|greenyellow|royalblue|lightseagreen|mistyrose|sienna|lightcoral|orangered|navajowhite|palegreen|burlywood|seashell|mediumspringgreen|papayawhip|blanchedalmond|peru|aquamarine|darkslategray|ivory|dodgerblue|lemonchiffon|chocolate|orange|forestgreen|slateblue|mintcream|antiquewhite|darkorange|cadetblue|moccasin|limegreen|saddlebrown|darkslateblue|lightskyblue|deeppink|plum|darkgoldenrod|sandybrown|magenta|tan|rosybrown|pink|lightblue|palevioletred|mediumseagreen|dimgray|powderblue|seagreen|snow|mediumblue|midnightblue|paleturquoise|palegoldenrod|whitesmoke|darkorchid|salmon|lightslategray|lawngreen|lightgreen|tomato|hotpink|lightyellow|lavenderblush|linen|mediumaquamarine|blueviolet|peachpuff)\\b") is(name.entity)
  Regexp new("(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)\\b") is(name.builtin)
  Regexp new("\\!(important|default)") is(name.exception)
  Regexp new("(true|false)") is(name.pseudo)
  Regexp new("(and|or|not)") is(operator.word)
  Regexp new("/\\*") is(comment.multiline) -> go-to(inline-comment)
  Regexp new("//[^\\n]*") is(comment.single)
  Regexp new("\\#[a-z0-9]{1,6}") is(literal.number.hex)
  Regexp new("(-?\\d+)(\\%|[a-z]+)?") is(by-groups(literal.number.integer, keyword.type))
  Regexp new("(-?\\d*\\.\\d+)(\\%|[a-z]+)?") is(by-groups(literal.number.float, keyword.type))
  Regexp new("#{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("[\126\\^\\*!&%<>\\|+=@:,./?-]+") is(operator)
  Regexp new("[\\[\\]()]+") is(punctuation)
  Regexp new("\"") is(literal.string.double) -> go-to(string-double)
  Regexp new("'") is(literal.string.single) -> go-to(string-single)
  Regexp new("[a-z_-][\\w-]*") is(name)
  Regexp new("\\n") is(text)
  Regexp new("[;{}]") is(punctuation) -> go-to(root)

lex(for):
  Regexp new("(from|to|through)") is(operator.word)
  any-of(value)

lex(string-single):
  Regexp new("(\\\\.|#(?=[^\\n{])|[^\\n'#])+") is(literal.string.double)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("'") is(literal.string.double) -> pop

lex(inline-comment):
  Regexp new("(\\\\#|#(?=[^{])|\\*(?=[^/])|[^#*])+") is(comment.multiline)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("\\*/") is(comment) -> pop

lex(selector):
  Regexp new("[ \\t]+") is(text)
  Regexp new("\\:") is(name.decorator) -> go-to(pseudo-class)
  Regexp new("\\.") is(name.class) -> go-to(class)
  Regexp new("\\#") is(name.namespace) -> go-to(id)
  Regexp new("[a-zA-Z0-9_-]+") is(name.tag)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("&") is(keyword)
  Regexp new("[\126\\^\\*!&\\[\\]\\(\\)<>\\|+=@:;,./?-]") is(operator)
  Regexp new("\"") is(literal.string.double) -> go-to(string-double)
  Regexp new("'") is(literal.string.single) -> go-to(string-single)
  Regexp new("\\n") is(text)
  Regexp new("[;{}]") is(punctuation) -> go-to(root)

lex(root):
  Regexp new("\\s+") is(text)
  Regexp new("//.*?\\n") is(comment.single)
  Regexp new("/\\*.*?\\*/") is(comment.multiline)
  Regexp new("@import") is(keyword) -> go-to(value)
  Regexp new("@for") is(keyword) -> go-to(for)
  Regexp new("@(debug|warn|if|while)") is(keyword) -> go-to(value)
  Regexp new("(@mixin)( [\\w-]+)") is(by-groups(keyword, name.function)) -> go-to(value)
  Regexp new("(@include)( [\\w-]+)") is(by-groups(keyword, name.decorator)) -> go-to(value)
  Regexp new("@extend") is(keyword) -> go-to(selector)
  Regexp new("@[a-z0-9_-]+") is(keyword) -> go-to(selector)
  Regexp new("(\\$[\\w-]\\w*)([ \\t]*:)") is(by-groups(name.variable, operator)) -> go-to(value)
  Regexp new("(?=[^;{}][;}])") is(name.attribute) -> go-to(attr)
  Regexp new("(?=[^;{}:]+:[^a-z])") is(name.attribute) -> go-to(attr)
  Regexp new("") is(text) -> go-to(selector)

lex(id):
  Regexp new("[\\w-]+") is(name.namespace)
  Regexp new("#\\{") is(literal.string.interpol) -> go-to(interpolation)
  Regexp new("") is(text) -> pop

lex(interpolation):
  Regexp new("\\}") is(literal.string.interpol) -> pop
  any-of(value)

