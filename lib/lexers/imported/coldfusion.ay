namespace(broomhlda)

lexer(HL::Lexers::Coldfusion):

name: "cfstatement"
aliases: ["cfs"]
extensions: []
mimetypes: []
start: #root
flags: Regexp::IGNORECASE

lex(root):
  Regexp new("//.*") is(comment)
  Regexp new("\\+\\+|--") is(operator)
  Regexp new("[-+*/^&=!]") is(operator)
  Regexp new("<=|>=|<|>") is(operator)
  Regexp new("mod\\b") is(operator)
  Regexp new("(eq|lt|gt|lte|gte|not|is|and|or)\\b") is(operator)
  Regexp new("\\|\\||&&") is(operator)
  Regexp new("\"") is(literal.string.double) -> go-to(string)
  Regexp new("'.*?'") is(literal.string.single)
  Regexp new("\\d+") is(literal.number)
  Regexp new("(if|else|len|var|case|default|break|switch)\\b") is(keyword)
  Regexp new("([A-Za-z_$][A-Za-z0-9_.]*)\\s*(\\()") is(by-groups(name.function, punctuation))
  Regexp new("[A-Za-z_$][A-Za-z0-9_.]*") is(name.variable)
  Regexp new("[()\\[\\]{};:,.\\\\]") is(punctuation)
  Regexp new("\\s+") is(text)

lex(string):
  Regexp new("\"\"") is(literal.string.double)
  Regexp new("#.+?#") is(literal.string.interp)
  Regexp new("[^\"#]+") is(literal.string.double)
  Regexp new("#") is(literal.string.double)
  Regexp new("\"") is(literal.string.double) -> pop

