lexer(HL::Lexers::Felix):

name: "Felix"
aliases: ["felix", "flx"]
extensions: [".flx", ".flxh"]
mimetypes: ["text/x-felix"]
start: #root
flags: 0

lex(comment):
  Regexp new("//(.*?)\\n") is(comment.single)
  Regexp new("/[*]") is(comment.multiline) -> go-to(comment2)

lex(modulename2):
  any-of(whitespace)
  Regexp new("([a-zA-Z_]\\w*)") is(name.namespace) -> pop(2)

lex(modulename):
  any-of(whitespace)
  Regexp new("\\[") is(punctuation) -> do-all(go-to(modulename2), go-to(tvarlist))
  Regexp new("") is(error) -> go-to(modulename2)

lex(if0):
  Regexp new("^\\s*#if.*?(?<!\\\\)\\n") is(comment) -> push
  Regexp new("^\\s*#endif.*?(?<!\\\\)\\n") is(comment) -> pop
  Regexp new(".*?\\n") is(comment)

lex(whitespace):
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  any-of(comment)
  Regexp new("#\\s*if\\s+0") is(comment.preproc) -> go-to(if0)
  Regexp new("#") is(comment.preproc) -> go-to(macro)

lex(dqs):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\\\\\|\\\\\"|\\\\\\n") is(literal.string.escape)
  any-of(strings)

lex(sqs):
  Regexp new("'") is(literal.string) -> pop
  Regexp new("\\\\\\\\|\\\\'|\\\\\\n") is(literal.string.escape)
  any-of(strings)

lex(macro):
  any-of(comment)
  Regexp new("(import|include)(\\s+)(<[^>]*?>)") is(by-groups(comment.preproc, text, literal.string)) -> pop
  Regexp new("(import|include)(\\s+)(\"[^\"]*?\")") is(by-groups(comment.preproc, text, literal.string)) -> pop
  Regexp new("(import|include)(\\s+)('[^']*?')") is(by-groups(comment.preproc, text, literal.string)) -> pop
  Regexp new("[^/\\n]+") is(comment.preproc)
  Regexp new("/") is(comment.preproc)
  Regexp new("(?<=\\\\)\\n") is(comment.preproc)
  Regexp new("\\n") is(comment.preproc) -> pop

lex(operators):
  Regexp new("(and|not|in|is|isin|or|xor)\\b") is(operator.word)
  Regexp new("!=|==|<<|>>|\\|\\||&&|[-\126+/*%=<>&^|.$]") is(operator)

lex(tsqs):
  Regexp new("'''") is(literal.string) -> pop
  any-of(strings)
  any-of(nl)

lex(comment2):
  Regexp new("[^\\/*]") is(comment.multiline)
  Regexp new("/[*]") is(comment.multiline) -> push
  Regexp new("[*]/") is(comment.multiline) -> pop
  Regexp new("[\\/*]") is(comment.multiline)

lex(classname):
  any-of(whitespace)
  Regexp new("[a-zA-Z_]\\w*") is(name.class) -> pop
  Regexp new("(?=\\{)") is(text) -> pop

lex(stringescape):
  Regexp new("\\\\([\\\\abfnrtv\"\\']|\\n|N{.*?}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})") is(literal.string.escape)

lex(tdqs):
  Regexp new("\"\"\"") is(literal.string) -> pop
  any-of(strings)
  any-of(nl)

lex(nl):
  Regexp new("\\n") is(literal.string)

lex(funcname):
  any-of(whitespace)
  Regexp new("[a-zA-Z_]\\w*") is(name.function) -> pop
  Regexp new("(?=\\()") is(text) -> pop

lex(root):
  any-of(whitespace)
  Regexp new("(axiom|ctor|fun|gen|proc|reduce|union)\\b") is(keyword) -> go-to(funcname)
  Regexp new("(class|cclass|cstruct|obj|struct)\\b") is(keyword) -> go-to(classname)
  Regexp new("(instance|module|typeclass)\\b") is(keyword) -> go-to(modulename)
  Regexp new("(_|_deref|all|as|assert|attempt|call|callback|case|caseno|cclass|code|compound|ctypes|do|done|downto|elif|else|endattempt|endcase|endif|endmatch|enum|except|exceptions|expect|finally|for|forall|forget|fork|functor|goto|ident|if|incomplete|inherit|instance|interface|jump|lambda|loop|match|module|namespace|new|noexpand|nonterm|obj|of|open|parse|raise|regexp|reglex|regmatch|rename|return|the|then|to|type|typecase|typedef|typematch|typeof|upto|when|whilst|with|yield)\\b") is(keyword)
  Regexp new("(_gc_pointer|_gc_type|body|comment|const|export|header|inline|lval|macro|noinline|noreturn|package|private|pod|property|public|publish|requires|todo|virtual|use)\\b") is(name.decorator)
  Regexp new("(def|let|ref|val|var)\\b") is(keyword.declaration)
  Regexp new("(unit|void|any|bool|byte|offset|address|caddress|cvaddress|vaddress|tiny|short|int|long|vlong|utiny|ushort|vshort|uint|ulong|uvlong|int8|int16|int32|int64|uint8|uint16|uint32|uint64|float|double|ldouble|complex|dcomplex|lcomplex|imaginary|dimaginary|limaginary|char|wchar|uchar|charp|charcp|ucharp|ucharcp|string|wstring|ustring|cont|array|varray|list|lvalue|opt|slice)\\b") is(keyword.type)
  Regexp new("(false|true)\\b") is(keyword.constant)
  any-of(operators)
  Regexp new("0[xX]([0-9a-fA-F_]*\\.[0-9a-fA-F_]+|[0-9a-fA-F_]+)[pP][+\\-]?[0-9_]+[lLfFdD]?") is(literal.number.float)
  Regexp new("[0-9_]+(\\.[0-9_]+[eE][+\\-]?[0-9_]+|\\.[0-9_]*|[eE][+\\-]?[0-9_]+)[lLfFdD]?") is(literal.number.float)
  Regexp new("\\.(0|[1-9][0-9_]*)([eE][+\\-]?[0-9_]+)?[lLfFdD]?") is(literal.number.float)
  Regexp new("0[Bb][01_]+([tTsSiIlLvV]|ll|LL|([iIuU])(8|16|32|64))?") is(literal.number)
  Regexp new("0[0-7_]+([tTsSiIlLvV]|ll|LL|([iIuU])(8|16|32|64))?") is(literal.number.oct)
  Regexp new("0[xX][0-9a-fA-F_]+([tTsSiIlLvV]|ll|LL|([iIuU])(8|16|32|64))?") is(literal.number.hex)
  Regexp new("(0|[1-9][0-9_]*)([tTsSiIlLvV]|ll|LL|([iIuU])(8|16|32|64))?") is(literal.number.integer)
  Regexp new("([rR][cC]?|[cC][rR])\"\"\"") is(literal.string) -> go-to(tdqs)
  Regexp new("([rR][cC]?|[cC][rR])'''") is(literal.string) -> go-to(tsqs)
  Regexp new("([rR][cC]?|[cC][rR])\"") is(literal.string) -> go-to(dqs)
  Regexp new("([rR][cC]?|[cC][rR])'") is(literal.string) -> go-to(sqs)
  Regexp new("[cCfFqQwWuU]?\"\"\"") is(literal.string) -> combined(stringescape, tdqs)
  Regexp new("[cCfFqQwWuU]?'''") is(literal.string) -> combined(stringescape, tsqs)
  Regexp new("[cCfFqQwWuU]?\"") is(literal.string) -> combined(stringescape, dqs)
  Regexp new("[cCfFqQwWuU]?'") is(literal.string) -> combined(stringescape, sqs)
  Regexp new("[\\[\\]{}:(),;?]") is(punctuation)
  Regexp new("[a-zA-Z_]\\w*:>") is(name.label)
  Regexp new("(_svc|while)\\b") is(name.builtin)
  Regexp new("(root|self|this)\\b") is(name.builtin.pseudo)
  Regexp new("[a-zA-Z_]\\w*") is(name)

lex(strings):
  Regexp new("%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[diouxXeEfFgGcrs%]") is(literal.string.interpol)
  Regexp new("[^\\\\\\'\"%\\n]+") is(literal.string)
  Regexp new("[\\'\"\\\\]") is(literal.string)
  Regexp new("%") is(literal.string)

lex(tvarlist):
  any-of(whitespace)
  any-of(operators)
  Regexp new("\\[") is(punctuation) -> push
  Regexp new("\\]") is(punctuation) -> pop
  Regexp new(",") is(punctuation)
  Regexp new("(with|where)\\b") is(keyword)
  Regexp new("[a-zA-Z_]\\w*") is(name)

