namespace(broomhlda)

lexer(HL::Lexers::Vala):

name: "Vala"
aliases: ["vala", "vapi"]
extensions: [".vala", ".vapi"]
mimetypes: ["text/x-vala"]
start: #root
flags: 0

lex(statements):
  Regexp new("L?\"") is(literal.string) -> go-to(string)
  Regexp new("L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'") is(literal.string.char)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?") is(literal.number.float)
  Regexp new("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?") is(literal.number.float)
  Regexp new("0x[0-9a-fA-F]+[Ll]?") is(literal.number.hex)
  Regexp new("0[0-7]+[Ll]?") is(literal.number.oct)
  Regexp new("\\d+[Ll]?") is(literal.number.integer)
  Regexp new("[\126!%^&*+=|?:<>/-]") is(operator)
  Regexp new("(\\[)(Compact|Immutable|(?:Boolean|Simple)Type)(\\])") is(by-groups(punctuation, name.decorator, punctuation))
  Regexp new("(\\[)(CCode|(?:Integer|Floating)Type)") is(by-groups(punctuation, name.decorator))
  Regexp new("[()\\[\\],.]") is(punctuation)
  Regexp new("(as|base|break|case|catch|construct|continue|default|delete|do|else|enum|finally|for|foreach|get|if|in|is|lock|new|out|params|return|set|sizeof|switch|this|throw|try|typeof|while|yield)\\b") is(keyword)
  Regexp new("(abstract|const|delegate|dynamic|ensures|extern|inline|internal|override|owned|private|protected|public|ref|requires|signal|static|throws|unowned|var|virtual|volatile|weak|yields)\\b") is(keyword.declaration)
  Regexp new("(namespace|using)(\\s+)") is(by-groups(keyword.namespace, text)) -> go-to(namespace)
  Regexp new("(class|errordomain|interface|struct)(\\s+)") is(by-groups(keyword.declaration, text)) -> go-to(class)
  Regexp new("(\\.)([a-zA-Z_][a-zA-Z0-9_]*)") is(by-groups(operator, name.attribute))
  Regexp new("(void|bool|char|double|float|int|int8|int16|int32|int64|long|short|size_t|ssize_t|string|time_t|uchar|uint|uint8|uint16|uint32|uint64|ulong|unichar|ushort)\\b") is(keyword.type)
  Regexp new("(true|false|null)\\b") is(name.builtin)
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name)

lex(whitespace):
  Regexp new("^\\s*#if\\s+0") is(comment.preproc) -> go-to(if0)
  Regexp new("\\n") is(text)
  Regexp new("\\s+") is(text)
  Regexp new("\\\\\\n") is(text)
  Regexp new("//(\\n|(.|\\n)*?[^\\\\]\\n)") is(comment.single)
  Regexp new("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/") is(comment.multiline)

lex(statement):
  any-of(whitespace)
  any-of(statements)
  Regexp new("[{}]") is(punctuation)
  Regexp new(";") is(punctuation) -> pop

lex(if0):
  Regexp new("^\\s*#if.*?(?<!\\\\)\\n") is(comment.preproc) -> push
  Regexp new("^\\s*#el(?:se|if).*\\n") is(comment.preproc) -> pop
  Regexp new("^\\s*#endif.*?(?<!\\\\)\\n") is(comment.preproc) -> pop
  Regexp new(".*?\\n") is(comment)

lex(namespace):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_.]*") is(name.namespace) -> pop

lex(root):
  any-of(whitespace)
  Regexp new("") is(text) -> go-to(statement)

lex(class):
  Regexp new("[a-zA-Z_][a-zA-Z0-9_]*") is(name.class) -> pop

lex(string):
  Regexp new("\"") is(literal.string) -> pop
  Regexp new("\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})") is(literal.string.escape)
  Regexp new("[^\\\\\"\\n]+") is(literal.string)
  Regexp new("\\\\\\n") is(literal.string)
  Regexp new("\\\\") is(literal.string)

